
WoegerFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d08  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f30  08009eb8  08009eb8  0000aeb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde8  0800bde8  0000d1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800bde8  0800bde8  0000cde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdf0  0800bdf0  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdf0  0800bdf0  0000cdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bdf4  0800bdf4  0000cdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800bdf8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1ec  2**0
                  CONTENTS
 10 .bss          00025c4c  200001ec  200001ec  0000d1ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025e38  20025e38  0000d1ec  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123d8  00000000  00000000  0000d216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e42  00000000  00000000  0001f5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00022430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd6  00000000  00000000  00023630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260d5  00000000  00000000  00024406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b21  00000000  00000000  0004a4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0541  00000000  00000000  0005fffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014053d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006198  00000000  00000000  00140580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00146718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ea0 	.word	0x08009ea0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08009ea0 	.word	0x08009ea0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_frsub>:
 8000bc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	e002      	b.n	8000bd4 <__addsf3>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fsub>:
 8000bd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bd4 <__addsf3>:
 8000bd4:	0042      	lsls	r2, r0, #1
 8000bd6:	bf1f      	itttt	ne
 8000bd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bdc:	ea92 0f03 	teqne	r2, r3
 8000be0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be8:	d06a      	beq.n	8000cc0 <__addsf3+0xec>
 8000bea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf2:	bfc1      	itttt	gt
 8000bf4:	18d2      	addgt	r2, r2, r3
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	4048      	eorgt	r0, r1
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	bfb8      	it	lt
 8000bfe:	425b      	neglt	r3, r3
 8000c00:	2b19      	cmp	r3, #25
 8000c02:	bf88      	it	hi
 8000c04:	4770      	bxhi	lr
 8000c06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4240      	negne	r0, r0
 8000c16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4249      	negne	r1, r1
 8000c26:	ea92 0f03 	teq	r2, r3
 8000c2a:	d03f      	beq.n	8000cac <__addsf3+0xd8>
 8000c2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c30:	fa41 fc03 	asr.w	ip, r1, r3
 8000c34:	eb10 000c 	adds.w	r0, r0, ip
 8000c38:	f1c3 0320 	rsb	r3, r3, #32
 8000c3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c44:	d502      	bpl.n	8000c4c <__addsf3+0x78>
 8000c46:	4249      	negs	r1, r1
 8000c48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c50:	d313      	bcc.n	8000c7a <__addsf3+0xa6>
 8000c52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c56:	d306      	bcc.n	8000c66 <__addsf3+0x92>
 8000c58:	0840      	lsrs	r0, r0, #1
 8000c5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5e:	f102 0201 	add.w	r2, r2, #1
 8000c62:	2afe      	cmp	r2, #254	@ 0xfe
 8000c64:	d251      	bcs.n	8000d0a <__addsf3+0x136>
 8000c66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6e:	bf08      	it	eq
 8000c70:	f020 0001 	biceq.w	r0, r0, #1
 8000c74:	ea40 0003 	orr.w	r0, r0, r3
 8000c78:	4770      	bx	lr
 8000c7a:	0049      	lsls	r1, r1, #1
 8000c7c:	eb40 0000 	adc.w	r0, r0, r0
 8000c80:	3a01      	subs	r2, #1
 8000c82:	bf28      	it	cs
 8000c84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c88:	d2ed      	bcs.n	8000c66 <__addsf3+0x92>
 8000c8a:	fab0 fc80 	clz	ip, r0
 8000c8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c92:	ebb2 020c 	subs.w	r2, r2, ip
 8000c96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9a:	bfaa      	itet	ge
 8000c9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca0:	4252      	neglt	r2, r2
 8000ca2:	4318      	orrge	r0, r3
 8000ca4:	bfbc      	itt	lt
 8000ca6:	40d0      	lsrlt	r0, r2
 8000ca8:	4318      	orrlt	r0, r3
 8000caa:	4770      	bx	lr
 8000cac:	f092 0f00 	teq	r2, #0
 8000cb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cb4:	bf06      	itte	eq
 8000cb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cba:	3201      	addeq	r2, #1
 8000cbc:	3b01      	subne	r3, #1
 8000cbe:	e7b5      	b.n	8000c2c <__addsf3+0x58>
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d021      	beq.n	8000d14 <__addsf3+0x140>
 8000cd0:	ea92 0f03 	teq	r2, r3
 8000cd4:	d004      	beq.n	8000ce0 <__addsf3+0x10c>
 8000cd6:	f092 0f00 	teq	r2, #0
 8000cda:	bf08      	it	eq
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	4770      	bx	lr
 8000ce0:	ea90 0f01 	teq	r0, r1
 8000ce4:	bf1c      	itt	ne
 8000ce6:	2000      	movne	r0, #0
 8000ce8:	4770      	bxne	lr
 8000cea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cee:	d104      	bne.n	8000cfa <__addsf3+0x126>
 8000cf0:	0040      	lsls	r0, r0, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cf8:	4770      	bx	lr
 8000cfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cfe:	bf3c      	itt	cc
 8000d00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bxcc	lr
 8000d06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d12:	4770      	bx	lr
 8000d14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d18:	bf16      	itet	ne
 8000d1a:	4608      	movne	r0, r1
 8000d1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d20:	4601      	movne	r1, r0
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	bf06      	itte	eq
 8000d26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2a:	ea90 0f01 	teqeq	r0, r1
 8000d2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_ui2f>:
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e004      	b.n	8000d44 <__aeabi_i2f+0x8>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_i2f>:
 8000d3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d40:	bf48      	it	mi
 8000d42:	4240      	negmi	r0, r0
 8000d44:	ea5f 0c00 	movs.w	ip, r0
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d50:	4601      	mov	r1, r0
 8000d52:	f04f 0000 	mov.w	r0, #0
 8000d56:	e01c      	b.n	8000d92 <__aeabi_l2f+0x2a>

08000d58 <__aeabi_ul2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e00a      	b.n	8000d7c <__aeabi_l2f+0x14>
 8000d66:	bf00      	nop

08000d68 <__aeabi_l2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d74:	d502      	bpl.n	8000d7c <__aeabi_l2f+0x14>
 8000d76:	4240      	negs	r0, r0
 8000d78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d7c:	ea5f 0c01 	movs.w	ip, r1
 8000d80:	bf02      	ittt	eq
 8000d82:	4684      	moveq	ip, r0
 8000d84:	4601      	moveq	r1, r0
 8000d86:	2000      	moveq	r0, #0
 8000d88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d8c:	bf08      	it	eq
 8000d8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d96:	fabc f28c 	clz	r2, ip
 8000d9a:	3a08      	subs	r2, #8
 8000d9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da0:	db10      	blt.n	8000dc4 <__aeabi_l2f+0x5c>
 8000da2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da6:	4463      	add	r3, ip
 8000da8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000db4:	fa20 f202 	lsr.w	r2, r0, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	f020 0001 	biceq.w	r0, r0, #1
 8000dc2:	4770      	bx	lr
 8000dc4:	f102 0220 	add.w	r2, r2, #32
 8000dc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_fmul>:
 8000de4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000de8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dec:	bf1e      	ittt	ne
 8000dee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df2:	ea92 0f0c 	teqne	r2, ip
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d06f      	beq.n	8000edc <__aeabi_fmul+0xf8>
 8000dfc:	441a      	add	r2, r3
 8000dfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000e02:	0240      	lsls	r0, r0, #9
 8000e04:	bf18      	it	ne
 8000e06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e0a:	d01e      	beq.n	8000e4a <__aeabi_fmul+0x66>
 8000e0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e18:	fba0 3101 	umull	r3, r1, r0, r1
 8000e1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e24:	bf3e      	ittt	cc
 8000e26:	0049      	lslcc	r1, r1, #1
 8000e28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e2c:	005b      	lslcc	r3, r3, #1
 8000e2e:	ea40 0001 	orr.w	r0, r0, r1
 8000e32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e36:	2afd      	cmp	r2, #253	@ 0xfd
 8000e38:	d81d      	bhi.n	8000e76 <__aeabi_fmul+0x92>
 8000e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e42:	bf08      	it	eq
 8000e44:	f020 0001 	biceq.w	r0, r0, #1
 8000e48:	4770      	bx	lr
 8000e4a:	f090 0f00 	teq	r0, #0
 8000e4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e52:	bf08      	it	eq
 8000e54:	0249      	lsleq	r1, r1, #9
 8000e56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e60:	bfc2      	ittt	gt
 8000e62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6a:	4770      	bxgt	lr
 8000e6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	3a01      	subs	r2, #1
 8000e76:	dc5d      	bgt.n	8000f34 <__aeabi_fmul+0x150>
 8000e78:	f112 0f19 	cmn.w	r2, #25
 8000e7c:	bfdc      	itt	le
 8000e7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e82:	4770      	bxle	lr
 8000e84:	f1c2 0200 	rsb	r2, r2, #0
 8000e88:	0041      	lsls	r1, r0, #1
 8000e8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8e:	f1c2 0220 	rsb	r2, r2, #32
 8000e92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e9a:	f140 0000 	adc.w	r0, r0, #0
 8000e9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ea2:	bf08      	it	eq
 8000ea4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea8:	4770      	bx	lr
 8000eaa:	f092 0f00 	teq	r2, #0
 8000eae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0040      	lsleq	r0, r0, #1
 8000eb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eba:	3a01      	subeq	r2, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fmul+0xce>
 8000ebe:	ea40 000c 	orr.w	r0, r0, ip
 8000ec2:	f093 0f00 	teq	r3, #0
 8000ec6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0049      	lsleq	r1, r1, #1
 8000ece:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ed2:	3b01      	subeq	r3, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xe6>
 8000ed6:	ea41 010c 	orr.w	r1, r1, ip
 8000eda:	e78f      	b.n	8000dfc <__aeabi_fmul+0x18>
 8000edc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee0:	ea92 0f0c 	teq	r2, ip
 8000ee4:	bf18      	it	ne
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d00a      	beq.n	8000f02 <__aeabi_fmul+0x11e>
 8000eec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ef0:	bf18      	it	ne
 8000ef2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ef6:	d1d8      	bne.n	8000eaa <__aeabi_fmul+0xc6>
 8000ef8:	ea80 0001 	eor.w	r0, r0, r1
 8000efc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f00:	4770      	bx	lr
 8000f02:	f090 0f00 	teq	r0, #0
 8000f06:	bf17      	itett	ne
 8000f08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f0c:	4608      	moveq	r0, r1
 8000f0e:	f091 0f00 	teqne	r1, #0
 8000f12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f16:	d014      	beq.n	8000f42 <__aeabi_fmul+0x15e>
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	d101      	bne.n	8000f22 <__aeabi_fmul+0x13e>
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	d10f      	bne.n	8000f42 <__aeabi_fmul+0x15e>
 8000f22:	ea93 0f0c 	teq	r3, ip
 8000f26:	d103      	bne.n	8000f30 <__aeabi_fmul+0x14c>
 8000f28:	024b      	lsls	r3, r1, #9
 8000f2a:	bf18      	it	ne
 8000f2c:	4608      	movne	r0, r1
 8000f2e:	d108      	bne.n	8000f42 <__aeabi_fmul+0x15e>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f40:	4770      	bx	lr
 8000f42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f4a:	4770      	bx	lr

08000f4c <__aeabi_fdiv>:
 8000f4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f54:	bf1e      	ittt	ne
 8000f56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f5a:	ea92 0f0c 	teqne	r2, ip
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d069      	beq.n	8001038 <__aeabi_fdiv+0xec>
 8000f64:	eba2 0203 	sub.w	r2, r2, r3
 8000f68:	ea80 0c01 	eor.w	ip, r0, r1
 8000f6c:	0249      	lsls	r1, r1, #9
 8000f6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f72:	d037      	beq.n	8000fe4 <__aeabi_fdiv+0x98>
 8000f74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f84:	428b      	cmp	r3, r1
 8000f86:	bf38      	it	cc
 8000f88:	005b      	lslcc	r3, r3, #1
 8000f8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f92:	428b      	cmp	r3, r1
 8000f94:	bf24      	itt	cs
 8000f96:	1a5b      	subcs	r3, r3, r1
 8000f98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000faa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fae:	bf24      	itt	cs
 8000fb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fbc:	bf24      	itt	cs
 8000fbe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fc2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	bf18      	it	ne
 8000fca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fce:	d1e0      	bne.n	8000f92 <__aeabi_fdiv+0x46>
 8000fd0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fd2:	f63f af50 	bhi.w	8000e76 <__aeabi_fmul+0x92>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fdc:	bf08      	it	eq
 8000fde:	f020 0001 	biceq.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fe8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fec:	327f      	adds	r2, #127	@ 0x7f
 8000fee:	bfc2      	ittt	gt
 8000ff0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ff4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff8:	4770      	bxgt	lr
 8000ffa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	3a01      	subs	r2, #1
 8001004:	e737      	b.n	8000e76 <__aeabi_fmul+0x92>
 8001006:	f092 0f00 	teq	r2, #0
 800100a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800100e:	bf02      	ittt	eq
 8001010:	0040      	lsleq	r0, r0, #1
 8001012:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001016:	3a01      	subeq	r2, #1
 8001018:	d0f9      	beq.n	800100e <__aeabi_fdiv+0xc2>
 800101a:	ea40 000c 	orr.w	r0, r0, ip
 800101e:	f093 0f00 	teq	r3, #0
 8001022:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0049      	lsleq	r1, r1, #1
 800102a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800102e:	3b01      	subeq	r3, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xda>
 8001032:	ea41 010c 	orr.w	r1, r1, ip
 8001036:	e795      	b.n	8000f64 <__aeabi_fdiv+0x18>
 8001038:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800103c:	ea92 0f0c 	teq	r2, ip
 8001040:	d108      	bne.n	8001054 <__aeabi_fdiv+0x108>
 8001042:	0242      	lsls	r2, r0, #9
 8001044:	f47f af7d 	bne.w	8000f42 <__aeabi_fmul+0x15e>
 8001048:	ea93 0f0c 	teq	r3, ip
 800104c:	f47f af70 	bne.w	8000f30 <__aeabi_fmul+0x14c>
 8001050:	4608      	mov	r0, r1
 8001052:	e776      	b.n	8000f42 <__aeabi_fmul+0x15e>
 8001054:	ea93 0f0c 	teq	r3, ip
 8001058:	d104      	bne.n	8001064 <__aeabi_fdiv+0x118>
 800105a:	024b      	lsls	r3, r1, #9
 800105c:	f43f af4c 	beq.w	8000ef8 <__aeabi_fmul+0x114>
 8001060:	4608      	mov	r0, r1
 8001062:	e76e      	b.n	8000f42 <__aeabi_fmul+0x15e>
 8001064:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001068:	bf18      	it	ne
 800106a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800106e:	d1ca      	bne.n	8001006 <__aeabi_fdiv+0xba>
 8001070:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001074:	f47f af5c 	bne.w	8000f30 <__aeabi_fmul+0x14c>
 8001078:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800107c:	f47f af3c 	bne.w	8000ef8 <__aeabi_fmul+0x114>
 8001080:	e75f      	b.n	8000f42 <__aeabi_fmul+0x15e>
 8001082:	bf00      	nop

08001084 <__gesf2>:
 8001084:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001088:	e006      	b.n	8001098 <__cmpsf2+0x4>
 800108a:	bf00      	nop

0800108c <__lesf2>:
 800108c:	f04f 0c01 	mov.w	ip, #1
 8001090:	e002      	b.n	8001098 <__cmpsf2+0x4>
 8001092:	bf00      	nop

08001094 <__cmpsf2>:
 8001094:	f04f 0c01 	mov.w	ip, #1
 8001098:	f84d cd04 	str.w	ip, [sp, #-4]!
 800109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	bf18      	it	ne
 80010aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ae:	d011      	beq.n	80010d4 <__cmpsf2+0x40>
 80010b0:	b001      	add	sp, #4
 80010b2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b6:	bf18      	it	ne
 80010b8:	ea90 0f01 	teqne	r0, r1
 80010bc:	bf58      	it	pl
 80010be:	ebb2 0003 	subspl.w	r0, r2, r3
 80010c2:	bf88      	it	hi
 80010c4:	17c8      	asrhi	r0, r1, #31
 80010c6:	bf38      	it	cc
 80010c8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010cc:	bf18      	it	ne
 80010ce:	f040 0001 	orrne.w	r0, r0, #1
 80010d2:	4770      	bx	lr
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	d102      	bne.n	80010e0 <__cmpsf2+0x4c>
 80010da:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010de:	d105      	bne.n	80010ec <__cmpsf2+0x58>
 80010e0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e4:	d1e4      	bne.n	80010b0 <__cmpsf2+0x1c>
 80010e6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ea:	d0e1      	beq.n	80010b0 <__cmpsf2+0x1c>
 80010ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <__aeabi_cfrcmple>:
 80010f4:	4684      	mov	ip, r0
 80010f6:	4608      	mov	r0, r1
 80010f8:	4661      	mov	r1, ip
 80010fa:	e7ff      	b.n	80010fc <__aeabi_cfcmpeq>

080010fc <__aeabi_cfcmpeq>:
 80010fc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fe:	f7ff ffc9 	bl	8001094 <__cmpsf2>
 8001102:	2800      	cmp	r0, #0
 8001104:	bf48      	it	mi
 8001106:	f110 0f00 	cmnmi.w	r0, #0
 800110a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800110c <__aeabi_fcmpeq>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff fff4 	bl	80010fc <__aeabi_cfcmpeq>
 8001114:	bf0c      	ite	eq
 8001116:	2001      	moveq	r0, #1
 8001118:	2000      	movne	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmplt>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffea 	bl	80010fc <__aeabi_cfcmpeq>
 8001128:	bf34      	ite	cc
 800112a:	2001      	movcc	r0, #1
 800112c:	2000      	movcs	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmple>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffe0 	bl	80010fc <__aeabi_cfcmpeq>
 800113c:	bf94      	ite	ls
 800113e:	2001      	movls	r0, #1
 8001140:	2000      	movhi	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpge>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffd2 	bl	80010f4 <__aeabi_cfrcmple>
 8001150:	bf94      	ite	ls
 8001152:	2001      	movls	r0, #1
 8001154:	2000      	movhi	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmpgt>:
 800115c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001160:	f7ff ffc8 	bl	80010f4 <__aeabi_cfrcmple>
 8001164:	bf34      	ite	cc
 8001166:	2001      	movcc	r0, #1
 8001168:	2000      	movcs	r0, #0
 800116a:	f85d fb08 	ldr.w	pc, [sp], #8
 800116e:	bf00      	nop

08001170 <__aeabi_uldivmod>:
 8001170:	b953      	cbnz	r3, 8001188 <__aeabi_uldivmod+0x18>
 8001172:	b94a      	cbnz	r2, 8001188 <__aeabi_uldivmod+0x18>
 8001174:	2900      	cmp	r1, #0
 8001176:	bf08      	it	eq
 8001178:	2800      	cmpeq	r0, #0
 800117a:	bf1c      	itt	ne
 800117c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001180:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001184:	f000 b96a 	b.w	800145c <__aeabi_idiv0>
 8001188:	f1ad 0c08 	sub.w	ip, sp, #8
 800118c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001190:	f000 f806 	bl	80011a0 <__udivmoddi4>
 8001194:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <__udivmoddi4>:
 80011a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a4:	9d08      	ldr	r5, [sp, #32]
 80011a6:	460c      	mov	r4, r1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d14e      	bne.n	800124a <__udivmoddi4+0xaa>
 80011ac:	4694      	mov	ip, r2
 80011ae:	458c      	cmp	ip, r1
 80011b0:	4686      	mov	lr, r0
 80011b2:	fab2 f282 	clz	r2, r2
 80011b6:	d962      	bls.n	800127e <__udivmoddi4+0xde>
 80011b8:	b14a      	cbz	r2, 80011ce <__udivmoddi4+0x2e>
 80011ba:	f1c2 0320 	rsb	r3, r2, #32
 80011be:	4091      	lsls	r1, r2
 80011c0:	fa20 f303 	lsr.w	r3, r0, r3
 80011c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c8:	4319      	orrs	r1, r3
 80011ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80011ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011d2:	fa1f f68c 	uxth.w	r6, ip
 80011d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80011da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011de:	fb07 1114 	mls	r1, r7, r4, r1
 80011e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011e6:	fb04 f106 	mul.w	r1, r4, r6
 80011ea:	4299      	cmp	r1, r3
 80011ec:	d90a      	bls.n	8001204 <__udivmoddi4+0x64>
 80011ee:	eb1c 0303 	adds.w	r3, ip, r3
 80011f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80011f6:	f080 8112 	bcs.w	800141e <__udivmoddi4+0x27e>
 80011fa:	4299      	cmp	r1, r3
 80011fc:	f240 810f 	bls.w	800141e <__udivmoddi4+0x27e>
 8001200:	3c02      	subs	r4, #2
 8001202:	4463      	add	r3, ip
 8001204:	1a59      	subs	r1, r3, r1
 8001206:	fa1f f38e 	uxth.w	r3, lr
 800120a:	fbb1 f0f7 	udiv	r0, r1, r7
 800120e:	fb07 1110 	mls	r1, r7, r0, r1
 8001212:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001216:	fb00 f606 	mul.w	r6, r0, r6
 800121a:	429e      	cmp	r6, r3
 800121c:	d90a      	bls.n	8001234 <__udivmoddi4+0x94>
 800121e:	eb1c 0303 	adds.w	r3, ip, r3
 8001222:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8001226:	f080 80fc 	bcs.w	8001422 <__udivmoddi4+0x282>
 800122a:	429e      	cmp	r6, r3
 800122c:	f240 80f9 	bls.w	8001422 <__udivmoddi4+0x282>
 8001230:	4463      	add	r3, ip
 8001232:	3802      	subs	r0, #2
 8001234:	1b9b      	subs	r3, r3, r6
 8001236:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800123a:	2100      	movs	r1, #0
 800123c:	b11d      	cbz	r5, 8001246 <__udivmoddi4+0xa6>
 800123e:	40d3      	lsrs	r3, r2
 8001240:	2200      	movs	r2, #0
 8001242:	e9c5 3200 	strd	r3, r2, [r5]
 8001246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124a:	428b      	cmp	r3, r1
 800124c:	d905      	bls.n	800125a <__udivmoddi4+0xba>
 800124e:	b10d      	cbz	r5, 8001254 <__udivmoddi4+0xb4>
 8001250:	e9c5 0100 	strd	r0, r1, [r5]
 8001254:	2100      	movs	r1, #0
 8001256:	4608      	mov	r0, r1
 8001258:	e7f5      	b.n	8001246 <__udivmoddi4+0xa6>
 800125a:	fab3 f183 	clz	r1, r3
 800125e:	2900      	cmp	r1, #0
 8001260:	d146      	bne.n	80012f0 <__udivmoddi4+0x150>
 8001262:	42a3      	cmp	r3, r4
 8001264:	d302      	bcc.n	800126c <__udivmoddi4+0xcc>
 8001266:	4290      	cmp	r0, r2
 8001268:	f0c0 80f0 	bcc.w	800144c <__udivmoddi4+0x2ac>
 800126c:	1a86      	subs	r6, r0, r2
 800126e:	eb64 0303 	sbc.w	r3, r4, r3
 8001272:	2001      	movs	r0, #1
 8001274:	2d00      	cmp	r5, #0
 8001276:	d0e6      	beq.n	8001246 <__udivmoddi4+0xa6>
 8001278:	e9c5 6300 	strd	r6, r3, [r5]
 800127c:	e7e3      	b.n	8001246 <__udivmoddi4+0xa6>
 800127e:	2a00      	cmp	r2, #0
 8001280:	f040 8090 	bne.w	80013a4 <__udivmoddi4+0x204>
 8001284:	eba1 040c 	sub.w	r4, r1, ip
 8001288:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800128c:	fa1f f78c 	uxth.w	r7, ip
 8001290:	2101      	movs	r1, #1
 8001292:	fbb4 f6f8 	udiv	r6, r4, r8
 8001296:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800129a:	fb08 4416 	mls	r4, r8, r6, r4
 800129e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012a2:	fb07 f006 	mul.w	r0, r7, r6
 80012a6:	4298      	cmp	r0, r3
 80012a8:	d908      	bls.n	80012bc <__udivmoddi4+0x11c>
 80012aa:	eb1c 0303 	adds.w	r3, ip, r3
 80012ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80012b2:	d202      	bcs.n	80012ba <__udivmoddi4+0x11a>
 80012b4:	4298      	cmp	r0, r3
 80012b6:	f200 80cd 	bhi.w	8001454 <__udivmoddi4+0x2b4>
 80012ba:	4626      	mov	r6, r4
 80012bc:	1a1c      	subs	r4, r3, r0
 80012be:	fa1f f38e 	uxth.w	r3, lr
 80012c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80012c6:	fb08 4410 	mls	r4, r8, r0, r4
 80012ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ce:	fb00 f707 	mul.w	r7, r0, r7
 80012d2:	429f      	cmp	r7, r3
 80012d4:	d908      	bls.n	80012e8 <__udivmoddi4+0x148>
 80012d6:	eb1c 0303 	adds.w	r3, ip, r3
 80012da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80012de:	d202      	bcs.n	80012e6 <__udivmoddi4+0x146>
 80012e0:	429f      	cmp	r7, r3
 80012e2:	f200 80b0 	bhi.w	8001446 <__udivmoddi4+0x2a6>
 80012e6:	4620      	mov	r0, r4
 80012e8:	1bdb      	subs	r3, r3, r7
 80012ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012ee:	e7a5      	b.n	800123c <__udivmoddi4+0x9c>
 80012f0:	f1c1 0620 	rsb	r6, r1, #32
 80012f4:	408b      	lsls	r3, r1
 80012f6:	fa22 f706 	lsr.w	r7, r2, r6
 80012fa:	431f      	orrs	r7, r3
 80012fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8001300:	fa04 f301 	lsl.w	r3, r4, r1
 8001304:	ea43 030c 	orr.w	r3, r3, ip
 8001308:	40f4      	lsrs	r4, r6
 800130a:	fa00 f801 	lsl.w	r8, r0, r1
 800130e:	0c38      	lsrs	r0, r7, #16
 8001310:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001314:	fbb4 fef0 	udiv	lr, r4, r0
 8001318:	fa1f fc87 	uxth.w	ip, r7
 800131c:	fb00 441e 	mls	r4, r0, lr, r4
 8001320:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001324:	fb0e f90c 	mul.w	r9, lr, ip
 8001328:	45a1      	cmp	r9, r4
 800132a:	fa02 f201 	lsl.w	r2, r2, r1
 800132e:	d90a      	bls.n	8001346 <__udivmoddi4+0x1a6>
 8001330:	193c      	adds	r4, r7, r4
 8001332:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8001336:	f080 8084 	bcs.w	8001442 <__udivmoddi4+0x2a2>
 800133a:	45a1      	cmp	r9, r4
 800133c:	f240 8081 	bls.w	8001442 <__udivmoddi4+0x2a2>
 8001340:	f1ae 0e02 	sub.w	lr, lr, #2
 8001344:	443c      	add	r4, r7
 8001346:	eba4 0409 	sub.w	r4, r4, r9
 800134a:	fa1f f983 	uxth.w	r9, r3
 800134e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001352:	fb00 4413 	mls	r4, r0, r3, r4
 8001356:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800135a:	fb03 fc0c 	mul.w	ip, r3, ip
 800135e:	45a4      	cmp	ip, r4
 8001360:	d907      	bls.n	8001372 <__udivmoddi4+0x1d2>
 8001362:	193c      	adds	r4, r7, r4
 8001364:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001368:	d267      	bcs.n	800143a <__udivmoddi4+0x29a>
 800136a:	45a4      	cmp	ip, r4
 800136c:	d965      	bls.n	800143a <__udivmoddi4+0x29a>
 800136e:	3b02      	subs	r3, #2
 8001370:	443c      	add	r4, r7
 8001372:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001376:	fba0 9302 	umull	r9, r3, r0, r2
 800137a:	eba4 040c 	sub.w	r4, r4, ip
 800137e:	429c      	cmp	r4, r3
 8001380:	46ce      	mov	lr, r9
 8001382:	469c      	mov	ip, r3
 8001384:	d351      	bcc.n	800142a <__udivmoddi4+0x28a>
 8001386:	d04e      	beq.n	8001426 <__udivmoddi4+0x286>
 8001388:	b155      	cbz	r5, 80013a0 <__udivmoddi4+0x200>
 800138a:	ebb8 030e 	subs.w	r3, r8, lr
 800138e:	eb64 040c 	sbc.w	r4, r4, ip
 8001392:	fa04 f606 	lsl.w	r6, r4, r6
 8001396:	40cb      	lsrs	r3, r1
 8001398:	431e      	orrs	r6, r3
 800139a:	40cc      	lsrs	r4, r1
 800139c:	e9c5 6400 	strd	r6, r4, [r5]
 80013a0:	2100      	movs	r1, #0
 80013a2:	e750      	b.n	8001246 <__udivmoddi4+0xa6>
 80013a4:	f1c2 0320 	rsb	r3, r2, #32
 80013a8:	fa20 f103 	lsr.w	r1, r0, r3
 80013ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b0:	fa24 f303 	lsr.w	r3, r4, r3
 80013b4:	4094      	lsls	r4, r2
 80013b6:	430c      	orrs	r4, r1
 80013b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80013c0:	fa1f f78c 	uxth.w	r7, ip
 80013c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80013c8:	fb08 3110 	mls	r1, r8, r0, r3
 80013cc:	0c23      	lsrs	r3, r4, #16
 80013ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013d2:	fb00 f107 	mul.w	r1, r0, r7
 80013d6:	4299      	cmp	r1, r3
 80013d8:	d908      	bls.n	80013ec <__udivmoddi4+0x24c>
 80013da:	eb1c 0303 	adds.w	r3, ip, r3
 80013de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80013e2:	d22c      	bcs.n	800143e <__udivmoddi4+0x29e>
 80013e4:	4299      	cmp	r1, r3
 80013e6:	d92a      	bls.n	800143e <__udivmoddi4+0x29e>
 80013e8:	3802      	subs	r0, #2
 80013ea:	4463      	add	r3, ip
 80013ec:	1a5b      	subs	r3, r3, r1
 80013ee:	b2a4      	uxth	r4, r4
 80013f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80013f4:	fb08 3311 	mls	r3, r8, r1, r3
 80013f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013fc:	fb01 f307 	mul.w	r3, r1, r7
 8001400:	42a3      	cmp	r3, r4
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x276>
 8001404:	eb1c 0404 	adds.w	r4, ip, r4
 8001408:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800140c:	d213      	bcs.n	8001436 <__udivmoddi4+0x296>
 800140e:	42a3      	cmp	r3, r4
 8001410:	d911      	bls.n	8001436 <__udivmoddi4+0x296>
 8001412:	3902      	subs	r1, #2
 8001414:	4464      	add	r4, ip
 8001416:	1ae4      	subs	r4, r4, r3
 8001418:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800141c:	e739      	b.n	8001292 <__udivmoddi4+0xf2>
 800141e:	4604      	mov	r4, r0
 8001420:	e6f0      	b.n	8001204 <__udivmoddi4+0x64>
 8001422:	4608      	mov	r0, r1
 8001424:	e706      	b.n	8001234 <__udivmoddi4+0x94>
 8001426:	45c8      	cmp	r8, r9
 8001428:	d2ae      	bcs.n	8001388 <__udivmoddi4+0x1e8>
 800142a:	ebb9 0e02 	subs.w	lr, r9, r2
 800142e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001432:	3801      	subs	r0, #1
 8001434:	e7a8      	b.n	8001388 <__udivmoddi4+0x1e8>
 8001436:	4631      	mov	r1, r6
 8001438:	e7ed      	b.n	8001416 <__udivmoddi4+0x276>
 800143a:	4603      	mov	r3, r0
 800143c:	e799      	b.n	8001372 <__udivmoddi4+0x1d2>
 800143e:	4630      	mov	r0, r6
 8001440:	e7d4      	b.n	80013ec <__udivmoddi4+0x24c>
 8001442:	46d6      	mov	lr, sl
 8001444:	e77f      	b.n	8001346 <__udivmoddi4+0x1a6>
 8001446:	4463      	add	r3, ip
 8001448:	3802      	subs	r0, #2
 800144a:	e74d      	b.n	80012e8 <__udivmoddi4+0x148>
 800144c:	4606      	mov	r6, r0
 800144e:	4623      	mov	r3, r4
 8001450:	4608      	mov	r0, r1
 8001452:	e70f      	b.n	8001274 <__udivmoddi4+0xd4>
 8001454:	3e02      	subs	r6, #2
 8001456:	4463      	add	r3, ip
 8001458:	e730      	b.n	80012bc <__udivmoddi4+0x11c>
 800145a:	bf00      	nop

0800145c <__aeabi_idiv0>:
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4906      	ldr	r1, [pc, #24]	@ (8001494 <__NVIC_EnableIRQ+0x34>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db12      	blt.n	80014d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	490a      	ldr	r1, [pc, #40]	@ (80014dc <__NVIC_DisableIRQ+0x44>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	3320      	adds	r3, #32
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014c4:	f3bf 8f4f 	dsb	sy
}
 80014c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ca:	f3bf 8f6f 	isb	sy
}
 80014ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0c      	blt.n	800150c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	@ (8001518 <__NVIC_ClearPendingIRQ+0x38>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	3360      	adds	r3, #96	@ 0x60
 8001508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <ApplicationInit>:
static uint8_t count;
static float lastTime;
static uint8_t exitIT;
static STMPE811_TouchData t;

void ApplicationInit(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	LTCD__Init();
 8001520:	f000 fc44 	bl	8001dac <LTCD__Init>
	LTCD_Layer_Init(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f000 fc01 	bl	8001d2c <LTCD_Layer_Init>
	LCD_SetFont(&Font16x24);
 800152a:	480d      	ldr	r0, [pc, #52]	@ (8001560 <ApplicationInit+0x44>)
 800152c:	f000 fd90 	bl	8002050 <LCD_SetFont>
	LCD_Clear(0, LCD_COLOR_GREY);
 8001530:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8001534:	2000      	movs	r0, #0
 8001536:	f000 fd59 	bl	8001fec <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800153a:	2000      	movs	r0, #0
 800153c:	f000 fd78 	bl	8002030 <LCD_SetTextColor>
	App_Buzzer_init();
 8001540:	f000 fa9b 	bl	8001a7a <App_Buzzer_init>
	EXTI15.Line = EXTI_LINE_15;
 8001544:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <ApplicationInit+0x48>)
 8001546:	4a08      	ldr	r2, [pc, #32]	@ (8001568 <ApplicationInit+0x4c>)
 8001548:	601a      	str	r2, [r3, #0]

	if (STMPE811_Init() != STMPE811_State_Ok) {
 800154a:	f001 fd49 	bl	8002fe0 <STMPE811_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b02      	cmp	r3, #2
 8001552:	d001      	beq.n	8001558 <ApplicationInit+0x3c>
		for (;;);
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <ApplicationInit+0x38>
	}
	MetalDetectorInit();
 8001558:	f000 fe52 	bl	8002200 <MetalDetectorInit>
//	App_startScreen();
//	App_DetectScreen();
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000004 	.word	0x20000004
 8001564:	20000208 	.word	0x20000208
 8001568:	0600000f 	.word	0x0600000f

0800156c <App_ScreenHandler>:

void App_ScreenHandler() {
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	while (1){
		exitIT = 0;
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <App_ScreenHandler+0x48>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
		if (CurrentScreen == STARTSCREEN) {
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <App_ScreenHandler+0x4c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10b      	bne.n	8001596 <App_ScreenHandler+0x2a>
			TIM_stop(TIM_BUZZER);
 800157e:	2000      	movs	r0, #0
 8001580:	f000 ff1e 	bl	80023c0 <TIM_stop>
			TIM_stop(TIM_STOPWATCH);
 8001584:	2001      	movs	r0, #1
 8001586:	f000 ff1b 	bl	80023c0 <TIM_stop>
			TIM_reset(TIM_STOPWATCH);
 800158a:	2001      	movs	r0, #1
 800158c:	f000 ff34 	bl	80023f8 <TIM_reset>
			App_startScreen();
 8001590:	f000 f814 	bl	80015bc <App_startScreen>
 8001594:	e7ec      	b.n	8001570 <App_ScreenHandler+0x4>
		}
		else if (CurrentScreen == DETECTSCREEN) {
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <App_ScreenHandler+0x4c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d102      	bne.n	80015a4 <App_ScreenHandler+0x38>
			App_DetectScreen();
 800159e:	f000 f8c7 	bl	8001730 <App_DetectScreen>
 80015a2:	e7e5      	b.n	8001570 <App_ScreenHandler+0x4>
		}
		else if (CurrentScreen == ENDSCREEN){
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <App_ScreenHandler+0x4c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d1e1      	bne.n	8001570 <App_ScreenHandler+0x4>
			App_endScreen();
 80015ac:	f000 f9c8 	bl	8001940 <App_endScreen>
		exitIT = 0;
 80015b0:	e7de      	b.n	8001570 <App_ScreenHandler+0x4>
 80015b2:	bf00      	nop
 80015b4:	20000218 	.word	0x20000218
 80015b8:	20000212 	.word	0x20000212

080015bc <App_startScreen>:
		}
	}
}

void App_startScreen() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_GREY);
 80015c2:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 fd10 	bl	8001fec <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 fd2f 	bl	8002030 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 80015d2:	4820      	ldr	r0, [pc, #128]	@ (8001654 <App_startScreen+0x98>)
 80015d4:	f000 fd3c 	bl	8002050 <LCD_SetFont>
	LCD_DisplayStr(40, 50, "Press to start", 14);
 80015d8:	230e      	movs	r3, #14
 80015da:	4a1f      	ldr	r2, [pc, #124]	@ (8001658 <App_startScreen+0x9c>)
 80015dc:	2132      	movs	r1, #50	@ 0x32
 80015de:	2028      	movs	r0, #40	@ 0x28
 80015e0:	f000 fdd8 	bl	8002194 <LCD_DisplayStr>
	LCD_DisplayStr(10, 300, "Nikolai Woeger", 14);
 80015e4:	230e      	movs	r3, #14
 80015e6:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <App_startScreen+0xa0>)
 80015e8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80015ec:	200a      	movs	r0, #10
 80015ee:	f000 fdd1 	bl	8002194 <LCD_DisplayStr>
	LCD_DrawBox_Unfilled(40, 130, 160, 80, LCD_COLOR_BLACK);
 80015f2:	2300      	movs	r3, #0
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2350      	movs	r3, #80	@ 0x50
 80015f8:	22a0      	movs	r2, #160	@ 0xa0
 80015fa:	2182      	movs	r1, #130	@ 0x82
 80015fc:	2028      	movs	r0, #40	@ 0x28
 80015fe:	f000 fc9d 	bl	8001f3c <LCD_DrawBox_Unfilled>
	LCD_DrawBox_Filled(41, 131, 159, 79, LCD_COLOR_WHITE);
 8001602:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	234f      	movs	r3, #79	@ 0x4f
 800160a:	229f      	movs	r2, #159	@ 0x9f
 800160c:	2183      	movs	r1, #131	@ 0x83
 800160e:	2029      	movs	r0, #41	@ 0x29
 8001610:	f000 fcc5 	bl	8001f9e <LCD_DrawBox_Filled>
	LCD_SetFont(&Font16x24);
 8001614:	4812      	ldr	r0, [pc, #72]	@ (8001660 <App_startScreen+0xa4>)
 8001616:	f000 fd1b 	bl	8002050 <LCD_SetFont>
	LCD_DisplayStr(85, 160, "START", 5);
 800161a:	2305      	movs	r3, #5
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <App_startScreen+0xa8>)
 800161e:	21a0      	movs	r1, #160	@ 0xa0
 8001620:	2055      	movs	r0, #85	@ 0x55
 8001622:	f000 fdb7 	bl	8002194 <LCD_DisplayStr>
	LCD_DisplayStr(15, 10, "Metal Detector", 14);
 8001626:	230e      	movs	r3, #14
 8001628:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <App_startScreen+0xac>)
 800162a:	210a      	movs	r1, #10
 800162c:	200f      	movs	r0, #15
 800162e:	f000 fdb1 	bl	8002194 <LCD_DisplayStr>
	while (!exitIT);
 8001632:	bf00      	nop
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <App_startScreen+0xb0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0fb      	beq.n	8001634 <App_startScreen+0x78>
	HAL_Delay(100);
 800163c:	2064      	movs	r0, #100	@ 0x64
 800163e:	f002 f901 	bl	8003844 <HAL_Delay>
	I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001642:	22ff      	movs	r2, #255	@ 0xff
 8001644:	210b      	movs	r1, #11
 8001646:	2082      	movs	r0, #130	@ 0x82
 8001648:	f001 ff06 	bl	8003458 <I2C3_Write>
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000000c 	.word	0x2000000c
 8001658:	08009eb8 	.word	0x08009eb8
 800165c:	08009ec8 	.word	0x08009ec8
 8001660:	20000004 	.word	0x20000004
 8001664:	08009ed8 	.word	0x08009ed8
 8001668:	08009ee0 	.word	0x08009ee0
 800166c:	20000218 	.word	0x20000218

08001670 <drawBackground>:
void drawBackground() {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af02      	add	r7, sp, #8
	if (detected == 1) {
 8001676:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <drawBackground+0xa4>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d112      	bne.n	80016a4 <drawBackground+0x34>
		LCD_SetTextColor(LCD_COLOR_WHITE);
 800167e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001682:	f000 fcd5 	bl	8002030 <LCD_SetTextColor>
		LCD_Clear(0, LCD_COLOR_RED);
 8001686:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800168a:	2000      	movs	r0, #0
 800168c:	f000 fcae 	bl	8001fec <LCD_Clear>
		LCD_SetFont(&Font12x12);
 8001690:	4821      	ldr	r0, [pc, #132]	@ (8001718 <drawBackground+0xa8>)
 8001692:	f000 fcdd 	bl	8002050 <LCD_SetFont>
		LCD_DisplayStr(40, 60, "Metal Detected!", 15);
 8001696:	230f      	movs	r3, #15
 8001698:	4a20      	ldr	r2, [pc, #128]	@ (800171c <drawBackground+0xac>)
 800169a:	213c      	movs	r1, #60	@ 0x3c
 800169c:	2028      	movs	r0, #40	@ 0x28
 800169e:	f000 fd79 	bl	8002194 <LCD_DisplayStr>
 80016a2:	e010      	b.n	80016c6 <drawBackground+0x56>
	}
	else {
		LCD_SetTextColor(LCD_COLOR_BLACK);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 fcc3 	bl	8002030 <LCD_SetTextColor>

		LCD_Clear(0, LCD_COLOR_GREEN);
 80016aa:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 fc9c 	bl	8001fec <LCD_Clear>
		LCD_SetFont(&Font12x12);
 80016b4:	4818      	ldr	r0, [pc, #96]	@ (8001718 <drawBackground+0xa8>)
 80016b6:	f000 fccb 	bl	8002050 <LCD_SetFont>
		LCD_DisplayStr(25, 60, "No Metal Detected", 17);
 80016ba:	2311      	movs	r3, #17
 80016bc:	4a18      	ldr	r2, [pc, #96]	@ (8001720 <drawBackground+0xb0>)
 80016be:	213c      	movs	r1, #60	@ 0x3c
 80016c0:	2019      	movs	r0, #25
 80016c2:	f000 fd67 	bl	8002194 <LCD_DisplayStr>
	}
	LCD_DrawBox_Unfilled(40, 130, 160, 80, LCD_COLOR_BLACK);
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2350      	movs	r3, #80	@ 0x50
 80016cc:	22a0      	movs	r2, #160	@ 0xa0
 80016ce:	2182      	movs	r1, #130	@ 0x82
 80016d0:	2028      	movs	r0, #40	@ 0x28
 80016d2:	f000 fc33 	bl	8001f3c <LCD_DrawBox_Unfilled>
	LCD_DrawBox_Filled(41, 131, 159, 79, LCD_COLOR_WHITE);
 80016d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	234f      	movs	r3, #79	@ 0x4f
 80016de:	229f      	movs	r2, #159	@ 0x9f
 80016e0:	2183      	movs	r1, #131	@ 0x83
 80016e2:	2029      	movs	r0, #41	@ 0x29
 80016e4:	f000 fc5b 	bl	8001f9e <LCD_DrawBox_Filled>
	LCD_SetFont(&Font16x24);
 80016e8:	480e      	ldr	r0, [pc, #56]	@ (8001724 <drawBackground+0xb4>)
 80016ea:	f000 fcb1 	bl	8002050 <LCD_SetFont>
	LCD_DisplayStr(40, 10, "Detecting...", 12);
 80016ee:	230c      	movs	r3, #12
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <drawBackground+0xb8>)
 80016f2:	210a      	movs	r1, #10
 80016f4:	2028      	movs	r0, #40	@ 0x28
 80016f6:	f000 fd4d 	bl	8002194 <LCD_DisplayStr>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 fc98 	bl	8002030 <LCD_SetTextColor>
	LCD_DisplayStr(90, 160, "STOP", 4);
 8001700:	2304      	movs	r3, #4
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <drawBackground+0xbc>)
 8001704:	21a0      	movs	r1, #160	@ 0xa0
 8001706:	205a      	movs	r0, #90	@ 0x5a
 8001708:	f000 fd44 	bl	8002194 <LCD_DisplayStr>
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000210 	.word	0x20000210
 8001718:	2000000c 	.word	0x2000000c
 800171c:	08009ef0 	.word	0x08009ef0
 8001720:	08009f00 	.word	0x08009f00
 8001724:	20000004 	.word	0x20000004
 8001728:	08009f14 	.word	0x08009f14
 800172c:	08009f24 	.word	0x08009f24

08001730 <App_DetectScreen>:
void App_DetectScreen() {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af02      	add	r7, sp, #8
	if (detected == 1) {
 8001736:	4b4f      	ldr	r3, [pc, #316]	@ (8001874 <App_DetectScreen+0x144>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d112      	bne.n	8001764 <App_DetectScreen+0x34>
		LCD_SetTextColor(LCD_COLOR_WHITE);
 800173e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001742:	f000 fc75 	bl	8002030 <LCD_SetTextColor>
		LCD_Clear(0, LCD_COLOR_RED);
 8001746:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800174a:	2000      	movs	r0, #0
 800174c:	f000 fc4e 	bl	8001fec <LCD_Clear>
		LCD_SetFont(&Font12x12);
 8001750:	4849      	ldr	r0, [pc, #292]	@ (8001878 <App_DetectScreen+0x148>)
 8001752:	f000 fc7d 	bl	8002050 <LCD_SetFont>
		LCD_DisplayStr(40, 60, "Metal Detected!", 15);
 8001756:	230f      	movs	r3, #15
 8001758:	4a48      	ldr	r2, [pc, #288]	@ (800187c <App_DetectScreen+0x14c>)
 800175a:	213c      	movs	r1, #60	@ 0x3c
 800175c:	2028      	movs	r0, #40	@ 0x28
 800175e:	f000 fd19 	bl	8002194 <LCD_DisplayStr>
 8001762:	e010      	b.n	8001786 <App_DetectScreen+0x56>
	}
	else {
		LCD_SetTextColor(LCD_COLOR_BLACK);
 8001764:	2000      	movs	r0, #0
 8001766:	f000 fc63 	bl	8002030 <LCD_SetTextColor>

		LCD_Clear(0, LCD_COLOR_GREEN);
 800176a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800176e:	2000      	movs	r0, #0
 8001770:	f000 fc3c 	bl	8001fec <LCD_Clear>
		LCD_SetFont(&Font12x12);
 8001774:	4840      	ldr	r0, [pc, #256]	@ (8001878 <App_DetectScreen+0x148>)
 8001776:	f000 fc6b 	bl	8002050 <LCD_SetFont>
		LCD_DisplayStr(25, 60, "No Metal Detected", 17);
 800177a:	2311      	movs	r3, #17
 800177c:	4a40      	ldr	r2, [pc, #256]	@ (8001880 <App_DetectScreen+0x150>)
 800177e:	213c      	movs	r1, #60	@ 0x3c
 8001780:	2019      	movs	r0, #25
 8001782:	f000 fd07 	bl	8002194 <LCD_DisplayStr>
	}
	LCD_DrawBox_Unfilled(40, 130, 160, 80, LCD_COLOR_BLACK);
 8001786:	2300      	movs	r3, #0
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2350      	movs	r3, #80	@ 0x50
 800178c:	22a0      	movs	r2, #160	@ 0xa0
 800178e:	2182      	movs	r1, #130	@ 0x82
 8001790:	2028      	movs	r0, #40	@ 0x28
 8001792:	f000 fbd3 	bl	8001f3c <LCD_DrawBox_Unfilled>
	LCD_DrawBox_Filled(41, 131, 159, 79, LCD_COLOR_WHITE);
 8001796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	234f      	movs	r3, #79	@ 0x4f
 800179e:	229f      	movs	r2, #159	@ 0x9f
 80017a0:	2183      	movs	r1, #131	@ 0x83
 80017a2:	2029      	movs	r0, #41	@ 0x29
 80017a4:	f000 fbfb 	bl	8001f9e <LCD_DrawBox_Filled>
	LCD_SetFont(&Font16x24);
 80017a8:	4836      	ldr	r0, [pc, #216]	@ (8001884 <App_DetectScreen+0x154>)
 80017aa:	f000 fc51 	bl	8002050 <LCD_SetFont>
	LCD_DisplayStr(40, 10, "Detecting...", 12);
 80017ae:	230c      	movs	r3, #12
 80017b0:	4a35      	ldr	r2, [pc, #212]	@ (8001888 <App_DetectScreen+0x158>)
 80017b2:	210a      	movs	r1, #10
 80017b4:	2028      	movs	r0, #40	@ 0x28
 80017b6:	f000 fced 	bl	8002194 <LCD_DisplayStr>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 fc38 	bl	8002030 <LCD_SetTextColor>
	LCD_DisplayStr(90, 160, "STOP", 4);
 80017c0:	2304      	movs	r3, #4
 80017c2:	4a32      	ldr	r2, [pc, #200]	@ (800188c <App_DetectScreen+0x15c>)
 80017c4:	21a0      	movs	r1, #160	@ 0xa0
 80017c6:	205a      	movs	r0, #90	@ 0x5a
 80017c8:	f000 fce4 	bl	8002194 <LCD_DisplayStr>
	TIM_reset(TIM_STOPWATCH);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f000 fe13 	bl	80023f8 <TIM_reset>
	HAL_Delay(100);
 80017d2:	2064      	movs	r0, #100	@ 0x64
 80017d4:	f002 f836 	bl	8003844 <HAL_Delay>
	TIM_start(TIM_STOPWATCH);
 80017d8:	2001      	movs	r0, #1
 80017da:	f000 fdd5 	bl	8002388 <TIM_start>
	while (1) {
		if (TIM_stopwatch_getTime() >= 45 || exitIT) {
 80017de:	f000 fdb9 	bl	8002354 <TIM_stopwatch_getTime>
 80017e2:	4603      	mov	r3, r0
 80017e4:	492a      	ldr	r1, [pc, #168]	@ (8001890 <App_DetectScreen+0x160>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fcae 	bl	8001148 <__aeabi_fcmpge>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d128      	bne.n	8001844 <App_DetectScreen+0x114>
 80017f2:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <App_DetectScreen+0x164>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d124      	bne.n	8001844 <App_DetectScreen+0x114>
			break;
		}
		if (pollDetector() == detected) {
 80017fa:	f000 fd25 	bl	8002248 <pollDetector>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <App_DetectScreen+0x144>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d116      	bne.n	8001838 <App_DetectScreen+0x108>
			detected ^= 1;
 800180a:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <App_DetectScreen+0x144>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	f083 0301 	eor.w	r3, r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <App_DetectScreen+0x144>)
 8001816:	701a      	strb	r2, [r3, #0]
			drawBackground();
 8001818:	f7ff ff2a 	bl	8001670 <drawBackground>
			if (detected) {
 800181c:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <App_DetectScreen+0x144>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <App_DetectScreen+0x102>
				TIM_start(TIM_BUZZER);
 8001824:	2000      	movs	r0, #0
 8001826:	f000 fdaf 	bl	8002388 <TIM_start>
				detected_in_session = 1;
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <App_DetectScreen+0x168>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e002      	b.n	8001838 <App_DetectScreen+0x108>
			}
			else {
				TIM_stop(TIM_BUZZER);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 fdc4 	bl	80023c0 <TIM_stop>
			}
		}
		drawTime();
 8001838:	f000 f832 	bl	80018a0 <drawTime>
		HAL_Delay(50);
 800183c:	2032      	movs	r0, #50	@ 0x32
 800183e:	f002 f801 	bl	8003844 <HAL_Delay>
		if (TIM_stopwatch_getTime() >= 45 || exitIT) {
 8001842:	e7cc      	b.n	80017de <App_DetectScreen+0xae>
	}
	TIM_stop(TIM_STOPWATCH);
 8001844:	2001      	movs	r0, #1
 8001846:	f000 fdbb 	bl	80023c0 <TIM_stop>
	if (!exitIT)
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <App_DetectScreen+0x164>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <App_DetectScreen+0x12e>
		CurrentScreen++;
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <App_DetectScreen+0x16c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <App_DetectScreen+0x16c>)
 800185c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800185e:	2064      	movs	r0, #100	@ 0x64
 8001860:	f001 fff0 	bl	8003844 <HAL_Delay>
	I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001864:	22ff      	movs	r2, #255	@ 0xff
 8001866:	210b      	movs	r1, #11
 8001868:	2082      	movs	r0, #130	@ 0x82
 800186a:	f001 fdf5 	bl	8003458 <I2C3_Write>
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000210 	.word	0x20000210
 8001878:	2000000c 	.word	0x2000000c
 800187c:	08009ef0 	.word	0x08009ef0
 8001880:	08009f00 	.word	0x08009f00
 8001884:	20000004 	.word	0x20000004
 8001888:	08009f14 	.word	0x08009f14
 800188c:	08009f24 	.word	0x08009f24
 8001890:	42340000 	.word	0x42340000
 8001894:	20000218 	.word	0x20000218
 8001898:	20000211 	.word	0x20000211
 800189c:	20000212 	.word	0x20000212

080018a0 <drawTime>:
void drawTime() {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af02      	add	r7, sp, #8
	LCD_DrawBox_Filled(40, 220, 170, 40, ((CurrentScreen == ENDSCREEN) ? LCD_COLOR_GREY : (detected ? LCD_COLOR_RED : LCD_COLOR_GREEN)));
 80018a6:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <drawTime+0x90>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d009      	beq.n	80018c2 <drawTime+0x22>
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <drawTime+0x94>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <drawTime+0x1c>
 80018b6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018ba:	e004      	b.n	80018c6 <drawTime+0x26>
 80018bc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80018c0:	e001      	b.n	80018c6 <drawTime+0x26>
 80018c2:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2328      	movs	r3, #40	@ 0x28
 80018ca:	22aa      	movs	r2, #170	@ 0xaa
 80018cc:	21dc      	movs	r1, #220	@ 0xdc
 80018ce:	2028      	movs	r0, #40	@ 0x28
 80018d0:	f000 fb65 	bl	8001f9e <LCD_DrawBox_Filled>
	LCD_SetTextColor((CurrentScreen == ENDSCREEN) ? LCD_COLOR_BLACK : (detected ? LCD_COLOR_WHITE : LCD_COLOR_BLACK));
 80018d4:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <drawTime+0x90>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d008      	beq.n	80018ee <drawTime+0x4e>
 80018dc:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <drawTime+0x94>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <drawTime+0x4a>
 80018e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018e8:	e002      	b.n	80018f0 <drawTime+0x50>
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <drawTime+0x50>
 80018ee:	2300      	movs	r3, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fb9d 	bl	8002030 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 80018f6:	4810      	ldr	r0, [pc, #64]	@ (8001938 <drawTime+0x98>)
 80018f8:	f000 fbaa 	bl	8002050 <LCD_SetFont>
	float value = TIM_stopwatch_getTime();
 80018fc:	f000 fd2a 	bl	8002354 <TIM_stopwatch_getTime>
 8001900:	6078      	str	r0, [r7, #4]
	char time_s [4];
	gcvt(value, 4, time_s);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fe30 	bl	8000568 <__aeabi_f2d>
 8001908:	463b      	mov	r3, r7
 800190a:	2204      	movs	r2, #4
 800190c:	f006 fa12 	bl	8007d34 <gcvt>
	LCD_DisplayStr(60, 220, time_s, 5);
 8001910:	463a      	mov	r2, r7
 8001912:	2305      	movs	r3, #5
 8001914:	21dc      	movs	r1, #220	@ 0xdc
 8001916:	203c      	movs	r0, #60	@ 0x3c
 8001918:	f000 fc3c 	bl	8002194 <LCD_DisplayStr>
	LCD_DisplayStr(140, 220, "sec", 3);
 800191c:	2303      	movs	r3, #3
 800191e:	4a07      	ldr	r2, [pc, #28]	@ (800193c <drawTime+0x9c>)
 8001920:	21dc      	movs	r1, #220	@ 0xdc
 8001922:	208c      	movs	r0, #140	@ 0x8c
 8001924:	f000 fc36 	bl	8002194 <LCD_DisplayStr>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000212 	.word	0x20000212
 8001934:	20000210 	.word	0x20000210
 8001938:	2000000c 	.word	0x2000000c
 800193c:	08009f2c 	.word	0x08009f2c

08001940 <App_endScreen>:
void App_endScreen() {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_GREY);
 8001946:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 800194a:	2000      	movs	r0, #0
 800194c:	f000 fb4e 	bl	8001fec <LCD_Clear>
	drawTime();
 8001950:	f7ff ffa6 	bl	80018a0 <drawTime>

	if (detected_in_session) {
 8001954:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <App_endScreen+0x104>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d024      	beq.n	80019a6 <App_endScreen+0x66>
		LCD_DrawBox_Unfilled(15, 70, 210, 80, LCD_COLOR_BLACK);
 800195c:	2300      	movs	r3, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2350      	movs	r3, #80	@ 0x50
 8001962:	22d2      	movs	r2, #210	@ 0xd2
 8001964:	2146      	movs	r1, #70	@ 0x46
 8001966:	200f      	movs	r0, #15
 8001968:	f000 fae8 	bl	8001f3c <LCD_DrawBox_Unfilled>
		LCD_DrawBox_Filled(16, 71, 209, 79, LCD_COLOR_RED);
 800196c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	234f      	movs	r3, #79	@ 0x4f
 8001974:	22d1      	movs	r2, #209	@ 0xd1
 8001976:	2147      	movs	r1, #71	@ 0x47
 8001978:	2010      	movs	r0, #16
 800197a:	f000 fb10 	bl	8001f9e <LCD_DrawBox_Filled>
		LCD_SetFont(&Font12x12);
 800197e:	4832      	ldr	r0, [pc, #200]	@ (8001a48 <App_endScreen+0x108>)
 8001980:	f000 fb66 	bl	8002050 <LCD_SetFont>
		LCD_SetTextColor(LCD_COLOR_WHITE);
 8001984:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001988:	f000 fb52 	bl	8002030 <LCD_SetTextColor>
		LCD_DisplayStr(48, 90, "Metal has been", 14);
 800198c:	230e      	movs	r3, #14
 800198e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a4c <App_endScreen+0x10c>)
 8001990:	215a      	movs	r1, #90	@ 0x5a
 8001992:	2030      	movs	r0, #48	@ 0x30
 8001994:	f000 fbfe 	bl	8002194 <LCD_DisplayStr>
		LCD_DisplayStr(75, 115, "Detected", 8);
 8001998:	2308      	movs	r3, #8
 800199a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a50 <App_endScreen+0x110>)
 800199c:	2173      	movs	r1, #115	@ 0x73
 800199e:	204b      	movs	r0, #75	@ 0x4b
 80019a0:	f000 fbf8 	bl	8002194 <LCD_DisplayStr>
 80019a4:	e022      	b.n	80019ec <App_endScreen+0xac>
	}
	else {
		LCD_DrawBox_Unfilled(15, 70, 210, 80, LCD_COLOR_BLACK);
 80019a6:	2300      	movs	r3, #0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2350      	movs	r3, #80	@ 0x50
 80019ac:	22d2      	movs	r2, #210	@ 0xd2
 80019ae:	2146      	movs	r1, #70	@ 0x46
 80019b0:	200f      	movs	r0, #15
 80019b2:	f000 fac3 	bl	8001f3c <LCD_DrawBox_Unfilled>
		LCD_DrawBox_Filled(16, 71, 209, 79, LCD_COLOR_GREEN);
 80019b6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	234f      	movs	r3, #79	@ 0x4f
 80019be:	22d1      	movs	r2, #209	@ 0xd1
 80019c0:	2147      	movs	r1, #71	@ 0x47
 80019c2:	2010      	movs	r0, #16
 80019c4:	f000 faeb 	bl	8001f9e <LCD_DrawBox_Filled>
		LCD_SetFont(&Font12x12);
 80019c8:	481f      	ldr	r0, [pc, #124]	@ (8001a48 <App_endScreen+0x108>)
 80019ca:	f000 fb41 	bl	8002050 <LCD_SetFont>
		LCD_SetTextColor(LCD_COLOR_BLACK);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 fb2e 	bl	8002030 <LCD_SetTextColor>
		LCD_DisplayStr(55, 90, "No Metal was", 12);
 80019d4:	230c      	movs	r3, #12
 80019d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a54 <App_endScreen+0x114>)
 80019d8:	215a      	movs	r1, #90	@ 0x5a
 80019da:	2037      	movs	r0, #55	@ 0x37
 80019dc:	f000 fbda 	bl	8002194 <LCD_DisplayStr>
		LCD_DisplayStr(75, 115, "Detected", 8);
 80019e0:	2308      	movs	r3, #8
 80019e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <App_endScreen+0x110>)
 80019e4:	2173      	movs	r1, #115	@ 0x73
 80019e6:	204b      	movs	r0, #75	@ 0x4b
 80019e8:	f000 fbd4 	bl	8002194 <LCD_DisplayStr>
	}
	LCD_SetFont(&Font16x24);
 80019ec:	481a      	ldr	r0, [pc, #104]	@ (8001a58 <App_endScreen+0x118>)
 80019ee:	f000 fb2f 	bl	8002050 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 fb1c 	bl	8002030 <LCD_SetTextColor>
	LCD_DisplayStr(60, 10, "Finished", 12);
 80019f8:	230c      	movs	r3, #12
 80019fa:	4a18      	ldr	r2, [pc, #96]	@ (8001a5c <App_endScreen+0x11c>)
 80019fc:	210a      	movs	r1, #10
 80019fe:	203c      	movs	r0, #60	@ 0x3c
 8001a00:	f000 fbc8 	bl	8002194 <LCD_DisplayStr>
	LCD_SetFont(&Font12x12);
 8001a04:	4810      	ldr	r0, [pc, #64]	@ (8001a48 <App_endScreen+0x108>)
 8001a06:	f000 fb23 	bl	8002050 <LCD_SetFont>
	LCD_DisplayStr(40, 190, "Session Length:", 15);
 8001a0a:	230f      	movs	r3, #15
 8001a0c:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <App_endScreen+0x120>)
 8001a0e:	21be      	movs	r1, #190	@ 0xbe
 8001a10:	2028      	movs	r0, #40	@ 0x28
 8001a12:	f000 fbbf 	bl	8002194 <LCD_DisplayStr>
	LCD_DisplayStr(40, 290, "Tap to Restart", 14);
 8001a16:	230e      	movs	r3, #14
 8001a18:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <App_endScreen+0x124>)
 8001a1a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001a1e:	2028      	movs	r0, #40	@ 0x28
 8001a20:	f000 fbb8 	bl	8002194 <LCD_DisplayStr>
	while (!exitIT);
 8001a24:	bf00      	nop
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <App_endScreen+0x128>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0fb      	beq.n	8001a26 <App_endScreen+0xe6>
	HAL_Delay(100);
 8001a2e:	2064      	movs	r0, #100	@ 0x64
 8001a30:	f001 ff08 	bl	8003844 <HAL_Delay>
	I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001a34:	22ff      	movs	r2, #255	@ 0xff
 8001a36:	210b      	movs	r1, #11
 8001a38:	2082      	movs	r0, #130	@ 0x82
 8001a3a:	f001 fd0d 	bl	8003458 <I2C3_Write>
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000211 	.word	0x20000211
 8001a48:	2000000c 	.word	0x2000000c
 8001a4c:	08009f30 	.word	0x08009f30
 8001a50:	08009f40 	.word	0x08009f40
 8001a54:	08009f4c 	.word	0x08009f4c
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	08009f5c 	.word	0x08009f5c
 8001a60:	08009f68 	.word	0x08009f68
 8001a64:	08009f78 	.word	0x08009f78
 8001a68:	20000218 	.word	0x20000218

08001a6c <App_Stopwatch_init>:

void App_Stopwatch_init() {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	TIM_init(TIM_STOPWATCH);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f000 fbf5 	bl	8002260 <TIM_init>
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <App_Buzzer_init>:
	float value = TIM_stopwatch_getTime();
	char time_s [6];
	gcvt(value, 6, time_s);
	printf("%s\n", time_s);
}
void App_Buzzer_init() {
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
	TIM_init(TIM_BUZZER);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 fbee 	bl	8002260 <TIM_init>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <App_Buzzer_beep>:
	TIM_start(TIM_BUZZER);
	HAL_Delay(1000);
	TIM_stop(TIM_BUZZER);
	printf("%d\n", count/2);
}
void App_Buzzer_beep() {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	TIM_start(TIM_BUZZER);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f000 fc7b 	bl	8002388 <TIM_start>
	HAL_Delay(100);
 8001a92:	2064      	movs	r0, #100	@ 0x64
 8001a94:	f001 fed6 	bl	8003844 <HAL_Delay>
	TIM_stop(TIM_BUZZER);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f000 fc91 	bl	80023c0 <TIM_stop>
	HAL_Delay(100);
 8001a9e:	2064      	movs	r0, #100	@ 0x64
 8001aa0:	f001 fed0 	bl	8003844 <HAL_Delay>
	TIM_start(TIM_BUZZER);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f000 fc6f 	bl	8002388 <TIM_start>
	HAL_Delay(100);
 8001aaa:	2064      	movs	r0, #100	@ 0x64
 8001aac:	f001 feca 	bl	8003844 <HAL_Delay>
	TIM_stop(TIM_BUZZER);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f000 fc85 	bl	80023c0 <TIM_stop>
	HAL_Delay(100);
 8001ab6:	2064      	movs	r0, #100	@ 0x64
 8001ab8:	f001 fec4 	bl	8003844 <HAL_Delay>
	TIM_start(TIM_BUZZER);
 8001abc:	2000      	movs	r0, #0
 8001abe:	f000 fc63 	bl	8002388 <TIM_start>
	HAL_Delay(100);
 8001ac2:	2064      	movs	r0, #100	@ 0x64
 8001ac4:	f001 febe 	bl	8003844 <HAL_Delay>
	TIM_stop(TIM_BUZZER);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f000 fc79 	bl	80023c0 <TIM_stop>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler() {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001ad8:	2028      	movs	r0, #40	@ 0x28
 8001ada:	f7ff fcdd 	bl	8001498 <__NVIC_DisableIRQ>
	exitIT = 1;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <EXTI15_10_IRQHandler+0x7c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
	CurrentScreen++;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <EXTI15_10_IRQHandler+0x80>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <EXTI15_10_IRQHandler+0x80>)
 8001aee:	701a      	strb	r2, [r3, #0]
	CurrentScreen%=3;
 8001af0:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <EXTI15_10_IRQHandler+0x80>)
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <EXTI15_10_IRQHandler+0x84>)
 8001af6:	fba3 1302 	umull	r1, r3, r3, r2
 8001afa:	0859      	lsrs	r1, r3, #1
 8001afc:	460b      	mov	r3, r1
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	440b      	add	r3, r1
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <EXTI15_10_IRQHandler+0x80>)
 8001b08:	701a      	strb	r2, [r3, #0]
	if (CurrentScreen == ENDSCREEN) {
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <EXTI15_10_IRQHandler+0x80>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d104      	bne.n	8001b1c <EXTI15_10_IRQHandler+0x48>
		lastTime = TIM_stopwatch_getTime();
 8001b12:	f000 fc1f 	bl	8002354 <TIM_stopwatch_getTime>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a10      	ldr	r2, [pc, #64]	@ (8001b5c <EXTI15_10_IRQHandler+0x88>)
 8001b1a:	6013      	str	r3, [r2, #0]
	}
	STMPE811_DetermineTouchPosition(&t);
 8001b1c:	4810      	ldr	r0, [pc, #64]	@ (8001b60 <EXTI15_10_IRQHandler+0x8c>)
 8001b1e:	f001 fb37 	bl	8003190 <STMPE811_DetermineTouchPosition>
	if (!isSTMPE811_Ready()) {
 8001b22:	f001 fbad 	bl	8003280 <isSTMPE811_Ready>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <EXTI15_10_IRQHandler+0x62>
		for(;;);
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <EXTI15_10_IRQHandler+0x5e>
	}
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8001b36:	2028      	movs	r0, #40	@ 0x28
 8001b38:	f7ff fcd2 	bl	80014e0 <__NVIC_ClearPendingIRQ>
	HAL_EXTI_ClearPending(&EXTI15, 1);
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4809      	ldr	r0, [pc, #36]	@ (8001b64 <EXTI15_10_IRQHandler+0x90>)
 8001b40:	f002 f810 	bl	8003b64 <HAL_EXTI_ClearPending>

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b44:	2028      	movs	r0, #40	@ 0x28
 8001b46:	f7ff fc8b 	bl	8001460 <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000218 	.word	0x20000218
 8001b54:	20000212 	.word	0x20000212
 8001b58:	aaaaaaab 	.word	0xaaaaaaab
 8001b5c:	20000214 	.word	0x20000214
 8001b60:	2000021c 	.word	0x2000021c
 8001b64:	20000208 	.word	0x20000208

08001b68 <TIM2_IRQHandler>:

void TIM2_IRQHandler() {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8001b6c:	201c      	movs	r0, #28
 8001b6e:	f001 ffd0 	bl	8003b12 <HAL_NVIC_DisableIRQ>
	TIM_buzzer_clearUIF();
 8001b72:	f000 fc5f 	bl	8002434 <TIM_buzzer_clearUIF>
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 8001b76:	201c      	movs	r0, #28
 8001b78:	f001 ffe5 	bl	8003b46 <HAL_NVIC_ClearPendingIRQ>
	count++;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <TIM2_IRQHandler+0x30>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <TIM2_IRQHandler+0x30>)
 8001b86:	701a      	strb	r2, [r3, #0]
	TIM_buzzer_toggle();
 8001b88:	f000 fc62 	bl	8002450 <TIM_buzzer_toggle>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b8c:	201c      	movs	r0, #28
 8001b8e:	f001 ffb2 	bl	8003af6 <HAL_NVIC_EnableIRQ>

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000213 	.word	0x20000213

08001b9c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	@ 0x30
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a59      	ldr	r2, [pc, #356]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001bac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b57      	ldr	r3, [pc, #348]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	4b53      	ldr	r3, [pc, #332]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a52      	ldr	r2, [pc, #328]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b50      	ldr	r3, [pc, #320]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b4c      	ldr	r3, [pc, #304]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a4b      	ldr	r2, [pc, #300]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b49      	ldr	r3, [pc, #292]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b45      	ldr	r3, [pc, #276]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a44      	ldr	r2, [pc, #272]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b42      	ldr	r3, [pc, #264]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b3e      	ldr	r3, [pc, #248]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b37      	ldr	r3, [pc, #220]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a36      	ldr	r2, [pc, #216]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b30      	ldr	r3, [pc, #192]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a2f      	ldr	r2, [pc, #188]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <LCD_GPIO_Init+0x174>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001c66:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001c6a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001c74:	2302      	movs	r3, #2
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001c78:	230e      	movs	r3, #14
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4824      	ldr	r0, [pc, #144]	@ (8001d14 <LCD_GPIO_Init+0x178>)
 8001c84:	f001 ff86 	bl	8003b94 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001c88:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001c8c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4820      	ldr	r0, [pc, #128]	@ (8001d18 <LCD_GPIO_Init+0x17c>)
 8001c96:	f001 ff7d 	bl	8003b94 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001c9a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481d      	ldr	r0, [pc, #116]	@ (8001d1c <LCD_GPIO_Init+0x180>)
 8001ca8:	f001 ff74 	bl	8003b94 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001cac:	2348      	movs	r3, #72	@ 0x48
 8001cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	481a      	ldr	r0, [pc, #104]	@ (8001d20 <LCD_GPIO_Init+0x184>)
 8001cb8:	f001 ff6c 	bl	8003b94 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001cbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4816      	ldr	r0, [pc, #88]	@ (8001d24 <LCD_GPIO_Init+0x188>)
 8001cca:	f001 ff63 	bl	8003b94 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001cce:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001cd2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4813      	ldr	r0, [pc, #76]	@ (8001d28 <LCD_GPIO_Init+0x18c>)
 8001cdc:	f001 ff5a 	bl	8003b94 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	480a      	ldr	r0, [pc, #40]	@ (8001d18 <LCD_GPIO_Init+0x17c>)
 8001cf0:	f001 ff50 	bl	8003b94 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001cf4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4809      	ldr	r0, [pc, #36]	@ (8001d28 <LCD_GPIO_Init+0x18c>)
 8001d02:	f001 ff47 	bl	8003b94 <HAL_GPIO_Init>
}
 8001d06:	bf00      	nop
 8001d08:	3730      	adds	r7, #48	@ 0x30
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021400 	.word	0x40021400
 8001d28:	40021800 	.word	0x40021800

08001d2c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b090      	sub	sp, #64	@ 0x40
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001d3a:	23f0      	movs	r3, #240	@ 0xf0
 8001d3c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001d42:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001d46:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001d4c:	23ff      	movs	r3, #255	@ 0xff
 8001d4e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <LTCD_Layer_Init+0x78>)
 8001d66:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001d68:	23f0      	movs	r3, #240	@ 0xf0
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001d6c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001d70:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001d84:	79fa      	ldrb	r2, [r7, #7]
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4806      	ldr	r0, [pc, #24]	@ (8001da8 <LTCD_Layer_Init+0x7c>)
 8001d8e:	f003 fc1f 	bl	80055d0 <HAL_LTDC_ConfigLayer>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001d98:	f000 fa2c 	bl	80021f4 <LCD_Error_Handler>
	}
}
 8001d9c:	bf00      	nop
 8001d9e:	3740      	adds	r7, #64	@ 0x40
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000300 	.word	0x20000300
 8001da8:	20000224 	.word	0x20000224

08001dac <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001db0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <LTCD__Init+0xb0>)
 8001db2:	4a2b      	ldr	r2, [pc, #172]	@ (8001e60 <LTCD__Init+0xb4>)
 8001db4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001db6:	4b29      	ldr	r3, [pc, #164]	@ (8001e5c <LTCD__Init+0xb0>)
 8001db8:	2209      	movs	r2, #9
 8001dba:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <LTCD__Init+0xb0>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001dc2:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <LTCD__Init+0xb0>)
 8001dc4:	221d      	movs	r2, #29
 8001dc6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <LTCD__Init+0xb0>)
 8001dca:	2203      	movs	r2, #3
 8001dcc:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001dce:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <LTCD__Init+0xb0>)
 8001dd0:	f240 120d 	movw	r2, #269	@ 0x10d
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <LTCD__Init+0xb0>)
 8001dd8:	f240 1243 	movw	r2, #323	@ 0x143
 8001ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <LTCD__Init+0xb0>)
 8001de0:	f240 1217 	movw	r2, #279	@ 0x117
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001de6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <LTCD__Init+0xb0>)
 8001de8:	f240 1247 	movw	r2, #327	@ 0x147
 8001dec:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001dee:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <LTCD__Init+0xb0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <LTCD__Init+0xb0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <LTCD__Init+0xb0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <LTCD__Init+0xb8>)
 8001e08:	2208      	movs	r2, #8
 8001e0a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <LTCD__Init+0xb8>)
 8001e0e:	22c0      	movs	r2, #192	@ 0xc0
 8001e10:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001e12:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <LTCD__Init+0xb8>)
 8001e14:	2204      	movs	r2, #4
 8001e16:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <LTCD__Init+0xb8>)
 8001e1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e1e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001e20:	4810      	ldr	r0, [pc, #64]	@ (8001e64 <LTCD__Init+0xb8>)
 8001e22:	f004 fa31 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <LTCD__Init+0xb0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <LTCD__Init+0xb0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <LTCD__Init+0xb0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <LTCD__Init+0xb0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001e3e:	f7ff fead 	bl	8001b9c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001e42:	4806      	ldr	r0, [pc, #24]	@ (8001e5c <LTCD__Init+0xb0>)
 8001e44:	f003 faf4 	bl	8005430 <HAL_LTDC_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001e4e:	f000 f9d1 	bl	80021f4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001e52:	f000 fb07 	bl	8002464 <ili9341_Init>
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000224 	.word	0x20000224
 8001e60:	40016800 	.word	0x40016800
 8001e64:	200002cc 	.word	0x200002cc

08001e68 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
 8001e72:	460b      	mov	r3, r1
 8001e74:	80bb      	strh	r3, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001e7a:	88ba      	ldrh	r2, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	461a      	mov	r2, r3
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4904      	ldr	r1, [pc, #16]	@ (8001e9c <LCD_Draw_Pixel+0x34>)
 8001e8c:	887a      	ldrh	r2, [r7, #2]
 8001e8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	20000300 	.word	0x20000300

08001ea0 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4604      	mov	r4, r0
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	4611      	mov	r1, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4623      	mov	r3, r4
 8001eb0:	80fb      	strh	r3, [r7, #6]
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80bb      	strh	r3, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	807b      	strh	r3, [r7, #2]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	81fb      	strh	r3, [r7, #14]
 8001ec2:	e00b      	b.n	8001edc <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001ec4:	89fa      	ldrh	r2, [r7, #14]
 8001ec6:	88bb      	ldrh	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	b299      	uxth	r1, r3
 8001ecc:	883a      	ldrh	r2, [r7, #0]
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ffc9 	bl	8001e68 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	81fb      	strh	r3, [r7, #14]
 8001edc:	89fa      	ldrh	r2, [r7, #14]
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3ef      	bcc.n	8001ec4 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}

08001eee <LCD_Draw_Horizontal_Line>:
void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color) {
 8001eee:	b590      	push	{r4, r7, lr}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	4608      	mov	r0, r1
 8001ef8:	4611      	mov	r1, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4623      	mov	r3, r4
 8001efe:	80fb      	strh	r3, [r7, #6]
 8001f00:	4603      	mov	r3, r0
 8001f02:	80bb      	strh	r3, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	81fb      	strh	r3, [r7, #14]
 8001f10:	e00b      	b.n	8001f2a <LCD_Draw_Horizontal_Line+0x3c>
		LCD_Draw_Pixel(i+x, y, color);
 8001f12:	89fa      	ldrh	r2, [r7, #14]
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	4413      	add	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	883a      	ldrh	r2, [r7, #0]
 8001f1c:	88b9      	ldrh	r1, [r7, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ffa2 	bl	8001e68 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++) {
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	3301      	adds	r3, #1
 8001f28:	81fb      	strh	r3, [r7, #14]
 8001f2a:	89fa      	ldrh	r2, [r7, #14]
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3ef      	bcc.n	8001f12 <LCD_Draw_Horizontal_Line+0x24>
	}
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}

08001f3c <LCD_DrawBox_Unfilled>:

void LCD_DrawBox_Unfilled(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4623      	mov	r3, r4
 8001f4c:	80fb      	strh	r3, [r7, #6]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80bb      	strh	r3, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	807b      	strh	r3, [r7, #2]
 8001f56:	4613      	mov	r3, r2
 8001f58:	803b      	strh	r3, [r7, #0]
	LCD_Draw_Horizontal_Line(x, y, width, color);
 8001f5a:	8b3b      	ldrh	r3, [r7, #24]
 8001f5c:	887a      	ldrh	r2, [r7, #2]
 8001f5e:	88b9      	ldrh	r1, [r7, #4]
 8001f60:	88f8      	ldrh	r0, [r7, #6]
 8001f62:	f7ff ffc4 	bl	8001eee <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(x, y + height, width, color);
 8001f66:	88ba      	ldrh	r2, [r7, #4]
 8001f68:	883b      	ldrh	r3, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b299      	uxth	r1, r3
 8001f6e:	8b3b      	ldrh	r3, [r7, #24]
 8001f70:	887a      	ldrh	r2, [r7, #2]
 8001f72:	88f8      	ldrh	r0, [r7, #6]
 8001f74:	f7ff ffbb 	bl	8001eee <LCD_Draw_Horizontal_Line>
	LCD_Draw_Vertical_Line(x, y, height, color);
 8001f78:	8b3b      	ldrh	r3, [r7, #24]
 8001f7a:	883a      	ldrh	r2, [r7, #0]
 8001f7c:	88b9      	ldrh	r1, [r7, #4]
 8001f7e:	88f8      	ldrh	r0, [r7, #6]
 8001f80:	f7ff ff8e 	bl	8001ea0 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(x+width, y, height, color);
 8001f84:	88fa      	ldrh	r2, [r7, #6]
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b298      	uxth	r0, r3
 8001f8c:	8b3b      	ldrh	r3, [r7, #24]
 8001f8e:	883a      	ldrh	r2, [r7, #0]
 8001f90:	88b9      	ldrh	r1, [r7, #4]
 8001f92:	f7ff ff85 	bl	8001ea0 <LCD_Draw_Vertical_Line>
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd90      	pop	{r4, r7, pc}

08001f9e <LCD_DrawBox_Filled>:
void LCD_DrawBox_Filled(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8001f9e:	b590      	push	{r4, r7, lr}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	4608      	mov	r0, r1
 8001fa8:	4611      	mov	r1, r2
 8001faa:	461a      	mov	r2, r3
 8001fac:	4623      	mov	r3, r4
 8001fae:	80fb      	strh	r3, [r7, #6]
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	80bb      	strh	r3, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = y; i < y + height; i++) {
 8001fbc:	88bb      	ldrh	r3, [r7, #4]
 8001fbe:	81fb      	strh	r3, [r7, #14]
 8001fc0:	e008      	b.n	8001fd4 <LCD_DrawBox_Filled+0x36>
		LCD_Draw_Horizontal_Line(x, i, width, color);
 8001fc2:	8c3b      	ldrh	r3, [r7, #32]
 8001fc4:	887a      	ldrh	r2, [r7, #2]
 8001fc6:	89f9      	ldrh	r1, [r7, #14]
 8001fc8:	88f8      	ldrh	r0, [r7, #6]
 8001fca:	f7ff ff90 	bl	8001eee <LCD_Draw_Horizontal_Line>
	for (uint16_t i = y; i < y + height; i++) {
 8001fce:	89fb      	ldrh	r3, [r7, #14]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	81fb      	strh	r3, [r7, #14]
 8001fd4:	89fa      	ldrh	r2, [r7, #14]
 8001fd6:	88b9      	ldrh	r1, [r7, #4]
 8001fd8:	883b      	ldrh	r3, [r7, #0]
 8001fda:	440b      	add	r3, r1
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf0      	blt.n	8001fc2 <LCD_DrawBox_Filled+0x24>
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
	...

08001fec <LCD_Clear>:
void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	71fb      	strb	r3, [r7, #7]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10e      	bne.n	8002020 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e007      	b.n	8002018 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8002008:	4908      	ldr	r1, [pc, #32]	@ (800202c <LCD_Clear+0x40>)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	88ba      	ldrh	r2, [r7, #4]
 800200e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3301      	adds	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800201e:	d3f3      	bcc.n	8002008 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000300 	.word	0x20000300

08002030 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800203a:	4a04      	ldr	r2, [pc, #16]	@ (800204c <LCD_SetTextColor+0x1c>)
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	8013      	strh	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000

08002050 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002058:	4a03      	ldr	r2, [pc, #12]	@ (8002068 <LCD_SetFont+0x18>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	200002fc 	.word	0x200002fc

0800206c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	603a      	str	r2, [r7, #0]
 8002076:	80fb      	strh	r3, [r7, #6]
 8002078:	460b      	mov	r3, r1
 800207a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e04c      	b.n	8002124 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	e03f      	b.n	8002110 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	4413      	add	r3, r2
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	4619      	mov	r1, r3
 800209c:	4b27      	ldr	r3, [pc, #156]	@ (800213c <LCD_Draw_Char+0xd0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	889b      	ldrh	r3, [r3, #4]
 80020a2:	4a27      	ldr	r2, [pc, #156]	@ (8002140 <LCD_Draw_Char+0xd4>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	409a      	lsls	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	fa42 f303 	asr.w	r3, r2, r3
 80020b8:	400b      	ands	r3, r1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d104      	bne.n	80020c8 <LCD_Draw_Char+0x5c>
 80020be:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <LCD_Draw_Char+0xd0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	2b0c      	cmp	r3, #12
 80020c6:	d920      	bls.n	800210a <LCD_Draw_Char+0x9e>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	fa42 f303 	asr.w	r3, r2, r3
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <LCD_Draw_Char+0x80>
 80020e2:	4b16      	ldr	r3, [pc, #88]	@ (800213c <LCD_Draw_Char+0xd0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	889b      	ldrh	r3, [r3, #4]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d80e      	bhi.n	800210a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	4413      	add	r3, r2
 80020f4:	b298      	uxth	r0, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	88bb      	ldrh	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4a10      	ldr	r2, [pc, #64]	@ (8002144 <LCD_Draw_Char+0xd8>)
 8002102:	8812      	ldrh	r2, [r2, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f7ff feaf 	bl	8001e68 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3301      	adds	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <LCD_Draw_Char+0xd0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	889b      	ldrh	r3, [r3, #4]
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4293      	cmp	r3, r2
 800211c:	d3b8      	bcc.n	8002090 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <LCD_Draw_Char+0xd0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	88db      	ldrh	r3, [r3, #6]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4293      	cmp	r3, r2
 8002130:	d3ab      	bcc.n	800208a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200002fc 	.word	0x200002fc
 8002140:	aaaaaaab 	.word	0xaaaaaaab
 8002144:	20000000 	.word	0x20000000

08002148 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
 8002152:	460b      	mov	r3, r1
 8002154:	80bb      	strh	r3, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	70fb      	strb	r3, [r7, #3]
  if (Ascii == 0) {
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <LCD_DisplayChar+0x40>
	return;
  }
  Ascii -= 32;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	3b20      	subs	r3, #32
 8002164:	70fb      	strb	r3, [r7, #3]

  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <LCD_DisplayChar+0x48>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	4908      	ldr	r1, [pc, #32]	@ (8002190 <LCD_DisplayChar+0x48>)
 8002170:	6809      	ldr	r1, [r1, #0]
 8002172:	88c9      	ldrh	r1, [r1, #6]
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	441a      	add	r2, r3
 800217c:	88b9      	ldrh	r1, [r7, #4]
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff73 	bl	800206c <LCD_Draw_Char>
 8002186:	e000      	b.n	800218a <LCD_DisplayChar+0x42>
	return;
 8002188:	bf00      	nop
}
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200002fc 	.word	0x200002fc

08002194 <LCD_DisplayStr>:

void LCD_DisplayStr(uint16_t xStart, uint16_t yStart, char * Ascii, uint16_t str_length) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60ba      	str	r2, [r7, #8]
 800219c:	461a      	mov	r2, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	81fb      	strh	r3, [r7, #14]
 80021a2:	460b      	mov	r3, r1
 80021a4:	81bb      	strh	r3, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]
	uint16_t xCurr = xStart;
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	82fb      	strh	r3, [r7, #22]
	for (uint16_t i = 0; i < str_length; i++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	82bb      	strh	r3, [r7, #20]
 80021b2:	e013      	b.n	80021dc <LCD_DisplayStr+0x48>
		LCD_DisplayChar(xCurr, yStart, Ascii[i]);
 80021b4:	8abb      	ldrh	r3, [r7, #20]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	4413      	add	r3, r2
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	89b9      	ldrh	r1, [r7, #12]
 80021be:	8afb      	ldrh	r3, [r7, #22]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ffc1 	bl	8002148 <LCD_DisplayChar>
		xCurr += LCD_Currentfonts->Width - 1;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <LCD_DisplayStr+0x5c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	889a      	ldrh	r2, [r3, #4]
 80021cc:	8afb      	ldrh	r3, [r7, #22]
 80021ce:	4413      	add	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	82fb      	strh	r3, [r7, #22]
	for (uint16_t i = 0; i < str_length; i++) {
 80021d6:	8abb      	ldrh	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	82bb      	strh	r3, [r7, #20]
 80021dc:	8aba      	ldrh	r2, [r7, #20]
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3e7      	bcc.n	80021b4 <LCD_DisplayStr+0x20>
	}
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002fc 	.word	0x200002fc

080021f4 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <LCD_Error_Handler+0x8>

08002200 <MetalDetectorInit>:


#include "MetalDetector.h"


void MetalDetectorInit() {
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <MetalDetectorInit+0x40>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <MetalDetectorInit+0x40>)
 8002210:	f043 0320 	orr.w	r3, r3, #32
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <MetalDetectorInit+0x40>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef init;
	init.Mode = GPIO_MODE_INPUT;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
	init.Pin = DETECTORPIN;
 8002226:	2310      	movs	r3, #16
 8002228:	607b      	str	r3, [r7, #4]
	init.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(DETECTORPORT, &init);
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4804      	ldr	r0, [pc, #16]	@ (8002244 <MetalDetectorInit+0x44>)
 8002234:	f001 fcae 	bl	8003b94 <HAL_GPIO_Init>
}
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	40021400 	.word	0x40021400

08002248 <pollDetector>:

GPIO_PinState pollDetector() {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DETECTORPORT, DETECTORPIN);
 800224c:	2110      	movs	r1, #16
 800224e:	4803      	ldr	r0, [pc, #12]	@ (800225c <pollDetector+0x14>)
 8002250:	f001 ff54 	bl	80040fc <HAL_GPIO_ReadPin>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021400 	.word	0x40021400

08002260 <TIM_init>:
#include "TimerCtl.h"
static TIM_HandleTypeDef stopwatch;
static TIM_HandleTypeDef buzzer;


void TIM_init(uint8_t timer) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	@ 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]

	if (timer == TIM_BUZZER){
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d141      	bne.n	80022f4 <TIM_init+0x94>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	4b32      	ldr	r3, [pc, #200]	@ (8002340 <TIM_init+0xe0>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <TIM_init+0xe0>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002280:	4b2f      	ldr	r3, [pc, #188]	@ (8002340 <TIM_init+0xe0>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <TIM_init+0xe0>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	4a2a      	ldr	r2, [pc, #168]	@ (8002340 <TIM_init+0xe0>)
 8002296:	f043 0320 	orr.w	r3, r3, #32
 800229a:	6313      	str	r3, [r2, #48]	@ 0x30
 800229c:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <TIM_init+0xe0>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitTypeDef gpioinit;

		buzzer.Instance = TIM2;
 80022a8:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <TIM_init+0xe4>)
 80022aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022ae:	601a      	str	r2, [r3, #0]
		buzzer.Init.Prescaler = TIM_BUZZER_PRE;
 80022b0:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <TIM_init+0xe4>)
 80022b2:	f44f 52db 	mov.w	r2, #7008	@ 0x1b60
 80022b6:	605a      	str	r2, [r3, #4]
		buzzer.Init.Period = TIM_BUZZER_ARR;
 80022b8:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <TIM_init+0xe4>)
 80022ba:	2209      	movs	r2, #9
 80022bc:	60da      	str	r2, [r3, #12]
		buzzer.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022be:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <TIM_init+0xe4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
		buzzer.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <TIM_init+0xe4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
		HAL_TIM_Base_Init(&buzzer);
 80022ca:	481e      	ldr	r0, [pc, #120]	@ (8002344 <TIM_init+0xe4>)
 80022cc:	f004 fc7a 	bl	8006bc4 <HAL_TIM_Base_Init>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022d0:	201c      	movs	r0, #28
 80022d2:	f001 fc10 	bl	8003af6 <HAL_NVIC_EnableIRQ>

		gpioinit.Pin = GPIO_PIN_7;
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	617b      	str	r3, [r7, #20]
		gpioinit.Mode = GPIO_MODE_OUTPUT_PP;
 80022da:	2301      	movs	r3, #1
 80022dc:	61bb      	str	r3, [r7, #24]
		gpioinit.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
		gpioinit.Speed = GPIO_SPEED_FAST;
 80022e2:	2302      	movs	r3, #2
 80022e4:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOF, &gpioinit);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4816      	ldr	r0, [pc, #88]	@ (8002348 <TIM_init+0xe8>)
 80022ee:	f001 fc51 	bl	8003b94 <HAL_GPIO_Init>
 80022f2:	e022      	b.n	800233a <TIM_init+0xda>
	}
	else if (timer == TIM_STOPWATCH){
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d11f      	bne.n	800233a <TIM_init+0xda>
		__HAL_RCC_TIM5_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <TIM_init+0xe0>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	4a0f      	ldr	r2, [pc, #60]	@ (8002340 <TIM_init+0xe0>)
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	6413      	str	r3, [r2, #64]	@ 0x40
 800230a:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <TIM_init+0xe0>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
		stopwatch.Instance = TIM5;
 8002316:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <TIM_init+0xec>)
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <TIM_init+0xf0>)
 800231a:	601a      	str	r2, [r3, #0]
		stopwatch.Init.Prescaler = TIM_STOPWATCH_PRE; // makes 320 hz clock
 800231c:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <TIM_init+0xec>)
 800231e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002322:	605a      	str	r2, [r3, #4]
		stopwatch.Init.Period = TIM_STOPWATCH_ARR;		// maximum value
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <TIM_init+0xec>)
 8002326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800232a:	60da      	str	r2, [r3, #12]
		stopwatch.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <TIM_init+0xec>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
		HAL_TIM_Base_Init(&stopwatch);
 8002332:	4806      	ldr	r0, [pc, #24]	@ (800234c <TIM_init+0xec>)
 8002334:	f004 fc46 	bl	8006bc4 <HAL_TIM_Base_Init>
		return;
 8002338:	bf00      	nop
		// the above configurations make it so that the timer would reset every 410 seconds
		// which is plenty of time.
	}
}
 800233a:	3728      	adds	r7, #40	@ 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	20025b48 	.word	0x20025b48
 8002348:	40021400 	.word	0x40021400
 800234c:	20025b00 	.word	0x20025b00
 8002350:	40000c00 	.word	0x40000c00

08002354 <TIM_stopwatch_getTime>:
float TIM_stopwatch_getTime() {
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
//	TIM_stop(TIM_STOPWATCH);
	uint32_t count = __HAL_TIM_GET_COUNTER(&stopwatch);
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <TIM_stopwatch_getTime+0x2c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	607b      	str	r3, [r7, #4]
//	TIM_start(TIM_STOPWATCH);
	float printvalue = (float) count / 0x502; //  TODO - figure out value to divide by (maybe it isn't 16mhz anymore)
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe fce6 	bl	8000d34 <__aeabi_ui2f>
 8002368:	4603      	mov	r3, r0
 800236a:	4906      	ldr	r1, [pc, #24]	@ (8002384 <TIM_stopwatch_getTime+0x30>)
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fded 	bl	8000f4c <__aeabi_fdiv>
 8002372:	4603      	mov	r3, r0
 8002374:	603b      	str	r3, [r7, #0]
//	TIM_reset(TIM_STOPWATCH);
	return printvalue;
 8002376:	683b      	ldr	r3, [r7, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20025b00 	.word	0x20025b00
 8002384:	44a04000 	.word	0x44a04000

08002388 <TIM_start>:
void TIM_start(uint8_t timer) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
	switch (timer) {
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <TIM_start+0x16>
 8002398:	2b01      	cmp	r3, #1
 800239a:	d005      	beq.n	80023a8 <TIM_start+0x20>
		HAL_TIM_Base_Start_IT(&buzzer);
		break;
	case TIM_STOPWATCH:
		HAL_TIM_Base_Start(&stopwatch);
	}
}
 800239c:	e007      	b.n	80023ae <TIM_start+0x26>
		HAL_TIM_Base_Start_IT(&buzzer);
 800239e:	4806      	ldr	r0, [pc, #24]	@ (80023b8 <TIM_start+0x30>)
 80023a0:	f004 fcec 	bl	8006d7c <HAL_TIM_Base_Start_IT>
		break;
 80023a4:	bf00      	nop
}
 80023a6:	e002      	b.n	80023ae <TIM_start+0x26>
		HAL_TIM_Base_Start(&stopwatch);
 80023a8:	4804      	ldr	r0, [pc, #16]	@ (80023bc <TIM_start+0x34>)
 80023aa:	f004 fc5b 	bl	8006c64 <HAL_TIM_Base_Start>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20025b48 	.word	0x20025b48
 80023bc:	20025b00 	.word	0x20025b00

080023c0 <TIM_stop>:
void TIM_stop(uint8_t timer) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	switch (timer) {
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <TIM_stop+0x16>
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d005      	beq.n	80023e0 <TIM_stop+0x20>
		HAL_TIM_Base_Stop_IT(&buzzer);
		break;
	case TIM_STOPWATCH:
		HAL_TIM_Base_Stop(&stopwatch);
	}
}
 80023d4:	e007      	b.n	80023e6 <TIM_stop+0x26>
		HAL_TIM_Base_Stop_IT(&buzzer);
 80023d6:	4806      	ldr	r0, [pc, #24]	@ (80023f0 <TIM_stop+0x30>)
 80023d8:	f004 fd3e 	bl	8006e58 <HAL_TIM_Base_Stop_IT>
		break;
 80023dc:	bf00      	nop
}
 80023de:	e002      	b.n	80023e6 <TIM_stop+0x26>
		HAL_TIM_Base_Stop(&stopwatch);
 80023e0:	4804      	ldr	r0, [pc, #16]	@ (80023f4 <TIM_stop+0x34>)
 80023e2:	f004 fca5 	bl	8006d30 <HAL_TIM_Base_Stop>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20025b48 	.word	0x20025b48
 80023f4:	20025b00 	.word	0x20025b00

080023f8 <TIM_reset>:
void TIM_reset(uint8_t timer) {
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
	if (timer == TIM_BUZZER) {
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d104      	bne.n	8002412 <TIM_reset+0x1a>
		__HAL_TIM_SET_COUNTER(&buzzer, 0);
 8002408:	4b08      	ldr	r3, [pc, #32]	@ (800242c <TIM_reset+0x34>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2200      	movs	r2, #0
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	else if (timer == TIM_STOPWATCH) {
		__HAL_TIM_SET_COUNTER(&stopwatch, 0);
	}
}
 8002410:	e006      	b.n	8002420 <TIM_reset+0x28>
	else if (timer == TIM_STOPWATCH) {
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d103      	bne.n	8002420 <TIM_reset+0x28>
		__HAL_TIM_SET_COUNTER(&stopwatch, 0);
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <TIM_reset+0x38>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20025b48 	.word	0x20025b48
 8002430:	20025b00 	.word	0x20025b00

08002434 <TIM_buzzer_clearUIF>:

void TIM_buzzer_clearUIF() {
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT(&buzzer, TIM_IT_UPDATE);
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <TIM_buzzer_clearUIF+0x18>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0201 	mvn.w	r2, #1
 8002440:	611a      	str	r2, [r3, #16]
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20025b48 	.word	0x20025b48

08002450 <TIM_buzzer_toggle>:

void TIM_buzzer_toggle() {
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_7);
 8002454:	2180      	movs	r1, #128	@ 0x80
 8002456:	4802      	ldr	r0, [pc, #8]	@ (8002460 <TIM_buzzer_toggle+0x10>)
 8002458:	f001 fe7f 	bl	800415a <HAL_GPIO_TogglePin>
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021400 	.word	0x40021400

08002464 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002468:	f000 f9fe 	bl	8002868 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800246c:	20ca      	movs	r0, #202	@ 0xca
 800246e:	f000 f943 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8002472:	20c3      	movs	r0, #195	@ 0xc3
 8002474:	f000 f94d 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8002478:	2008      	movs	r0, #8
 800247a:	f000 f94a 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800247e:	2050      	movs	r0, #80	@ 0x50
 8002480:	f000 f947 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002484:	20cf      	movs	r0, #207	@ 0xcf
 8002486:	f000 f937 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800248a:	2000      	movs	r0, #0
 800248c:	f000 f941 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002490:	20c1      	movs	r0, #193	@ 0xc1
 8002492:	f000 f93e 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002496:	2030      	movs	r0, #48	@ 0x30
 8002498:	f000 f93b 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800249c:	20ed      	movs	r0, #237	@ 0xed
 800249e:	f000 f92b 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80024a2:	2064      	movs	r0, #100	@ 0x64
 80024a4:	f000 f935 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80024a8:	2003      	movs	r0, #3
 80024aa:	f000 f932 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80024ae:	2012      	movs	r0, #18
 80024b0:	f000 f92f 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80024b4:	2081      	movs	r0, #129	@ 0x81
 80024b6:	f000 f92c 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80024ba:	20e8      	movs	r0, #232	@ 0xe8
 80024bc:	f000 f91c 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80024c0:	2085      	movs	r0, #133	@ 0x85
 80024c2:	f000 f926 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f000 f923 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80024cc:	2078      	movs	r0, #120	@ 0x78
 80024ce:	f000 f920 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80024d2:	20cb      	movs	r0, #203	@ 0xcb
 80024d4:	f000 f910 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80024d8:	2039      	movs	r0, #57	@ 0x39
 80024da:	f000 f91a 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80024de:	202c      	movs	r0, #44	@ 0x2c
 80024e0:	f000 f917 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f000 f914 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80024ea:	2034      	movs	r0, #52	@ 0x34
 80024ec:	f000 f911 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80024f0:	2002      	movs	r0, #2
 80024f2:	f000 f90e 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80024f6:	20f7      	movs	r0, #247	@ 0xf7
 80024f8:	f000 f8fe 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80024fc:	2020      	movs	r0, #32
 80024fe:	f000 f908 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002502:	20ea      	movs	r0, #234	@ 0xea
 8002504:	f000 f8f8 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002508:	2000      	movs	r0, #0
 800250a:	f000 f902 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800250e:	2000      	movs	r0, #0
 8002510:	f000 f8ff 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002514:	20b1      	movs	r0, #177	@ 0xb1
 8002516:	f000 f8ef 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800251a:	2000      	movs	r0, #0
 800251c:	f000 f8f9 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002520:	201b      	movs	r0, #27
 8002522:	f000 f8f6 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002526:	20b6      	movs	r0, #182	@ 0xb6
 8002528:	f000 f8e6 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800252c:	200a      	movs	r0, #10
 800252e:	f000 f8f0 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002532:	20a2      	movs	r0, #162	@ 0xa2
 8002534:	f000 f8ed 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8002538:	20c0      	movs	r0, #192	@ 0xc0
 800253a:	f000 f8dd 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800253e:	2010      	movs	r0, #16
 8002540:	f000 f8e7 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002544:	20c1      	movs	r0, #193	@ 0xc1
 8002546:	f000 f8d7 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800254a:	2010      	movs	r0, #16
 800254c:	f000 f8e1 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002550:	20c5      	movs	r0, #197	@ 0xc5
 8002552:	f000 f8d1 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8002556:	2045      	movs	r0, #69	@ 0x45
 8002558:	f000 f8db 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800255c:	2015      	movs	r0, #21
 800255e:	f000 f8d8 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002562:	20c7      	movs	r0, #199	@ 0xc7
 8002564:	f000 f8c8 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002568:	2090      	movs	r0, #144	@ 0x90
 800256a:	f000 f8d2 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800256e:	2036      	movs	r0, #54	@ 0x36
 8002570:	f000 f8c2 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002574:	20c8      	movs	r0, #200	@ 0xc8
 8002576:	f000 f8cc 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800257a:	20f2      	movs	r0, #242	@ 0xf2
 800257c:	f000 f8bc 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002580:	2000      	movs	r0, #0
 8002582:	f000 f8c6 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002586:	20b0      	movs	r0, #176	@ 0xb0
 8002588:	f000 f8b6 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800258c:	20c2      	movs	r0, #194	@ 0xc2
 800258e:	f000 f8c0 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002592:	20b6      	movs	r0, #182	@ 0xb6
 8002594:	f000 f8b0 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002598:	200a      	movs	r0, #10
 800259a:	f000 f8ba 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800259e:	20a7      	movs	r0, #167	@ 0xa7
 80025a0:	f000 f8b7 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80025a4:	2027      	movs	r0, #39	@ 0x27
 80025a6:	f000 f8b4 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80025aa:	2004      	movs	r0, #4
 80025ac:	f000 f8b1 	bl	8002712 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80025b0:	202a      	movs	r0, #42	@ 0x2a
 80025b2:	f000 f8a1 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f000 f8ab 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f000 f8a8 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f000 f8a5 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80025c8:	20ef      	movs	r0, #239	@ 0xef
 80025ca:	f000 f8a2 	bl	8002712 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80025ce:	202b      	movs	r0, #43	@ 0x2b
 80025d0:	f000 f892 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f000 f89c 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f000 f899 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f000 f896 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80025e6:	203f      	movs	r0, #63	@ 0x3f
 80025e8:	f000 f893 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80025ec:	20f6      	movs	r0, #246	@ 0xf6
 80025ee:	f000 f883 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f000 f88d 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f000 f88a 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80025fe:	2006      	movs	r0, #6
 8002600:	f000 f887 	bl	8002712 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002604:	202c      	movs	r0, #44	@ 0x2c
 8002606:	f000 f877 	bl	80026f8 <ili9341_Write_Reg>
  LCD_Delay(200);
 800260a:	20c8      	movs	r0, #200	@ 0xc8
 800260c:	f000 f9e8 	bl	80029e0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002610:	2026      	movs	r0, #38	@ 0x26
 8002612:	f000 f871 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002616:	2001      	movs	r0, #1
 8002618:	f000 f87b 	bl	8002712 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800261c:	20e0      	movs	r0, #224	@ 0xe0
 800261e:	f000 f86b 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002622:	200f      	movs	r0, #15
 8002624:	f000 f875 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8002628:	2029      	movs	r0, #41	@ 0x29
 800262a:	f000 f872 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800262e:	2024      	movs	r0, #36	@ 0x24
 8002630:	f000 f86f 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002634:	200c      	movs	r0, #12
 8002636:	f000 f86c 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800263a:	200e      	movs	r0, #14
 800263c:	f000 f869 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002640:	2009      	movs	r0, #9
 8002642:	f000 f866 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8002646:	204e      	movs	r0, #78	@ 0x4e
 8002648:	f000 f863 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800264c:	2078      	movs	r0, #120	@ 0x78
 800264e:	f000 f860 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002652:	203c      	movs	r0, #60	@ 0x3c
 8002654:	f000 f85d 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002658:	2009      	movs	r0, #9
 800265a:	f000 f85a 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800265e:	2013      	movs	r0, #19
 8002660:	f000 f857 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002664:	2005      	movs	r0, #5
 8002666:	f000 f854 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800266a:	2017      	movs	r0, #23
 800266c:	f000 f851 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002670:	2011      	movs	r0, #17
 8002672:	f000 f84e 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002676:	2000      	movs	r0, #0
 8002678:	f000 f84b 	bl	8002712 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800267c:	20e1      	movs	r0, #225	@ 0xe1
 800267e:	f000 f83b 	bl	80026f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002682:	2000      	movs	r0, #0
 8002684:	f000 f845 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002688:	2016      	movs	r0, #22
 800268a:	f000 f842 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800268e:	201b      	movs	r0, #27
 8002690:	f000 f83f 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002694:	2004      	movs	r0, #4
 8002696:	f000 f83c 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800269a:	2011      	movs	r0, #17
 800269c:	f000 f839 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80026a0:	2007      	movs	r0, #7
 80026a2:	f000 f836 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80026a6:	2031      	movs	r0, #49	@ 0x31
 80026a8:	f000 f833 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80026ac:	2033      	movs	r0, #51	@ 0x33
 80026ae:	f000 f830 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80026b2:	2042      	movs	r0, #66	@ 0x42
 80026b4:	f000 f82d 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80026b8:	2005      	movs	r0, #5
 80026ba:	f000 f82a 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80026be:	200c      	movs	r0, #12
 80026c0:	f000 f827 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80026c4:	200a      	movs	r0, #10
 80026c6:	f000 f824 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80026ca:	2028      	movs	r0, #40	@ 0x28
 80026cc:	f000 f821 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80026d0:	202f      	movs	r0, #47	@ 0x2f
 80026d2:	f000 f81e 	bl	8002712 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80026d6:	200f      	movs	r0, #15
 80026d8:	f000 f81b 	bl	8002712 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80026dc:	2011      	movs	r0, #17
 80026de:	f000 f80b 	bl	80026f8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80026e2:	20c8      	movs	r0, #200	@ 0xc8
 80026e4:	f000 f97c 	bl	80029e0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80026e8:	2029      	movs	r0, #41	@ 0x29
 80026ea:	f000 f805 	bl	80026f8 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80026ee:	202c      	movs	r0, #44	@ 0x2c
 80026f0:	f000 f802 	bl	80026f8 <ili9341_Write_Reg>
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f949 	bl	800299c <LCD_IO_WriteReg>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f91a 	bl	8002958 <LCD_IO_WriteData>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002730:	4819      	ldr	r0, [pc, #100]	@ (8002798 <SPI_Init+0x6c>)
 8002732:	f004 f95e 	bl	80069f2 <HAL_SPI_GetState>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d12b      	bne.n	8002794 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800273c:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <SPI_Init+0x6c>)
 800273e:	4a17      	ldr	r2, [pc, #92]	@ (800279c <SPI_Init+0x70>)
 8002740:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <SPI_Init+0x6c>)
 8002744:	2218      	movs	r2, #24
 8002746:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002748:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <SPI_Init+0x6c>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <SPI_Init+0x6c>)
 8002750:	2200      	movs	r2, #0
 8002752:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002754:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <SPI_Init+0x6c>)
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800275a:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <SPI_Init+0x6c>)
 800275c:	2200      	movs	r2, #0
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002760:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <SPI_Init+0x6c>)
 8002762:	2207      	movs	r2, #7
 8002764:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002766:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <SPI_Init+0x6c>)
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <SPI_Init+0x6c>)
 800276e:	2200      	movs	r2, #0
 8002770:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002772:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <SPI_Init+0x6c>)
 8002774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002778:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800277a:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <SPI_Init+0x6c>)
 800277c:	2200      	movs	r2, #0
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <SPI_Init+0x6c>)
 8002782:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002786:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002788:	4803      	ldr	r0, [pc, #12]	@ (8002798 <SPI_Init+0x6c>)
 800278a:	f000 f833 	bl	80027f4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800278e:	4802      	ldr	r0, [pc, #8]	@ (8002798 <SPI_Init+0x6c>)
 8002790:	f003 ff3a 	bl	8006608 <HAL_SPI_Init>
  }
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20025b90 	.word	0x20025b90
 800279c:	40015000 	.word	0x40015000

080027a0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <SPI_Write+0x34>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1db9      	adds	r1, r7, #6
 80027b4:	2201      	movs	r2, #1
 80027b6:	4808      	ldr	r0, [pc, #32]	@ (80027d8 <SPI_Write+0x38>)
 80027b8:	f003 ffd7 	bl	800676a <HAL_SPI_Transmit>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80027c6:	f000 f809 	bl	80027dc <SPI_Error>
  }
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000014 	.word	0x20000014
 80027d8:	20025b90 	.word	0x20025b90

080027dc <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80027e0:	4803      	ldr	r0, [pc, #12]	@ (80027f0 <SPI_Error+0x14>)
 80027e2:	f003 ff9a 	bl	800671a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80027e6:	f7ff ffa1 	bl	800272c <SPI_Init>
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20025b90 	.word	0x20025b90

080027f4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	@ 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	4b17      	ldr	r3, [pc, #92]	@ (8002860 <SPI_MspInit+0x6c>)
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	4a16      	ldr	r2, [pc, #88]	@ (8002860 <SPI_MspInit+0x6c>)
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800280a:	6453      	str	r3, [r2, #68]	@ 0x44
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <SPI_MspInit+0x6c>)
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <SPI_MspInit+0x6c>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <SPI_MspInit+0x6c>)
 8002822:	f043 0320 	orr.w	r3, r3, #32
 8002826:	6313      	str	r3, [r2, #48]	@ 0x30
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <SPI_MspInit+0x6c>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002834:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002838:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800283e:	2302      	movs	r3, #2
 8002840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002842:	2301      	movs	r3, #1
 8002844:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002846:	2305      	movs	r3, #5
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	4804      	ldr	r0, [pc, #16]	@ (8002864 <SPI_MspInit+0x70>)
 8002852:	f001 f99f 	bl	8003b94 <HAL_GPIO_Init>
}
 8002856:	bf00      	nop
 8002858:	3728      	adds	r7, #40	@ 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40021400 	.word	0x40021400

08002868 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800286e:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <LCD_IO_Init+0xe0>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d164      	bne.n	8002940 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002876:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <LCD_IO_Init+0xe0>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	4b32      	ldr	r3, [pc, #200]	@ (800294c <LCD_IO_Init+0xe4>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	4a31      	ldr	r2, [pc, #196]	@ (800294c <LCD_IO_Init+0xe4>)
 8002886:	f043 0308 	orr.w	r3, r3, #8
 800288a:	6313      	str	r3, [r2, #48]	@ 0x30
 800288c:	4b2f      	ldr	r3, [pc, #188]	@ (800294c <LCD_IO_Init+0xe4>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800289c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800289e:	2301      	movs	r3, #1
 80028a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	4619      	mov	r1, r3
 80028b0:	4827      	ldr	r0, [pc, #156]	@ (8002950 <LCD_IO_Init+0xe8>)
 80028b2:	f001 f96f 	bl	8003b94 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	4b24      	ldr	r3, [pc, #144]	@ (800294c <LCD_IO_Init+0xe4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a23      	ldr	r2, [pc, #140]	@ (800294c <LCD_IO_Init+0xe4>)
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b21      	ldr	r3, [pc, #132]	@ (800294c <LCD_IO_Init+0xe4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80028d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80028d8:	2301      	movs	r3, #1
 80028da:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	4619      	mov	r1, r3
 80028ea:	4819      	ldr	r0, [pc, #100]	@ (8002950 <LCD_IO_Init+0xe8>)
 80028ec:	f001 f952 	bl	8003b94 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4b15      	ldr	r3, [pc, #84]	@ (800294c <LCD_IO_Init+0xe4>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	4a14      	ldr	r2, [pc, #80]	@ (800294c <LCD_IO_Init+0xe4>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002900:	4b12      	ldr	r3, [pc, #72]	@ (800294c <LCD_IO_Init+0xe4>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800290c:	2304      	movs	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002910:	2301      	movs	r3, #1
 8002912:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002918:	2302      	movs	r3, #2
 800291a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	4619      	mov	r1, r3
 8002922:	480c      	ldr	r0, [pc, #48]	@ (8002954 <LCD_IO_Init+0xec>)
 8002924:	f001 f936 	bl	8003b94 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002928:	2200      	movs	r2, #0
 800292a:	2104      	movs	r1, #4
 800292c:	4809      	ldr	r0, [pc, #36]	@ (8002954 <LCD_IO_Init+0xec>)
 800292e:	f001 fbfc 	bl	800412a <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002932:	2201      	movs	r2, #1
 8002934:	2104      	movs	r1, #4
 8002936:	4807      	ldr	r0, [pc, #28]	@ (8002954 <LCD_IO_Init+0xec>)
 8002938:	f001 fbf7 	bl	800412a <HAL_GPIO_WritePin>

    SPI_Init();
 800293c:	f7ff fef6 	bl	800272c <SPI_Init>
  }
}
 8002940:	bf00      	nop
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20025be8 	.word	0x20025be8
 800294c:	40023800 	.word	0x40023800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40020800 	.word	0x40020800

08002958 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002962:	2201      	movs	r2, #1
 8002964:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002968:	480a      	ldr	r0, [pc, #40]	@ (8002994 <LCD_IO_WriteData+0x3c>)
 800296a:	f001 fbde 	bl	800412a <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800296e:	2200      	movs	r2, #0
 8002970:	2104      	movs	r1, #4
 8002972:	4809      	ldr	r0, [pc, #36]	@ (8002998 <LCD_IO_WriteData+0x40>)
 8002974:	f001 fbd9 	bl	800412a <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff10 	bl	80027a0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002980:	2201      	movs	r2, #1
 8002982:	2104      	movs	r1, #4
 8002984:	4804      	ldr	r0, [pc, #16]	@ (8002998 <LCD_IO_WriteData+0x40>)
 8002986:	f001 fbd0 	bl	800412a <HAL_GPIO_WritePin>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40020800 	.word	0x40020800

0800299c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80029a6:	2200      	movs	r2, #0
 80029a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029ac:	480a      	ldr	r0, [pc, #40]	@ (80029d8 <LCD_IO_WriteReg+0x3c>)
 80029ae:	f001 fbbc 	bl	800412a <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80029b2:	2200      	movs	r2, #0
 80029b4:	2104      	movs	r1, #4
 80029b6:	4809      	ldr	r0, [pc, #36]	@ (80029dc <LCD_IO_WriteReg+0x40>)
 80029b8:	f001 fbb7 	bl	800412a <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff feed 	bl	80027a0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029c6:	2201      	movs	r2, #1
 80029c8:	2104      	movs	r1, #4
 80029ca:	4804      	ldr	r0, [pc, #16]	@ (80029dc <LCD_IO_WriteReg+0x40>)
 80029cc:	f001 fbad 	bl	800412a <HAL_GPIO_WritePin>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40020c00 	.word	0x40020c00
 80029dc:	40020800 	.word	0x40020800

080029e0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 ff2b 	bl	8003844 <HAL_Delay>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029fa:	f000 feb5 	bl	8003768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClockOverride();
 80029fe:	f000 f80d 	bl	8002a1c <SystemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  App_Buzzer_init();
 8002a02:	f7ff f83a 	bl	8001a7a <App_Buzzer_init>
  App_Buzzer_beep();
 8002a06:	f7ff f83f 	bl	8001a88 <App_Buzzer_beep>
  App_Stopwatch_init();
 8002a0a:	f7ff f82f 	bl	8001a6c <App_Stopwatch_init>
  ApplicationInit();
 8002a0e:	f7fe fd85 	bl	800151c <ApplicationInit>
  App_ScreenHandler();
 8002a12:	f7fe fdab 	bl	800156c <App_ScreenHandler>
//  App_Buzzer_test1();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a16:	bf00      	nop
 8002a18:	e7fd      	b.n	8002a16 <main+0x20>
	...

08002a1c <SystemClockOverride>:
  {
    Error_Handler();
  }
}
void SystemClockOverride(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b092      	sub	sp, #72	@ 0x48
 8002a20:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	4b1c      	ldr	r3, [pc, #112]	@ (8002a98 <SystemClockOverride+0x7c>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <SystemClockOverride+0x7c>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a32:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <SystemClockOverride+0x7c>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a46:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a52:	2308      	movs	r3, #8
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a56:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a60:	2307      	movs	r3, #7
 8002a62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 ff86 	bl	8005978 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002a6c:	230f      	movs	r3, #15
 8002a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a70:	2302      	movs	r3, #2
 8002a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a74:	2300      	movs	r3, #0
 8002a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a82:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002a84:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a88:	2105      	movs	r1, #5
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 f9ec 	bl	8005e68 <HAL_RCC_ClockConfig>
}
 8002a90:	bf00      	nop
 8002a92:	3748      	adds	r7, #72	@ 0x48
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800

08002a9c <Error_Handler>:
  * @retval Non
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa0:	b672      	cpsid	i
}
 8002aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <Error_Handler+0x8>

08002aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <HAL_MspInit+0x4c>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8002af4 <HAL_MspInit+0x4c>)
 8002ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <HAL_MspInit+0x4c>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <HAL_MspInit+0x4c>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	4a08      	ldr	r2, [pc, #32]	@ (8002af4 <HAL_MspInit+0x4c>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <HAL_MspInit+0x4c>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ae6:	2007      	movs	r0, #7
 8002ae8:	f000 ffde 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	@ 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <HAL_I2C_MspInit+0xc4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d14b      	bne.n	8002bb2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	4b28      	ldr	r3, [pc, #160]	@ (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	4a27      	ldr	r2, [pc, #156]	@ (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2a:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	4a20      	ldr	r2, [pc, #128]	@ (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b46:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002b52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b58:	2312      	movs	r3, #18
 8002b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b64:	2304      	movs	r3, #4
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4815      	ldr	r0, [pc, #84]	@ (8002bc4 <HAL_I2C_MspInit+0xcc>)
 8002b70:	f001 f810 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7a:	2312      	movs	r3, #18
 8002b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b86:	2304      	movs	r3, #4
 8002b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4619      	mov	r1, r3
 8002b90:	480d      	ldr	r0, [pc, #52]	@ (8002bc8 <HAL_I2C_MspInit+0xd0>)
 8002b92:	f000 ffff 	bl	8003b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	4a08      	ldr	r2, [pc, #32]	@ (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002ba0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba6:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002bb2:	bf00      	nop
 8002bb4:	3728      	adds	r7, #40	@ 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40005c00 	.word	0x40005c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020000 	.word	0x40020000

08002bcc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b09a      	sub	sp, #104	@ 0x68
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be8:	2230      	movs	r2, #48	@ 0x30
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f005 f867 	bl	8007cc0 <memset>
  if(hltdc->Instance==LTDC)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a81      	ldr	r2, [pc, #516]	@ (8002dfc <HAL_LTDC_MspInit+0x230>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	f040 80fa 	bne.w	8002df2 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002bfe:	2308      	movs	r3, #8
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002c02:	2332      	movs	r3, #50	@ 0x32
 8002c04:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002c06:	2302      	movs	r3, #2
 8002c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fb38 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002c1e:	f7ff ff3d 	bl	8002a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	4b76      	ldr	r3, [pc, #472]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4a75      	ldr	r2, [pc, #468]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c32:	4b73      	ldr	r3, [pc, #460]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	4b6f      	ldr	r3, [pc, #444]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a6e      	ldr	r2, [pc, #440]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c48:	f043 0320 	orr.w	r3, r3, #32
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	4b68      	ldr	r3, [pc, #416]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a67      	ldr	r2, [pc, #412]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b65      	ldr	r3, [pc, #404]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	4b61      	ldr	r3, [pc, #388]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	4a60      	ldr	r2, [pc, #384]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c86:	4b5e      	ldr	r3, [pc, #376]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	4b5a      	ldr	r3, [pc, #360]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	4a59      	ldr	r2, [pc, #356]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002c9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca2:	4b57      	ldr	r3, [pc, #348]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b53      	ldr	r3, [pc, #332]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	4a52      	ldr	r2, [pc, #328]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cbe:	4b50      	ldr	r3, [pc, #320]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	4b4c      	ldr	r3, [pc, #304]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	4a4b      	ldr	r2, [pc, #300]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cda:	4b49      	ldr	r3, [pc, #292]	@ (8002e00 <HAL_LTDC_MspInit+0x234>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cf8:	230e      	movs	r3, #14
 8002cfa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002cfc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d00:	4619      	mov	r1, r3
 8002d02:	4840      	ldr	r0, [pc, #256]	@ (8002e04 <HAL_LTDC_MspInit+0x238>)
 8002d04:	f000 ff46 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002d08:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002d0c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	2300      	movs	r3, #0
 8002d18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d1a:	230e      	movs	r3, #14
 8002d1c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d22:	4619      	mov	r1, r3
 8002d24:	4838      	ldr	r0, [pc, #224]	@ (8002e08 <HAL_LTDC_MspInit+0x23c>)
 8002d26:	f000 ff35 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d3a:	2309      	movs	r3, #9
 8002d3c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d42:	4619      	mov	r1, r3
 8002d44:	4831      	ldr	r0, [pc, #196]	@ (8002e0c <HAL_LTDC_MspInit+0x240>)
 8002d46:	f000 ff25 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002d4a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002d4e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d5c:	230e      	movs	r3, #14
 8002d5e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d64:	4619      	mov	r1, r3
 8002d66:	4829      	ldr	r0, [pc, #164]	@ (8002e0c <HAL_LTDC_MspInit+0x240>)
 8002d68:	f000 ff14 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002d6c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002d70:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d7e:	230e      	movs	r3, #14
 8002d80:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d86:	4619      	mov	r1, r3
 8002d88:	4821      	ldr	r0, [pc, #132]	@ (8002e10 <HAL_LTDC_MspInit+0x244>)
 8002d8a:	f000 ff03 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002d8e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002d92:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002da0:	230e      	movs	r3, #14
 8002da2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002da8:	4619      	mov	r1, r3
 8002daa:	481a      	ldr	r0, [pc, #104]	@ (8002e14 <HAL_LTDC_MspInit+0x248>)
 8002dac:	f000 fef2 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002db0:	2348      	movs	r3, #72	@ 0x48
 8002db2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dc0:	230e      	movs	r3, #14
 8002dc2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4813      	ldr	r0, [pc, #76]	@ (8002e18 <HAL_LTDC_MspInit+0x24c>)
 8002dcc:	f000 fee2 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002dd0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dd4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dde:	2300      	movs	r3, #0
 8002de0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002de2:	2309      	movs	r3, #9
 8002de4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002de6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dea:	4619      	mov	r1, r3
 8002dec:	4808      	ldr	r0, [pc, #32]	@ (8002e10 <HAL_LTDC_MspInit+0x244>)
 8002dee:	f000 fed1 	bl	8003b94 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002df2:	bf00      	nop
 8002df4:	3768      	adds	r7, #104	@ 0x68
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40016800 	.word	0x40016800
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40021400 	.word	0x40021400
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40021800 	.word	0x40021800
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020c00 	.word	0x40020c00

08002e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	@ 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a19      	ldr	r2, [pc, #100]	@ (8002ea0 <HAL_SPI_MspInit+0x84>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d12c      	bne.n	8002e98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	4b18      	ldr	r3, [pc, #96]	@ (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	4a17      	ldr	r2, [pc, #92]	@ (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	4a10      	ldr	r2, [pc, #64]	@ (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e64:	f043 0320 	orr.w	r3, r3, #32
 8002e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002e76:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002e88:	2305      	movs	r3, #5
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4619      	mov	r1, r3
 8002e92:	4805      	ldr	r0, [pc, #20]	@ (8002ea8 <HAL_SPI_MspInit+0x8c>)
 8002e94:	f000 fe7e 	bl	8003b94 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002e98:	bf00      	nop
 8002e9a:	3728      	adds	r7, #40	@ 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40015000 	.word	0x40015000
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40021400 	.word	0x40021400

08002eac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a08      	ldr	r2, [pc, #32]	@ (8002edc <HAL_SPI_MspDeInit+0x30>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002ebe:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <HAL_SPI_MspDeInit+0x34>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	4a07      	ldr	r2, [pc, #28]	@ (8002ee0 <HAL_SPI_MspDeInit+0x34>)
 8002ec4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002ec8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002eca:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002ece:	4805      	ldr	r0, [pc, #20]	@ (8002ee4 <HAL_SPI_MspDeInit+0x38>)
 8002ed0:	f001 f80a 	bl	8003ee8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40015000 	.word	0x40015000
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40021400 	.word	0x40021400

08002ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef8:	d10e      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <HAL_TIM_Base_MspInit+0x60>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	4a11      	ldr	r2, [pc, #68]	@ (8002f48 <HAL_TIM_Base_MspInit+0x60>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <HAL_TIM_Base_MspInit+0x60>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f16:	e012      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f4c <HAL_TIM_Base_MspInit+0x64>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10d      	bne.n	8002f3e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_TIM_Base_MspInit+0x60>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	4a07      	ldr	r2, [pc, #28]	@ (8002f48 <HAL_TIM_Base_MspInit+0x60>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f32:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_TIM_Base_MspInit+0x60>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40000c00 	.word	0x40000c00

08002f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f54:	bf00      	nop
 8002f56:	e7fd      	b.n	8002f54 <NMI_Handler+0x4>

08002f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <HardFault_Handler+0x4>

08002f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <MemManage_Handler+0x4>

08002f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <BusFault_Handler+0x4>

08002f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <UsageFault_Handler+0x4>

08002f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa0:	f000 fc34 	bl	800380c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <__NVIC_EnableIRQ>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	db0b      	blt.n	8002fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	4906      	ldr	r1, [pc, #24]	@ (8002fdc <__NVIC_EnableIRQ+0x34>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2001      	movs	r0, #1
 8002fca:	fa00 f202 	lsl.w	r2, r0, r2
 8002fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports
    I2C3_MspInit();
 8002fe6:	f000 f9e3 	bl	80033b0 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002fea:	f000 f9a3 	bl	8003334 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002fee:	2202      	movs	r2, #2
 8002ff0:	2103      	movs	r1, #3
 8002ff2:	2082      	movs	r0, #130	@ 0x82
 8002ff4:	f000 fa30 	bl	8003458 <I2C3_Write>
    HAL_Delay(5);
 8002ff8:	2005      	movs	r0, #5
 8002ffa:	f000 fc23 	bl	8003844 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2103      	movs	r1, #3
 8003002:	2082      	movs	r0, #130	@ 0x82
 8003004:	f000 fa28 	bl	8003458 <I2C3_Write>
    HAL_Delay(2);
 8003008:	2002      	movs	r0, #2
 800300a:	f000 fc1b 	bl	8003844 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800300e:	1cba      	adds	r2, r7, #2
 8003010:	2302      	movs	r3, #2
 8003012:	2100      	movs	r1, #0
 8003014:	2082      	movs	r0, #130	@ 0x82
 8003016:	f000 fa6f 	bl	80034f8 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003020:	887b      	ldrh	r3, [r7, #2]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b29a      	uxth	r2, r3
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	4313      	orrs	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	f640 0211 	movw	r2, #2065	@ 0x811
 8003032:	4293      	cmp	r3, r2
 8003034:	d001      	beq.n	800303a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003036:	2303      	movs	r3, #3
 8003038:	e095      	b.n	8003166 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800303a:	2202      	movs	r2, #2
 800303c:	2103      	movs	r1, #3
 800303e:	2082      	movs	r0, #130	@ 0x82
 8003040:	f000 fa0a 	bl	8003458 <I2C3_Write>
    HAL_Delay(5);
 8003044:	2005      	movs	r0, #5
 8003046:	f000 fbfd 	bl	8003844 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800304a:	2200      	movs	r2, #0
 800304c:	2103      	movs	r1, #3
 800304e:	2082      	movs	r0, #130	@ 0x82
 8003050:	f000 fa02 	bl	8003458 <I2C3_Write>
    HAL_Delay(2);
 8003054:	2002      	movs	r0, #2
 8003056:	f000 fbf5 	bl	8003844 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800305a:	2004      	movs	r0, #4
 800305c:	f000 f887 	bl	800316e <STMPE811_Read>
 8003060:	4603      	mov	r3, r0
 8003062:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003064:	797b      	ldrb	r3, [r7, #5]
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800306c:	797b      	ldrb	r3, [r7, #5]
 800306e:	461a      	mov	r2, r3
 8003070:	2104      	movs	r1, #4
 8003072:	2082      	movs	r0, #130	@ 0x82
 8003074:	f000 f9f0 	bl	8003458 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003078:	2004      	movs	r0, #4
 800307a:	f000 f878 	bl	800316e <STMPE811_Read>
 800307e:	4603      	mov	r3, r0
 8003080:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003082:	797b      	ldrb	r3, [r7, #5]
 8003084:	f023 0302 	bic.w	r3, r3, #2
 8003088:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800308a:	797b      	ldrb	r3, [r7, #5]
 800308c:	461a      	mov	r2, r3
 800308e:	2104      	movs	r1, #4
 8003090:	2082      	movs	r0, #130	@ 0x82
 8003092:	f000 f9e1 	bl	8003458 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003096:	2249      	movs	r2, #73	@ 0x49
 8003098:	2120      	movs	r1, #32
 800309a:	2082      	movs	r0, #130	@ 0x82
 800309c:	f000 f9dc 	bl	8003458 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80030a0:	2002      	movs	r0, #2
 80030a2:	f000 fbcf 	bl	8003844 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80030a6:	2201      	movs	r2, #1
 80030a8:	2121      	movs	r1, #33	@ 0x21
 80030aa:	2082      	movs	r0, #130	@ 0x82
 80030ac:	f000 f9d4 	bl	8003458 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80030b0:	2017      	movs	r0, #23
 80030b2:	f000 f85c 	bl	800316e <STMPE811_Read>
 80030b6:	4603      	mov	r3, r0
 80030b8:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80030ba:	797b      	ldrb	r3, [r7, #5]
 80030bc:	f043 031e 	orr.w	r3, r3, #30
 80030c0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80030c2:	797b      	ldrb	r3, [r7, #5]
 80030c4:	461a      	mov	r2, r3
 80030c6:	2117      	movs	r1, #23
 80030c8:	2082      	movs	r0, #130	@ 0x82
 80030ca:	f000 f9c5 	bl	8003458 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80030ce:	229a      	movs	r2, #154	@ 0x9a
 80030d0:	2141      	movs	r1, #65	@ 0x41
 80030d2:	2082      	movs	r0, #130	@ 0x82
 80030d4:	f000 f9c0 	bl	8003458 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80030d8:	2201      	movs	r2, #1
 80030da:	214a      	movs	r1, #74	@ 0x4a
 80030dc:	2082      	movs	r0, #130	@ 0x82
 80030de:	f000 f9bb 	bl	8003458 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80030e2:	2201      	movs	r2, #1
 80030e4:	214b      	movs	r1, #75	@ 0x4b
 80030e6:	2082      	movs	r0, #130	@ 0x82
 80030e8:	f000 f9b6 	bl	8003458 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80030ec:	2200      	movs	r2, #0
 80030ee:	214b      	movs	r1, #75	@ 0x4b
 80030f0:	2082      	movs	r0, #130	@ 0x82
 80030f2:	f000 f9b1 	bl	8003458 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80030f6:	2201      	movs	r2, #1
 80030f8:	2156      	movs	r1, #86	@ 0x56
 80030fa:	2082      	movs	r0, #130	@ 0x82
 80030fc:	f000 f9ac 	bl	8003458 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003100:	2201      	movs	r2, #1
 8003102:	2158      	movs	r1, #88	@ 0x58
 8003104:	2082      	movs	r0, #130	@ 0x82
 8003106:	f000 f9a7 	bl	8003458 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800310a:	2203      	movs	r2, #3
 800310c:	2140      	movs	r1, #64	@ 0x40
 800310e:	2082      	movs	r0, #130	@ 0x82
 8003110:	f000 f9a2 	bl	8003458 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003114:	22ff      	movs	r2, #255	@ 0xff
 8003116:	210b      	movs	r1, #11
 8003118:	2082      	movs	r0, #130	@ 0x82
 800311a:	f000 f99d 	bl	8003458 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 800311e:	f000 f8c9 	bl	80032b4 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003122:	2009      	movs	r0, #9
 8003124:	f000 f823 	bl	800316e <STMPE811_Read>
 8003128:	4603      	mov	r3, r0
 800312a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800312c:	797b      	ldrb	r3, [r7, #5]
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003134:	797b      	ldrb	r3, [r7, #5]
 8003136:	461a      	mov	r2, r3
 8003138:	2109      	movs	r1, #9
 800313a:	2082      	movs	r0, #130	@ 0x82
 800313c:	f000 f98c 	bl	8003458 <I2C3_Write>

    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003140:	200a      	movs	r0, #10
 8003142:	f000 f814 	bl	800316e <STMPE811_Read>
 8003146:	4603      	mov	r3, r0
 8003148:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800314a:	797b      	ldrb	r3, [r7, #5]
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003152:	797b      	ldrb	r3, [r7, #5]
 8003154:	461a      	mov	r2, r3
 8003156:	210a      	movs	r1, #10
 8003158:	2082      	movs	r0, #130	@ 0x82
 800315a:	f000 f97d 	bl	8003458 <I2C3_Write>

    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT

    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800315e:	20c8      	movs	r0, #200	@ 0xc8
 8003160:	f000 fb70 	bl	8003844 <HAL_Delay>

    return STMPE811_State_Ok;
 8003164:	2302      	movs	r3, #2

}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003178:	f107 020f 	add.w	r2, r7, #15
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	4619      	mov	r1, r3
 8003180:	2082      	movs	r0, #130	@ 0x82
 8003182:	f000 f993 	bl	80034ac <I2C3_Read>

    return readData;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	799b      	ldrb	r3, [r3, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d117      	bne.n	80031d0 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 f9c9 	bl	800353c <TM_STMPE811_ReadX>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	885b      	ldrh	r3, [r3, #2]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fa1c 	bl	80035f8 <TM_STMPE811_ReadY>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80031c6:	3301      	adds	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	805a      	strh	r2, [r3, #2]
 80031ce:	e048      	b.n	8003262 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	799b      	ldrb	r3, [r3, #6]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d112      	bne.n	80031fe <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f9ad 	bl	800353c <TM_STMPE811_ReadX>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	885b      	ldrh	r3, [r3, #2]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fa02 	bl	80035f8 <TM_STMPE811_ReadY>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	805a      	strh	r2, [r3, #2]
 80031fc:	e031      	b.n	8003262 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	799b      	ldrb	r3, [r3, #6]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d115      	bne.n	8003232 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	885b      	ldrh	r3, [r3, #2]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f996 	bl	800353c <TM_STMPE811_ReadX>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f9eb 	bl	80035f8 <TM_STMPE811_ReadY>
 8003222:	4603      	mov	r3, r0
 8003224:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003228:	3301      	adds	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	801a      	strh	r2, [r3, #0]
 8003230:	e017      	b.n	8003262 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	799b      	ldrb	r3, [r3, #6]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d113      	bne.n	8003262 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f97c 	bl	800353c <TM_STMPE811_ReadX>
 8003244:	4603      	mov	r3, r0
 8003246:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f9cf 	bl	80035f8 <TM_STMPE811_ReadY>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo

    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003262:	2201      	movs	r2, #1
 8003264:	214b      	movs	r1, #75	@ 0x4b
 8003266:	2082      	movs	r0, #130	@ 0x82
 8003268:	f000 f8f6 	bl	8003458 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800326c:	2200      	movs	r2, #0
 800326e:	214b      	movs	r1, #75	@ 0x4b
 8003270:	2082      	movs	r0, #130	@ 0x82
 8003272:	f000 f8f1 	bl	8003458 <I2C3_Write>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <isSTMPE811_Ready>:

bool isSTMPE811_Ready(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    status = HAL_I2C_IsDeviceReady(&hI2C3, STMPE811_ADDRESS, 5, DEFAULT_TESTING_TIMEOUT);
 8003286:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <isSTMPE811_Ready+0x2c>)
 8003288:	2205      	movs	r2, #5
 800328a:	2182      	movs	r1, #130	@ 0x82
 800328c:	4808      	ldr	r0, [pc, #32]	@ (80032b0 <isSTMPE811_Ready+0x30>)
 800328e:	f001 fbed 	bl	8004a6c <HAL_I2C_IsDeviceReady>
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK)
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <isSTMPE811_Ready+0x20>
    {
        return false;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <isSTMPE811_Ready+0x22>
    }
    return true;
 80032a0:	2301      	movs	r3, #1
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	0003d090 	.word	0x0003d090
 80032b0:	20025bec 	.word	0x20025bec

080032b4 <enableInterruptSupportForTouch>:

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <enableInterruptSupportForTouch+0x5c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	4a13      	ldr	r2, [pc, #76]	@ (8003310 <enableInterruptSupportForTouch+0x5c>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ca:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <enableInterruptSupportForTouch+0x5c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032e8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80032ee:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f4:	2302      	movs	r3, #2
 80032f6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4805      	ldr	r0, [pc, #20]	@ (8003314 <enableInterruptSupportForTouch+0x60>)
 80032fe:	f000 fc49 	bl	8003b94 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003302:	2028      	movs	r0, #40	@ 0x28
 8003304:	f7ff fe50 	bl	8002fa8 <__NVIC_EnableIRQ>

}
 8003308:	bf00      	nop
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	40020000 	.word	0x40020000

08003318 <verifyHAL_I2C_IS_OKAY>:

#endif


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800331c:	4b04      	ldr	r3, [pc, #16]	@ (8003330 <verifyHAL_I2C_IS_OKAY+0x18>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	20025c40 	.word	0x20025c40

08003334 <I2C3_Init>:

static void I2C3_Init()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	4b18      	ldr	r3, [pc, #96]	@ (80033a0 <I2C3_Init+0x6c>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	4a17      	ldr	r2, [pc, #92]	@ (80033a0 <I2C3_Init+0x6c>)
 8003344:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003348:	6413      	str	r3, [r2, #64]	@ 0x40
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <I2C3_Init+0x6c>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003356:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <I2C3_Init+0x70>)
 8003358:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <I2C3_Init+0x74>)
 800335a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <I2C3_Init+0x70>)
 800335e:	4a13      	ldr	r2, [pc, #76]	@ (80033ac <I2C3_Init+0x78>)
 8003360:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003362:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <I2C3_Init+0x70>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003368:	4b0e      	ldr	r3, [pc, #56]	@ (80033a4 <I2C3_Init+0x70>)
 800336a:	2200      	movs	r2, #0
 800336c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800336e:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <I2C3_Init+0x70>)
 8003370:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003374:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003376:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <I2C3_Init+0x70>)
 8003378:	2200      	movs	r2, #0
 800337a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800337c:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <I2C3_Init+0x70>)
 800337e:	2200      	movs	r2, #0
 8003380:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode?

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8003382:	4808      	ldr	r0, [pc, #32]	@ (80033a4 <I2C3_Init+0x70>)
 8003384:	f000 ff02 	bl	800418c <HAL_I2C_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8003392:	bf00      	nop
 8003394:	e7fd      	b.n	8003392 <I2C3_Init+0x5e>
    }
    return;
 8003396:	bf00      	nop
}
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	20025bec 	.word	0x20025bec
 80033a8:	40005c00 	.word	0x40005c00
 80033ac:	000186a0 	.word	0x000186a0

080033b0 <I2C3_MspInit>:

// GPIO Initializations
static void I2C3_MspInit(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	60da      	str	r2, [r3, #12]
 80033c4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	4b20      	ldr	r3, [pc, #128]	@ (800344c <I2C3_MspInit+0x9c>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	4a1f      	ldr	r2, [pc, #124]	@ (800344c <I2C3_MspInit+0x9c>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d6:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <I2C3_MspInit+0x9c>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	4b19      	ldr	r3, [pc, #100]	@ (800344c <I2C3_MspInit+0x9c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	4a18      	ldr	r2, [pc, #96]	@ (800344c <I2C3_MspInit+0x9c>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f2:	4b16      	ldr	r3, [pc, #88]	@ (800344c <I2C3_MspInit+0x9c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80033fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003402:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003404:	2312      	movs	r3, #18
 8003406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003410:	2304      	movs	r3, #4
 8003412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	4619      	mov	r1, r3
 800341a:	480d      	ldr	r0, [pc, #52]	@ (8003450 <I2C3_MspInit+0xa0>)
 800341c:	f000 fbba 	bl	8003b94 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003424:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003426:	2312      	movs	r3, #18
 8003428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003432:	2304      	movs	r3, #4
 8003434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003436:	f107 030c 	add.w	r3, r7, #12
 800343a:	4619      	mov	r1, r3
 800343c:	4805      	ldr	r0, [pc, #20]	@ (8003454 <I2C3_MspInit+0xa4>)
 800343e:	f000 fba9 	bl	8003b94 <HAL_GPIO_Init>

}
 8003442:	bf00      	nop
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	40020800 	.word	0x40020800
 8003454:	40020000 	.word	0x40020000

08003458 <I2C3_Write>:

// This function should only be used for single BYTE transfers
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af04      	add	r7, sp, #16
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
 8003462:	460b      	mov	r3, r1
 8003464:	717b      	strb	r3, [r7, #5]
 8003466:	4613      	mov	r3, r2
 8003468:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800346a:	793b      	ldrb	r3, [r7, #4]
 800346c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call?
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800346e:	797b      	ldrb	r3, [r7, #5]
 8003470:	b29a      	uxth	r2, r3
 8003472:	88f9      	ldrh	r1, [r7, #6]
 8003474:	4b0a      	ldr	r3, [pc, #40]	@ (80034a0 <I2C3_Write+0x48>)
 8003476:	9302      	str	r3, [sp, #8]
 8003478:	2301      	movs	r3, #1
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	f107 030f 	add.w	r3, r7, #15
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	2301      	movs	r3, #1
 8003484:	4807      	ldr	r0, [pc, #28]	@ (80034a4 <I2C3_Write+0x4c>)
 8003486:	f000 ffc5 	bl	8004414 <HAL_I2C_Mem_Write>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <I2C3_Write+0x50>)
 8003490:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003492:	f7ff ff41 	bl	8003318 <verifyHAL_I2C_IS_OKAY>
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	0003d090 	.word	0x0003d090
 80034a4:	20025bec 	.word	0x20025bec
 80034a8:	20025c40 	.word	0x20025c40

080034ac <I2C3_Read>:

// This function should only be used for single BYTE transfers
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af04      	add	r7, sp, #16
 80034b2:	4603      	mov	r3, r0
 80034b4:	603a      	str	r2, [r7, #0]
 80034b6:	71fb      	strb	r3, [r7, #7]
 80034b8:	460b      	mov	r3, r1
 80034ba:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	b299      	uxth	r1, r3
 80034c0:	79bb      	ldrb	r3, [r7, #6]
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <I2C3_Read+0x40>)
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	2301      	movs	r3, #1
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2301      	movs	r3, #1
 80034d2:	4807      	ldr	r0, [pc, #28]	@ (80034f0 <I2C3_Read+0x44>)
 80034d4:	f001 f898 	bl	8004608 <HAL_I2C_Mem_Read>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <I2C3_Read+0x48>)
 80034de:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80034e0:	f7ff ff1a 	bl	8003318 <verifyHAL_I2C_IS_OKAY>
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	0003d090 	.word	0x0003d090
 80034f0:	20025bec 	.word	0x20025bec
 80034f4:	20025c40 	.word	0x20025c40

080034f8 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af04      	add	r7, sp, #16
 80034fe:	603a      	str	r2, [r7, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
 8003506:	460b      	mov	r3, r1
 8003508:	71bb      	strb	r3, [r7, #6]
 800350a:	4613      	mov	r3, r2
 800350c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	b299      	uxth	r1, r3
 8003512:	79bb      	ldrb	r3, [r7, #6]
 8003514:	b29a      	uxth	r2, r3
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <I2C3_MulitByteRead+0x3c>)
 8003518:	9302      	str	r3, [sp, #8]
 800351a:	88bb      	ldrh	r3, [r7, #4]
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2301      	movs	r3, #1
 8003524:	4804      	ldr	r0, [pc, #16]	@ (8003538 <I2C3_MulitByteRead+0x40>)
 8003526:	f001 f86f 	bl	8004608 <HAL_I2C_Mem_Read>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	0003d090 	.word	0x0003d090
 8003538:	20025bec 	.word	0x20025bec

0800353c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003546:	204d      	movs	r0, #77	@ 0x4d
 8003548:	f7ff fe11 	bl	800316e <STMPE811_Read>
 800354c:	4603      	mov	r3, r0
 800354e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003550:	204e      	movs	r0, #78	@ 0x4e
 8003552:	f7ff fe0c 	bl	800316e <STMPE811_Read>
 8003556:	4603      	mov	r3, r0
 8003558:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800355a:	7a7b      	ldrb	r3, [r7, #9]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	b21a      	sxth	r2, r3
 8003560:	7a3b      	ldrb	r3, [r7, #8]
 8003562:	b21b      	sxth	r3, r3
 8003564:	4313      	orrs	r3, r2
 8003566:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800356c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003570:	4293      	cmp	r3, r2
 8003572:	dc06      	bgt.n	8003582 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003574:	89fb      	ldrh	r3, [r7, #14]
 8003576:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800357a:	330c      	adds	r3, #12
 800357c:	b29b      	uxth	r3, r3
 800357e:	81fb      	strh	r3, [r7, #14]
 8003580:	e005      	b.n	800358e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003582:	89fb      	ldrh	r3, [r7, #14]
 8003584:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003588:	3308      	adds	r3, #8
 800358a:	b29b      	uxth	r3, r3
 800358c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800358e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003592:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <TM_STMPE811_ReadX+0xb8>)
 8003594:	fb82 1203 	smull	r1, r2, r2, r3
 8003598:	441a      	add	r2, r3
 800359a:	10d2      	asrs	r2, r2, #3
 800359c:	17db      	asrs	r3, r3, #31
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80035a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035a6:	2bef      	cmp	r3, #239	@ 0xef
 80035a8:	dd02      	ble.n	80035b0 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80035aa:	23ef      	movs	r3, #239	@ 0xef
 80035ac:	81fb      	strh	r3, [r7, #14]
 80035ae:	e005      	b.n	80035bc <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80035b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da01      	bge.n	80035bc <TM_STMPE811_ReadX+0x80>
        val = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80035bc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	dd05      	ble.n	80035d2 <TM_STMPE811_ReadX+0x96>
 80035c6:	89fa      	ldrh	r2, [r7, #14]
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	e004      	b.n	80035dc <TM_STMPE811_ReadX+0xa0>
 80035d2:	89fb      	ldrh	r3, [r7, #14]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	b29b      	uxth	r3, r3
 80035da:	b21b      	sxth	r3, r3
 80035dc:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80035de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	dd01      	ble.n	80035ea <TM_STMPE811_ReadX+0xae>
        return val;
 80035e6:	89fb      	ldrh	r3, [r7, #14]
 80035e8:	e000      	b.n	80035ec <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80035ea:	88fb      	ldrh	r3, [r7, #6]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	88888889 	.word	0x88888889

080035f8 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003602:	204f      	movs	r0, #79	@ 0x4f
 8003604:	f7ff fdb3 	bl	800316e <STMPE811_Read>
 8003608:	4603      	mov	r3, r0
 800360a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 800360c:	2050      	movs	r0, #80	@ 0x50
 800360e:	f7ff fdae 	bl	800316e <STMPE811_Read>
 8003612:	4603      	mov	r3, r0
 8003614:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003616:	7a7b      	ldrb	r3, [r7, #9]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	b21a      	sxth	r2, r3
 800361c:	7a3b      	ldrb	r3, [r7, #8]
 800361e:	b21b      	sxth	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003624:	89fb      	ldrh	r3, [r7, #14]
 8003626:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800362a:	b29b      	uxth	r3, r3
 800362c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800362e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003632:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <TM_STMPE811_ReadY+0xa0>)
 8003634:	fb82 1203 	smull	r1, r2, r2, r3
 8003638:	1052      	asrs	r2, r2, #1
 800363a:	17db      	asrs	r3, r3, #31
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003640:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003644:	2b00      	cmp	r3, #0
 8003646:	dc02      	bgt.n	800364e <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	81fb      	strh	r3, [r7, #14]
 800364c:	e007      	b.n	800365e <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800364e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003652:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003656:	db02      	blt.n	800365e <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003658:	f240 133f 	movw	r3, #319	@ 0x13f
 800365c:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800365e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	429a      	cmp	r2, r3
 8003666:	dd05      	ble.n	8003674 <TM_STMPE811_ReadY+0x7c>
 8003668:	89fa      	ldrh	r2, [r7, #14]
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	b21b      	sxth	r3, r3
 8003672:	e004      	b.n	800367e <TM_STMPE811_ReadY+0x86>
 8003674:	89fb      	ldrh	r3, [r7, #14]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	b29b      	uxth	r3, r3
 800367c:	b21b      	sxth	r3, r3
 800367e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003680:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003684:	2b04      	cmp	r3, #4
 8003686:	dd01      	ble.n	800368c <TM_STMPE811_ReadY+0x94>
        return val;
 8003688:	89fb      	ldrh	r3, [r7, #14]
 800368a:	e000      	b.n	800368e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 800368c:	88fb      	ldrh	r3, [r7, #6]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	2e8ba2e9 	.word	0x2e8ba2e9

0800369c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a4:	4a14      	ldr	r2, [pc, #80]	@ (80036f8 <_sbrk+0x5c>)
 80036a6:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <_sbrk+0x60>)
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b0:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <_sbrk+0x64>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <_sbrk+0x64>)
 80036ba:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <_sbrk+0x68>)
 80036bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036be:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <_sbrk+0x64>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d207      	bcs.n	80036dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036cc:	f004 fb04 	bl	8007cd8 <__errno>
 80036d0:	4603      	mov	r3, r0
 80036d2:	220c      	movs	r2, #12
 80036d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036da:	e009      	b.n	80036f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036dc:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <_sbrk+0x64>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036e2:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <_sbrk+0x64>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	4a05      	ldr	r2, [pc, #20]	@ (8003700 <_sbrk+0x64>)
 80036ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ee:	68fb      	ldr	r3, [r7, #12]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20030000 	.word	0x20030000
 80036fc:	00000400 	.word	0x00000400
 8003700:	20025c44 	.word	0x20025c44
 8003704:	20025e38 	.word	0x20025e38

08003708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800374c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003718:	f7ff fff6 	bl	8003708 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800371c:	480c      	ldr	r0, [pc, #48]	@ (8003750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800371e:	490d      	ldr	r1, [pc, #52]	@ (8003754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003720:	4a0d      	ldr	r2, [pc, #52]	@ (8003758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003724:	e002      	b.n	800372c <LoopCopyDataInit>

08003726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800372a:	3304      	adds	r3, #4

0800372c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800372c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800372e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003730:	d3f9      	bcc.n	8003726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003734:	4c0a      	ldr	r4, [pc, #40]	@ (8003760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003738:	e001      	b.n	800373e <LoopFillZerobss>

0800373a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800373a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800373c:	3204      	adds	r2, #4

0800373e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800373e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003740:	d3fb      	bcc.n	800373a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003742:	f004 facf 	bl	8007ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003746:	f7ff f956 	bl	80029f6 <main>
  bx  lr    
 800374a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800374c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003754:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003758:	0800bdf8 	.word	0x0800bdf8
  ldr r2, =_sbss
 800375c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003760:	20025e38 	.word	0x20025e38

08003764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003764:	e7fe      	b.n	8003764 <ADC_IRQHandler>
	...

08003768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800376c:	4b0e      	ldr	r3, [pc, #56]	@ (80037a8 <HAL_Init+0x40>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0d      	ldr	r2, [pc, #52]	@ (80037a8 <HAL_Init+0x40>)
 8003772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003778:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <HAL_Init+0x40>)
 800377e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003784:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <HAL_Init+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a07      	ldr	r2, [pc, #28]	@ (80037a8 <HAL_Init+0x40>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800378e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003790:	2003      	movs	r0, #3
 8003792:	f000 f989 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003796:	2000      	movs	r0, #0
 8003798:	f000 f808 	bl	80037ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800379c:	f7ff f984 	bl	8002aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023c00 	.word	0x40023c00

080037ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037b4:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <HAL_InitTick+0x54>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_InitTick+0x58>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	4619      	mov	r1, r3
 80037be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f9af 	bl	8003b2e <HAL_SYSTICK_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00e      	b.n	80037f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d80a      	bhi.n	80037f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037e0:	2200      	movs	r2, #0
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037e8:	f000 f969 	bl	8003abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037ec:	4a06      	ldr	r2, [pc, #24]	@ (8003808 <HAL_InitTick+0x5c>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000018 	.word	0x20000018
 8003804:	20000020 	.word	0x20000020
 8003808:	2000001c 	.word	0x2000001c

0800380c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003810:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <HAL_IncTick+0x1c>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	4b05      	ldr	r3, [pc, #20]	@ (800382c <HAL_IncTick+0x20>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4413      	add	r3, r2
 800381c:	4a03      	ldr	r2, [pc, #12]	@ (800382c <HAL_IncTick+0x20>)
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	20000020 	.word	0x20000020
 800382c:	20025c48 	.word	0x20025c48

08003830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return uwTick;
 8003834:	4b02      	ldr	r3, [pc, #8]	@ (8003840 <HAL_GetTick+0x10>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	20025c48 	.word	0x20025c48

08003844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800384c:	f7ff fff0 	bl	8003830 <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800385c:	d005      	beq.n	800386a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_Delay+0x44>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800386a:	bf00      	nop
 800386c:	f7ff ffe0 	bl	8003830 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	429a      	cmp	r2, r3
 800387a:	d8f7      	bhi.n	800386c <HAL_Delay+0x28>
  {
  }
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000020 	.word	0x20000020

0800388c <__NVIC_SetPriorityGrouping>:
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800389c:	4b0c      	ldr	r3, [pc, #48]	@ (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038a8:	4013      	ands	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038be:	4a04      	ldr	r2, [pc, #16]	@ (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	60d3      	str	r3, [r2, #12]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_GetPriorityGrouping>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d8:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <__NVIC_GetPriorityGrouping+0x18>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	f003 0307 	and.w	r3, r3, #7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_EnableIRQ>:
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db0b      	blt.n	800391a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	f003 021f 	and.w	r2, r3, #31
 8003908:	4906      	ldr	r1, [pc, #24]	@ (8003924 <__NVIC_EnableIRQ+0x34>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2001      	movs	r0, #1
 8003912:	fa00 f202 	lsl.w	r2, r0, r2
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr
 8003924:	e000e100 	.word	0xe000e100

08003928 <__NVIC_DisableIRQ>:
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	2b00      	cmp	r3, #0
 8003938:	db12      	blt.n	8003960 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	490a      	ldr	r1, [pc, #40]	@ (800396c <__NVIC_DisableIRQ+0x44>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2001      	movs	r0, #1
 800394a:	fa00 f202 	lsl.w	r2, r0, r2
 800394e:	3320      	adds	r3, #32
 8003950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003954:	f3bf 8f4f 	dsb	sy
}
 8003958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800395a:	f3bf 8f6f 	isb	sy
}
 800395e:	bf00      	nop
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000e100 	.word	0xe000e100

08003970 <__NVIC_ClearPendingIRQ>:
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	2b00      	cmp	r3, #0
 8003980:	db0c      	blt.n	800399c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	f003 021f 	and.w	r2, r3, #31
 8003988:	4907      	ldr	r1, [pc, #28]	@ (80039a8 <__NVIC_ClearPendingIRQ+0x38>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2001      	movs	r0, #1
 8003992:	fa00 f202 	lsl.w	r2, r0, r2
 8003996:	3360      	adds	r3, #96	@ 0x60
 8003998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	e000e100 	.word	0xe000e100

080039ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db0a      	blt.n	80039d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	490c      	ldr	r1, [pc, #48]	@ (80039f8 <__NVIC_SetPriority+0x4c>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d4:	e00a      	b.n	80039ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4908      	ldr	r1, [pc, #32]	@ (80039fc <__NVIC_SetPriority+0x50>)
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	3b04      	subs	r3, #4
 80039e4:	0112      	lsls	r2, r2, #4
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	440b      	add	r3, r1
 80039ea:	761a      	strb	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000e100 	.word	0xe000e100
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	@ 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f1c3 0307 	rsb	r3, r3, #7
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	bf28      	it	cs
 8003a1e:	2304      	movcs	r3, #4
 8003a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d902      	bls.n	8003a30 <NVIC_EncodePriority+0x30>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3b03      	subs	r3, #3
 8003a2e:	e000      	b.n	8003a32 <NVIC_EncodePriority+0x32>
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	401a      	ands	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	43d9      	mvns	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a58:	4313      	orrs	r3, r2
         );
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3724      	adds	r7, #36	@ 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a74:	d301      	bcc.n	8003a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa4 <SysTick_Config+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a82:	210f      	movs	r1, #15
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a88:	f7ff ff90 	bl	80039ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <SysTick_Config+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	4b04      	ldr	r3, [pc, #16]	@ (8003aa4 <SysTick_Config+0x40>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff feeb 	bl	800388c <__NVIC_SetPriorityGrouping>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad0:	f7ff ff00 	bl	80038d4 <__NVIC_GetPriorityGrouping>
 8003ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff90 	bl	8003a00 <NVIC_EncodePriority>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff5f 	bl	80039ac <__NVIC_SetPriority>
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fef3 	bl	80038f0 <__NVIC_EnableIRQ>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff01 	bl	8003928 <__NVIC_DisableIRQ>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ff94 	bl	8003a64 <SysTick_Config>
 8003b3c:	4603      	mov	r3, r0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff0b 	bl	8003970 <__NVIC_ClearPendingIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2201      	movs	r2, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003b7e:	4a04      	ldr	r2, [pc, #16]	@ (8003b90 <HAL_EXTI_ClearPending+0x2c>)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6153      	str	r3, [r2, #20]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40013c00 	.word	0x40013c00

08003b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	@ 0x24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	e177      	b.n	8003ea0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	f040 8166 	bne.w	8003e9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d005      	beq.n	8003be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d130      	bne.n	8003c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 0201 	and.w	r2, r3, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d017      	beq.n	8003c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	2203      	movs	r2, #3
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d123      	bne.n	8003cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	08da      	lsrs	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3208      	adds	r2, #8
 8003c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	220f      	movs	r2, #15
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	08da      	lsrs	r2, r3, #3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3208      	adds	r2, #8
 8003cd2:	69b9      	ldr	r1, [r7, #24]
 8003cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0203 	and.w	r2, r3, #3
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80c0 	beq.w	8003e9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	4b65      	ldr	r3, [pc, #404]	@ (8003eb4 <HAL_GPIO_Init+0x320>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	4a64      	ldr	r2, [pc, #400]	@ (8003eb4 <HAL_GPIO_Init+0x320>)
 8003d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d2a:	4b62      	ldr	r3, [pc, #392]	@ (8003eb4 <HAL_GPIO_Init+0x320>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d36:	4a60      	ldr	r2, [pc, #384]	@ (8003eb8 <HAL_GPIO_Init+0x324>)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4013      	ands	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a57      	ldr	r2, [pc, #348]	@ (8003ebc <HAL_GPIO_Init+0x328>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d037      	beq.n	8003dd2 <HAL_GPIO_Init+0x23e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a56      	ldr	r2, [pc, #344]	@ (8003ec0 <HAL_GPIO_Init+0x32c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d031      	beq.n	8003dce <HAL_GPIO_Init+0x23a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a55      	ldr	r2, [pc, #340]	@ (8003ec4 <HAL_GPIO_Init+0x330>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d02b      	beq.n	8003dca <HAL_GPIO_Init+0x236>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a54      	ldr	r2, [pc, #336]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d025      	beq.n	8003dc6 <HAL_GPIO_Init+0x232>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a53      	ldr	r2, [pc, #332]	@ (8003ecc <HAL_GPIO_Init+0x338>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01f      	beq.n	8003dc2 <HAL_GPIO_Init+0x22e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a52      	ldr	r2, [pc, #328]	@ (8003ed0 <HAL_GPIO_Init+0x33c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d019      	beq.n	8003dbe <HAL_GPIO_Init+0x22a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a51      	ldr	r2, [pc, #324]	@ (8003ed4 <HAL_GPIO_Init+0x340>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_GPIO_Init+0x226>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a50      	ldr	r2, [pc, #320]	@ (8003ed8 <HAL_GPIO_Init+0x344>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00d      	beq.n	8003db6 <HAL_GPIO_Init+0x222>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8003edc <HAL_GPIO_Init+0x348>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <HAL_GPIO_Init+0x21e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4e      	ldr	r2, [pc, #312]	@ (8003ee0 <HAL_GPIO_Init+0x34c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_GPIO_Init+0x21a>
 8003daa:	2309      	movs	r3, #9
 8003dac:	e012      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003dae:	230a      	movs	r3, #10
 8003db0:	e010      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003db2:	2308      	movs	r3, #8
 8003db4:	e00e      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003db6:	2307      	movs	r3, #7
 8003db8:	e00c      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003dba:	2306      	movs	r3, #6
 8003dbc:	e00a      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003dbe:	2305      	movs	r3, #5
 8003dc0:	e008      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	e006      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e004      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e002      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_GPIO_Init+0x240>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	f002 0203 	and.w	r2, r2, #3
 8003dda:	0092      	lsls	r2, r2, #2
 8003ddc:	4093      	lsls	r3, r2
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de4:	4934      	ldr	r1, [pc, #208]	@ (8003eb8 <HAL_GPIO_Init+0x324>)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3302      	adds	r3, #2
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003df2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ee4 <HAL_GPIO_Init+0x350>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e16:	4a33      	ldr	r2, [pc, #204]	@ (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e1c:	4b31      	ldr	r3, [pc, #196]	@ (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e40:	4a28      	ldr	r2, [pc, #160]	@ (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e46:	4b27      	ldr	r3, [pc, #156]	@ (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e70:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e94:	4a13      	ldr	r2, [pc, #76]	@ (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b0f      	cmp	r3, #15
 8003ea4:	f67f ae84 	bls.w	8003bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	3724      	adds	r7, #36	@ 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40013800 	.word	0x40013800
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	40020400 	.word	0x40020400
 8003ec4:	40020800 	.word	0x40020800
 8003ec8:	40020c00 	.word	0x40020c00
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40021400 	.word	0x40021400
 8003ed4:	40021800 	.word	0x40021800
 8003ed8:	40021c00 	.word	0x40021c00
 8003edc:	40022000 	.word	0x40022000
 8003ee0:	40022400 	.word	0x40022400
 8003ee4:	40013c00 	.word	0x40013c00

08003ee8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	e0d9      	b.n	80040b8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f04:	2201      	movs	r2, #1
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	f040 80c9 	bne.w	80040b2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f20:	4a6a      	ldr	r2, [pc, #424]	@ (80040cc <HAL_GPIO_DeInit+0x1e4>)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	089b      	lsrs	r3, r3, #2
 8003f26:	3302      	adds	r3, #2
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	220f      	movs	r2, #15
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a62      	ldr	r2, [pc, #392]	@ (80040d0 <HAL_GPIO_DeInit+0x1e8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d037      	beq.n	8003fba <HAL_GPIO_DeInit+0xd2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a61      	ldr	r2, [pc, #388]	@ (80040d4 <HAL_GPIO_DeInit+0x1ec>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_GPIO_DeInit+0xce>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a60      	ldr	r2, [pc, #384]	@ (80040d8 <HAL_GPIO_DeInit+0x1f0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02b      	beq.n	8003fb2 <HAL_GPIO_DeInit+0xca>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a5f      	ldr	r2, [pc, #380]	@ (80040dc <HAL_GPIO_DeInit+0x1f4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d025      	beq.n	8003fae <HAL_GPIO_DeInit+0xc6>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a5e      	ldr	r2, [pc, #376]	@ (80040e0 <HAL_GPIO_DeInit+0x1f8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01f      	beq.n	8003faa <HAL_GPIO_DeInit+0xc2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80040e4 <HAL_GPIO_DeInit+0x1fc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d019      	beq.n	8003fa6 <HAL_GPIO_DeInit+0xbe>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a5c      	ldr	r2, [pc, #368]	@ (80040e8 <HAL_GPIO_DeInit+0x200>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_GPIO_DeInit+0xba>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a5b      	ldr	r2, [pc, #364]	@ (80040ec <HAL_GPIO_DeInit+0x204>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00d      	beq.n	8003f9e <HAL_GPIO_DeInit+0xb6>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a5a      	ldr	r2, [pc, #360]	@ (80040f0 <HAL_GPIO_DeInit+0x208>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <HAL_GPIO_DeInit+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a59      	ldr	r2, [pc, #356]	@ (80040f4 <HAL_GPIO_DeInit+0x20c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_GPIO_DeInit+0xae>
 8003f92:	2309      	movs	r3, #9
 8003f94:	e012      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003f96:	230a      	movs	r3, #10
 8003f98:	e010      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	e00e      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	e00c      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003fa2:	2306      	movs	r3, #6
 8003fa4:	e00a      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003fa6:	2305      	movs	r3, #5
 8003fa8:	e008      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003faa:	2304      	movs	r3, #4
 8003fac:	e006      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e004      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_GPIO_DeInit+0xd4>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	f002 0203 	and.w	r2, r2, #3
 8003fc2:	0092      	lsls	r2, r2, #2
 8003fc4:	4093      	lsls	r3, r2
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d132      	bne.n	8004032 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80040f8 <HAL_GPIO_DeInit+0x210>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	4948      	ldr	r1, [pc, #288]	@ (80040f8 <HAL_GPIO_DeInit+0x210>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003fda:	4b47      	ldr	r3, [pc, #284]	@ (80040f8 <HAL_GPIO_DeInit+0x210>)
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	4945      	ldr	r1, [pc, #276]	@ (80040f8 <HAL_GPIO_DeInit+0x210>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003fe8:	4b43      	ldr	r3, [pc, #268]	@ (80040f8 <HAL_GPIO_DeInit+0x210>)
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	4941      	ldr	r1, [pc, #260]	@ (80040f8 <HAL_GPIO_DeInit+0x210>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ff6:	4b40      	ldr	r3, [pc, #256]	@ (80040f8 <HAL_GPIO_DeInit+0x210>)
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	493e      	ldr	r1, [pc, #248]	@ (80040f8 <HAL_GPIO_DeInit+0x210>)
 8004000:	4013      	ands	r3, r2
 8004002:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	220f      	movs	r2, #15
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004014:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <HAL_GPIO_DeInit+0x1e4>)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	3302      	adds	r3, #2
 800401c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	43da      	mvns	r2, r3
 8004024:	4829      	ldr	r0, [pc, #164]	@ (80040cc <HAL_GPIO_DeInit+0x1e4>)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	400a      	ands	r2, r1
 800402c:	3302      	adds	r3, #2
 800402e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	2103      	movs	r1, #3
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	401a      	ands	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	220f      	movs	r2, #15
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	08d2      	lsrs	r2, r2, #3
 8004068:	4019      	ands	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3208      	adds	r2, #8
 800406e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	2103      	movs	r1, #3
 800407c:	fa01 f303 	lsl.w	r3, r1, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	401a      	ands	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	2101      	movs	r1, #1
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	fa01 f303 	lsl.w	r3, r1, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	401a      	ands	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2103      	movs	r1, #3
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	401a      	ands	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	3301      	adds	r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b0f      	cmp	r3, #15
 80040bc:	f67f af22 	bls.w	8003f04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40020000 	.word	0x40020000
 80040d4:	40020400 	.word	0x40020400
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40020c00 	.word	0x40020c00
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40021400 	.word	0x40021400
 80040e8:	40021800 	.word	0x40021800
 80040ec:	40021c00 	.word	0x40021c00
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40022400 	.word	0x40022400
 80040f8:	40013c00 	.word	0x40013c00

080040fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	887b      	ldrh	r3, [r7, #2]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	e001      	b.n	800411e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	807b      	strh	r3, [r7, #2]
 8004136:	4613      	mov	r3, r2
 8004138:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800413a:	787b      	ldrb	r3, [r7, #1]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004140:	887a      	ldrh	r2, [r7, #2]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004146:	e003      	b.n	8004150 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	041a      	lsls	r2, r3, #16
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	619a      	str	r2, [r3, #24]
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800416c:	887a      	ldrh	r2, [r7, #2]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4013      	ands	r3, r2
 8004172:	041a      	lsls	r2, r3, #16
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	43d9      	mvns	r1, r3
 8004178:	887b      	ldrh	r3, [r7, #2]
 800417a:	400b      	ands	r3, r1
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	619a      	str	r2, [r3, #24]
}
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e12b      	b.n	80043f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fe fca0 	bl	8002af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	@ 0x24
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f0:	f002 f836 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4a81      	ldr	r2, [pc, #516]	@ (8004400 <HAL_I2C_Init+0x274>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d807      	bhi.n	8004210 <HAL_I2C_Init+0x84>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a80      	ldr	r2, [pc, #512]	@ (8004404 <HAL_I2C_Init+0x278>)
 8004204:	4293      	cmp	r3, r2
 8004206:	bf94      	ite	ls
 8004208:	2301      	movls	r3, #1
 800420a:	2300      	movhi	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e006      	b.n	800421e <HAL_I2C_Init+0x92>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a7d      	ldr	r2, [pc, #500]	@ (8004408 <HAL_I2C_Init+0x27c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	bf94      	ite	ls
 8004218:	2301      	movls	r3, #1
 800421a:	2300      	movhi	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0e7      	b.n	80043f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a78      	ldr	r2, [pc, #480]	@ (800440c <HAL_I2C_Init+0x280>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0c9b      	lsrs	r3, r3, #18
 8004230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a6a      	ldr	r2, [pc, #424]	@ (8004400 <HAL_I2C_Init+0x274>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d802      	bhi.n	8004260 <HAL_I2C_Init+0xd4>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3301      	adds	r3, #1
 800425e:	e009      	b.n	8004274 <HAL_I2C_Init+0xe8>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4a69      	ldr	r2, [pc, #420]	@ (8004410 <HAL_I2C_Init+0x284>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	099b      	lsrs	r3, r3, #6
 8004272:	3301      	adds	r3, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004286:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	495c      	ldr	r1, [pc, #368]	@ (8004400 <HAL_I2C_Init+0x274>)
 8004290:	428b      	cmp	r3, r1
 8004292:	d819      	bhi.n	80042c8 <HAL_I2C_Init+0x13c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1e59      	subs	r1, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a2:	1c59      	adds	r1, r3, #1
 80042a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042a8:	400b      	ands	r3, r1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_I2C_Init+0x138>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1e59      	subs	r1, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c2:	e051      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 80042c4:	2304      	movs	r3, #4
 80042c6:	e04f      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d111      	bne.n	80042f4 <HAL_I2C_Init+0x168>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1e58      	subs	r0, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	440b      	add	r3, r1
 80042de:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e2:	3301      	adds	r3, #1
 80042e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e012      	b.n	800431a <HAL_I2C_Init+0x18e>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e58      	subs	r0, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	0099      	lsls	r1, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	fbb0 f3f3 	udiv	r3, r0, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Init+0x196>
 800431e:	2301      	movs	r3, #1
 8004320:	e022      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10e      	bne.n	8004348 <HAL_I2C_Init+0x1bc>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1e58      	subs	r0, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	440b      	add	r3, r1
 8004338:	fbb0 f3f3 	udiv	r3, r0, r3
 800433c:	3301      	adds	r3, #1
 800433e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004346:	e00f      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e58      	subs	r0, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	0099      	lsls	r1, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	fbb0 f3f3 	udiv	r3, r0, r3
 800435e:	3301      	adds	r3, #1
 8004360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004364:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	6809      	ldr	r1, [r1, #0]
 800436c:	4313      	orrs	r3, r2
 800436e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004396:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6911      	ldr	r1, [r2, #16]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68d2      	ldr	r2, [r2, #12]
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	000186a0 	.word	0x000186a0
 8004404:	001e847f 	.word	0x001e847f
 8004408:	003d08ff 	.word	0x003d08ff
 800440c:	431bde83 	.word	0x431bde83
 8004410:	10624dd3 	.word	0x10624dd3

08004414 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	4608      	mov	r0, r1
 800441e:	4611      	mov	r1, r2
 8004420:	461a      	mov	r2, r3
 8004422:	4603      	mov	r3, r0
 8004424:	817b      	strh	r3, [r7, #10]
 8004426:	460b      	mov	r3, r1
 8004428:	813b      	strh	r3, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800442e:	f7ff f9ff 	bl	8003830 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b20      	cmp	r3, #32
 800443e:	f040 80d9 	bne.w	80045f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	2319      	movs	r3, #25
 8004448:	2201      	movs	r2, #1
 800444a:	496d      	ldr	r1, [pc, #436]	@ (8004600 <HAL_I2C_Mem_Write+0x1ec>)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fdb9 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
 800445a:	e0cc      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_I2C_Mem_Write+0x56>
 8004466:	2302      	movs	r3, #2
 8004468:	e0c5      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d007      	beq.n	8004490 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800449e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2221      	movs	r2, #33	@ 0x21
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2240      	movs	r2, #64	@ 0x40
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004604 <HAL_I2C_Mem_Write+0x1f0>)
 80044d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044d2:	88f8      	ldrh	r0, [r7, #6]
 80044d4:	893a      	ldrh	r2, [r7, #8]
 80044d6:	8979      	ldrh	r1, [r7, #10]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	4603      	mov	r3, r0
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fbf0 	bl	8004cc8 <I2C_RequestMemoryWrite>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d052      	beq.n	8004594 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e081      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fe7e 	bl	80051f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	2b04      	cmp	r3, #4
 8004508:	d107      	bne.n	800451a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e06b      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b04      	cmp	r3, #4
 800455a:	d11b      	bne.n	8004594 <HAL_I2C_Mem_Write+0x180>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d017      	beq.n	8004594 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1aa      	bne.n	80044f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fe71 	bl	8005288 <I2C_WaitOnBTFFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00d      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d107      	bne.n	80045c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e016      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	00100002 	.word	0x00100002
 8004604:	ffff0000 	.word	0xffff0000

08004608 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	@ 0x30
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	461a      	mov	r2, r3
 8004616:	4603      	mov	r3, r0
 8004618:	817b      	strh	r3, [r7, #10]
 800461a:	460b      	mov	r3, r1
 800461c:	813b      	strh	r3, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004622:	f7ff f905 	bl	8003830 <HAL_GetTick>
 8004626:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b20      	cmp	r3, #32
 8004632:	f040 8214 	bne.w	8004a5e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2319      	movs	r3, #25
 800463c:	2201      	movs	r2, #1
 800463e:	497b      	ldr	r1, [pc, #492]	@ (800482c <HAL_I2C_Mem_Read+0x224>)
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fcbf 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
 800464e:	e207      	b.n	8004a60 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_I2C_Mem_Read+0x56>
 800465a:	2302      	movs	r3, #2
 800465c:	e200      	b.n	8004a60 <HAL_I2C_Mem_Read+0x458>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d007      	beq.n	8004684 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2222      	movs	r2, #34	@ 0x22
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2240      	movs	r2, #64	@ 0x40
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80046b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004830 <HAL_I2C_Mem_Read+0x228>)
 80046c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046c6:	88f8      	ldrh	r0, [r7, #6]
 80046c8:	893a      	ldrh	r2, [r7, #8]
 80046ca:	8979      	ldrh	r1, [r7, #10]
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4603      	mov	r3, r0
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fb8c 	bl	8004df4 <I2C_RequestMemoryRead>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e1bc      	b.n	8004a60 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d113      	bne.n	8004716 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ee:	2300      	movs	r3, #0
 80046f0:	623b      	str	r3, [r7, #32]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e190      	b.n	8004a38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471a:	2b01      	cmp	r3, #1
 800471c:	d11b      	bne.n	8004756 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e170      	b.n	8004a38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475a:	2b02      	cmp	r3, #2
 800475c:	d11b      	bne.n	8004796 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800477c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	e150      	b.n	8004a38 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047ac:	e144      	b.n	8004a38 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	f200 80f1 	bhi.w	800499a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d123      	bne.n	8004808 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fda7 	bl	8005318 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e145      	b.n	8004a60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004806:	e117      	b.n	8004a38 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480c:	2b02      	cmp	r3, #2
 800480e:	d14e      	bne.n	80048ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004816:	2200      	movs	r2, #0
 8004818:	4906      	ldr	r1, [pc, #24]	@ (8004834 <HAL_I2C_Mem_Read+0x22c>)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fbd2 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e11a      	b.n	8004a60 <HAL_I2C_Mem_Read+0x458>
 800482a:	bf00      	nop
 800482c:	00100002 	.word	0x00100002
 8004830:	ffff0000 	.word	0xffff0000
 8004834:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048ac:	e0c4      	b.n	8004a38 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b4:	2200      	movs	r2, #0
 80048b6:	496c      	ldr	r1, [pc, #432]	@ (8004a68 <HAL_I2C_Mem_Read+0x460>)
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fb83 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0cb      	b.n	8004a60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004910:	2200      	movs	r2, #0
 8004912:	4955      	ldr	r1, [pc, #340]	@ (8004a68 <HAL_I2C_Mem_Read+0x460>)
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fb55 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e09d      	b.n	8004a60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004998:	e04e      	b.n	8004a38 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fcba 	bl	8005318 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e058      	b.n	8004a60 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d124      	bne.n	8004a38 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d107      	bne.n	8004a06 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a04:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f aeb6 	bne.w	80047ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e000      	b.n	8004a60 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
  }
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3728      	adds	r7, #40	@ 0x28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	00010004 	.word	0x00010004

08004a6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	@ 0x28
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004a7c:	f7fe fed8 	bl	8003830 <HAL_GetTick>
 8004a80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	f040 8111 	bne.w	8004cb6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2319      	movs	r3, #25
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4988      	ldr	r1, [pc, #544]	@ (8004cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fa90 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e104      	b.n	8004cb8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_I2C_IsDeviceReady+0x50>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e0fd      	b.n	8004cb8 <HAL_I2C_IsDeviceReady+0x24c>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d007      	beq.n	8004ae2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2224      	movs	r2, #36	@ 0x24
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a70      	ldr	r2, [pc, #448]	@ (8004cc4 <HAL_I2C_IsDeviceReady+0x258>)
 8004b04:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fa4e 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b3c:	d103      	bne.n	8004b46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b44:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e0b6      	b.n	8004cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b4a:	897b      	ldrh	r3, [r7, #10]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004b5a:	f7fe fe69 	bl	8003830 <HAL_GetTick>
 8004b5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b8e:	e025      	b.n	8004bdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b90:	f7fe fe4e 	bl	8003830 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <HAL_I2C_IsDeviceReady+0x13a>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	22a0      	movs	r2, #160	@ 0xa0
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2ba0      	cmp	r3, #160	@ 0xa0
 8004be6:	d005      	beq.n	8004bf4 <HAL_I2C_IsDeviceReady+0x188>
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <HAL_I2C_IsDeviceReady+0x188>
 8004bee:	7dbb      	ldrb	r3, [r7, #22]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0cd      	beq.n	8004b90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d129      	bne.n	8004c5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2319      	movs	r3, #25
 8004c36:	2201      	movs	r2, #1
 8004c38:	4921      	ldr	r1, [pc, #132]	@ (8004cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f9c2 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e036      	b.n	8004cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e02c      	b.n	8004cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	2319      	movs	r3, #25
 8004c7e:	2201      	movs	r2, #1
 8004c80:	490f      	ldr	r1, [pc, #60]	@ (8004cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f99e 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e012      	b.n	8004cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3301      	adds	r3, #1
 8004c96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	f4ff af32 	bcc.w	8004b06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
  }
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	00100002 	.word	0x00100002
 8004cc4:	ffff0000 	.word	0xffff0000

08004cc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	817b      	strh	r3, [r7, #10]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	813b      	strh	r3, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f960 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d18:	d103      	bne.n	8004d22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e05f      	b.n	8004de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d26:	897b      	ldrh	r3, [r7, #10]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	6a3a      	ldr	r2, [r7, #32]
 8004d3a:	492d      	ldr	r1, [pc, #180]	@ (8004df0 <I2C_RequestMemoryWrite+0x128>)
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f9bb 	bl	80050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e04c      	b.n	8004de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d64:	6a39      	ldr	r1, [r7, #32]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa46 	bl	80051f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00d      	beq.n	8004d8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d107      	bne.n	8004d8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e02b      	b.n	8004de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d105      	bne.n	8004da0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d94:	893b      	ldrh	r3, [r7, #8]
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	611a      	str	r2, [r3, #16]
 8004d9e:	e021      	b.n	8004de4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004da0:	893b      	ldrh	r3, [r7, #8]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db0:	6a39      	ldr	r1, [r7, #32]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fa20 	bl	80051f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d107      	bne.n	8004dd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e005      	b.n	8004de6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dda:	893b      	ldrh	r3, [r7, #8]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	00010002 	.word	0x00010002

08004df4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	461a      	mov	r2, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	817b      	strh	r3, [r7, #10]
 8004e06:	460b      	mov	r3, r1
 8004e08:	813b      	strh	r3, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f8c2 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00d      	beq.n	8004e62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e54:	d103      	bne.n	8004e5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e0aa      	b.n	8004fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e62:	897b      	ldrh	r3, [r7, #10]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	4952      	ldr	r1, [pc, #328]	@ (8004fc0 <I2C_RequestMemoryRead+0x1cc>)
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f91d 	bl	80050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e097      	b.n	8004fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea0:	6a39      	ldr	r1, [r7, #32]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f9a8 	bl	80051f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d107      	bne.n	8004ec6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e076      	b.n	8004fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed0:	893b      	ldrh	r3, [r7, #8]
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	611a      	str	r2, [r3, #16]
 8004eda:	e021      	b.n	8004f20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004edc:	893b      	ldrh	r3, [r7, #8]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eec:	6a39      	ldr	r1, [r7, #32]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f982 	bl	80051f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00d      	beq.n	8004f16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d107      	bne.n	8004f12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e050      	b.n	8004fb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f16:	893b      	ldrh	r3, [r7, #8]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f22:	6a39      	ldr	r1, [r7, #32]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f967 	bl	80051f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00d      	beq.n	8004f4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d107      	bne.n	8004f48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e035      	b.n	8004fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f82b 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00d      	beq.n	8004f90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f82:	d103      	bne.n	8004f8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e013      	b.n	8004fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f90:	897b      	ldrh	r3, [r7, #10]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	6a3a      	ldr	r2, [r7, #32]
 8004fa4:	4906      	ldr	r1, [pc, #24]	@ (8004fc0 <I2C_RequestMemoryRead+0x1cc>)
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f886 	bl	80050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	00010002 	.word	0x00010002

08004fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fd4:	e048      	b.n	8005068 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fdc:	d044      	beq.n	8005068 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fe fc27 	bl	8003830 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d139      	bne.n	8005068 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	0c1b      	lsrs	r3, r3, #16
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d10d      	bne.n	800501a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	43da      	mvns	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4013      	ands	r3, r2
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	e00c      	b.n	8005034 <I2C_WaitOnFlagUntilTimeout+0x70>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	43da      	mvns	r2, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4013      	ands	r3, r2
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	bf0c      	ite	eq
 800502c:	2301      	moveq	r3, #1
 800502e:	2300      	movne	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	429a      	cmp	r2, r3
 8005038:	d116      	bne.n	8005068 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	f043 0220 	orr.w	r2, r3, #32
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e023      	b.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d10d      	bne.n	800508e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	43da      	mvns	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4013      	ands	r3, r2
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	e00c      	b.n	80050a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	43da      	mvns	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4013      	ands	r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d093      	beq.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050c6:	e071      	b.n	80051ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d6:	d123      	bne.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	f043 0204 	orr.w	r2, r3, #4
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e067      	b.n	80051f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005126:	d041      	beq.n	80051ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005128:	f7fe fb82 	bl	8003830 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	429a      	cmp	r2, r3
 8005136:	d302      	bcc.n	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d136      	bne.n	80051ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d10c      	bne.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	43da      	mvns	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4013      	ands	r3, r2
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	bf14      	ite	ne
 800515a:	2301      	movne	r3, #1
 800515c:	2300      	moveq	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	e00b      	b.n	800517a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	43da      	mvns	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e021      	b.n	80051f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d10c      	bne.n	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	43da      	mvns	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4013      	ands	r3, r2
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	e00b      	b.n	80051e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	43da      	mvns	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4013      	ands	r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f47f af6d 	bne.w	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005204:	e034      	b.n	8005270 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f8e3 	bl	80053d2 <I2C_IsAcknowledgeFailed>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e034      	b.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800521c:	d028      	beq.n	8005270 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521e:	f7fe fb07 	bl	8003830 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11d      	bne.n	8005270 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523e:	2b80      	cmp	r3, #128	@ 0x80
 8005240:	d016      	beq.n	8005270 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e007      	b.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527a:	2b80      	cmp	r3, #128	@ 0x80
 800527c:	d1c3      	bne.n	8005206 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005294:	e034      	b.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f89b 	bl	80053d2 <I2C_IsAcknowledgeFailed>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e034      	b.n	8005310 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052ac:	d028      	beq.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ae:	f7fe fabf 	bl	8003830 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d302      	bcc.n	80052c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d11d      	bne.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d016      	beq.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	f043 0220 	orr.w	r2, r3, #32
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e007      	b.n	8005310 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d1c3      	bne.n	8005296 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005324:	e049      	b.n	80053ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b10      	cmp	r3, #16
 8005332:	d119      	bne.n	8005368 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0210 	mvn.w	r2, #16
 800533c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e030      	b.n	80053ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005368:	f7fe fa62 	bl	8003830 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	d302      	bcc.n	800537e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11d      	bne.n	80053ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005388:	2b40      	cmp	r3, #64	@ 0x40
 800538a:	d016      	beq.n	80053ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	f043 0220 	orr.w	r2, r3, #32
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e007      	b.n	80053ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b40      	cmp	r3, #64	@ 0x40
 80053c6:	d1ae      	bne.n	8005326 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e8:	d11b      	bne.n	8005422 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f043 0204 	orr.w	r2, r3, #4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr
	...

08005430 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0bf      	b.n	80055c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fd fbb8 	bl	8002bcc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005472:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005488:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b4a      	ldr	r3, [pc, #296]	@ (80055cc <HAL_LTDC_Init+0x19c>)
 80054a4:	400b      	ands	r3, r1
 80054a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68d9      	ldr	r1, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b3e      	ldr	r3, [pc, #248]	@ (80055cc <HAL_LTDC_Init+0x19c>)
 80054d2:	400b      	ands	r3, r1
 80054d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68d9      	ldr	r1, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6919      	ldr	r1, [r3, #16]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b33      	ldr	r3, [pc, #204]	@ (80055cc <HAL_LTDC_Init+0x19c>)
 8005500:	400b      	ands	r3, r1
 8005502:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6919      	ldr	r1, [r3, #16]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6959      	ldr	r1, [r3, #20]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b27      	ldr	r3, [pc, #156]	@ (80055cc <HAL_LTDC_Init+0x19c>)
 800552e:	400b      	ands	r3, r1
 8005530:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	041b      	lsls	r3, r3, #16
 8005538:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6959      	ldr	r1, [r3, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0206 	orr.w	r2, r2, #6
 800559e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	f000f800 	.word	0xf000f800

080055d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_LTDC_ConfigLayer+0x1a>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e02c      	b.n	8005644 <HAL_LTDC_ConfigLayer+0x74>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2134      	movs	r1, #52	@ 0x34
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	4413      	add	r3, r2
 8005606:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800561a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f811 	bl	800564c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2201      	movs	r2, #1
 8005630:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bdb0      	pop	{r4, r5, r7, pc}

0800564c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800564c:	b480      	push	{r7}
 800564e:	b089      	sub	sp, #36	@ 0x24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	0c1b      	lsrs	r3, r3, #16
 8005664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005668:	4413      	add	r3, r2
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	01db      	lsls	r3, r3, #7
 8005678:	4413      	add	r3, r2
 800567a:	3384      	adds	r3, #132	@ 0x84
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	4611      	mov	r1, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	01d2      	lsls	r2, r2, #7
 8005688:	440a      	add	r2, r1
 800568a:	3284      	adds	r2, #132	@ 0x84
 800568c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005690:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4619      	mov	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	01db      	lsls	r3, r3, #7
 80056b0:	440b      	add	r3, r1
 80056b2:	3384      	adds	r3, #132	@ 0x84
 80056b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ca:	4413      	add	r3, r2
 80056cc:	041b      	lsls	r3, r3, #16
 80056ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	01db      	lsls	r3, r3, #7
 80056da:	4413      	add	r3, r2
 80056dc:	3384      	adds	r3, #132	@ 0x84
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	4611      	mov	r1, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	01d2      	lsls	r2, r2, #7
 80056ea:	440a      	add	r2, r1
 80056ec:	3284      	adds	r2, #132	@ 0x84
 80056ee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80056f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005702:	4413      	add	r3, r2
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4619      	mov	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	01db      	lsls	r3, r3, #7
 8005710:	440b      	add	r3, r1
 8005712:	3384      	adds	r3, #132	@ 0x84
 8005714:	4619      	mov	r1, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4313      	orrs	r3, r2
 800571a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	01db      	lsls	r3, r3, #7
 8005726:	4413      	add	r3, r2
 8005728:	3384      	adds	r3, #132	@ 0x84
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	4611      	mov	r1, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	01d2      	lsls	r2, r2, #7
 8005736:	440a      	add	r2, r1
 8005738:	3284      	adds	r2, #132	@ 0x84
 800573a:	f023 0307 	bic.w	r3, r3, #7
 800573e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	01db      	lsls	r3, r3, #7
 800574a:	4413      	add	r3, r2
 800574c:	3384      	adds	r3, #132	@ 0x84
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005766:	041b      	lsls	r3, r3, #16
 8005768:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	01db      	lsls	r3, r3, #7
 800577c:	4413      	add	r3, r2
 800577e:	3384      	adds	r3, #132	@ 0x84
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	01db      	lsls	r3, r3, #7
 800578c:	4413      	add	r3, r2
 800578e:	3384      	adds	r3, #132	@ 0x84
 8005790:	461a      	mov	r2, r3
 8005792:	2300      	movs	r3, #0
 8005794:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800579c:	461a      	mov	r2, r3
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4619      	mov	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	01db      	lsls	r3, r3, #7
 80057b0:	440b      	add	r3, r1
 80057b2:	3384      	adds	r3, #132	@ 0x84
 80057b4:	4619      	mov	r1, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	01db      	lsls	r3, r3, #7
 80057c6:	4413      	add	r3, r2
 80057c8:	3384      	adds	r3, #132	@ 0x84
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	4611      	mov	r1, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	01d2      	lsls	r2, r2, #7
 80057d6:	440a      	add	r2, r1
 80057d8:	3284      	adds	r2, #132	@ 0x84
 80057da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	01db      	lsls	r3, r3, #7
 80057ea:	4413      	add	r3, r2
 80057ec:	3384      	adds	r3, #132	@ 0x84
 80057ee:	461a      	mov	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	01db      	lsls	r3, r3, #7
 8005800:	4413      	add	r3, r2
 8005802:	3384      	adds	r3, #132	@ 0x84
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	6812      	ldr	r2, [r2, #0]
 800580a:	4611      	mov	r1, r2
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	01d2      	lsls	r2, r2, #7
 8005810:	440a      	add	r2, r1
 8005812:	3284      	adds	r2, #132	@ 0x84
 8005814:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005818:	f023 0307 	bic.w	r3, r3, #7
 800581c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	68f9      	ldr	r1, [r7, #12]
 8005828:	6809      	ldr	r1, [r1, #0]
 800582a:	4608      	mov	r0, r1
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	01c9      	lsls	r1, r1, #7
 8005830:	4401      	add	r1, r0
 8005832:	3184      	adds	r1, #132	@ 0x84
 8005834:	4313      	orrs	r3, r2
 8005836:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	01db      	lsls	r3, r3, #7
 8005842:	4413      	add	r3, r2
 8005844:	3384      	adds	r3, #132	@ 0x84
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	01db      	lsls	r3, r3, #7
 8005852:	4413      	add	r3, r2
 8005854:	3384      	adds	r3, #132	@ 0x84
 8005856:	461a      	mov	r2, r3
 8005858:	2300      	movs	r3, #0
 800585a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	01db      	lsls	r3, r3, #7
 8005866:	4413      	add	r3, r2
 8005868:	3384      	adds	r3, #132	@ 0x84
 800586a:	461a      	mov	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d102      	bne.n	8005880 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800587a:	2304      	movs	r3, #4
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	e01b      	b.n	80058b8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d102      	bne.n	800588e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005888:	2303      	movs	r3, #3
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	e014      	b.n	80058b8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d00b      	beq.n	80058ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800589a:	2b02      	cmp	r3, #2
 800589c:	d007      	beq.n	80058ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d003      	beq.n	80058ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058aa:	2b07      	cmp	r3, #7
 80058ac:	d102      	bne.n	80058b4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80058ae:	2302      	movs	r3, #2
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	e001      	b.n	80058b8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80058b4:	2301      	movs	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	01db      	lsls	r3, r3, #7
 80058c2:	4413      	add	r3, r2
 80058c4:	3384      	adds	r3, #132	@ 0x84
 80058c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	4611      	mov	r1, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	01d2      	lsls	r2, r2, #7
 80058d2:	440a      	add	r2, r1
 80058d4:	3284      	adds	r2, #132	@ 0x84
 80058d6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80058da:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	6859      	ldr	r1, [r3, #4]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	1acb      	subs	r3, r1, r3
 80058f2:	69f9      	ldr	r1, [r7, #28]
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80058fa:	68f9      	ldr	r1, [r7, #12]
 80058fc:	6809      	ldr	r1, [r1, #0]
 80058fe:	4608      	mov	r0, r1
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	01c9      	lsls	r1, r1, #7
 8005904:	4401      	add	r1, r0
 8005906:	3184      	adds	r1, #132	@ 0x84
 8005908:	4313      	orrs	r3, r2
 800590a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	01db      	lsls	r3, r3, #7
 8005916:	4413      	add	r3, r2
 8005918:	3384      	adds	r3, #132	@ 0x84
 800591a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	4611      	mov	r1, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	01d2      	lsls	r2, r2, #7
 8005926:	440a      	add	r2, r1
 8005928:	3284      	adds	r2, #132	@ 0x84
 800592a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800592e:	f023 0307 	bic.w	r3, r3, #7
 8005932:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	01db      	lsls	r3, r3, #7
 800593e:	4413      	add	r3, r2
 8005940:	3384      	adds	r3, #132	@ 0x84
 8005942:	461a      	mov	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	01db      	lsls	r3, r3, #7
 8005954:	4413      	add	r3, r2
 8005956:	3384      	adds	r3, #132	@ 0x84
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	4611      	mov	r1, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	01d2      	lsls	r2, r2, #7
 8005964:	440a      	add	r2, r1
 8005966:	3284      	adds	r2, #132	@ 0x84
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	6013      	str	r3, [r2, #0]
}
 800596e:	bf00      	nop
 8005970:	3724      	adds	r7, #36	@ 0x24
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e267      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d075      	beq.n	8005a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005996:	4b88      	ldr	r3, [pc, #544]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d00c      	beq.n	80059bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059a2:	4b85      	ldr	r3, [pc, #532]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d112      	bne.n	80059d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ae:	4b82      	ldr	r3, [pc, #520]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059ba:	d10b      	bne.n	80059d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059bc:	4b7e      	ldr	r3, [pc, #504]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05b      	beq.n	8005a80 <HAL_RCC_OscConfig+0x108>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d157      	bne.n	8005a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e242      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059dc:	d106      	bne.n	80059ec <HAL_RCC_OscConfig+0x74>
 80059de:	4b76      	ldr	r3, [pc, #472]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a75      	ldr	r2, [pc, #468]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e01d      	b.n	8005a28 <HAL_RCC_OscConfig+0xb0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCC_OscConfig+0x98>
 80059f6:	4b70      	ldr	r3, [pc, #448]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a6f      	ldr	r2, [pc, #444]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4b6d      	ldr	r3, [pc, #436]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a6c      	ldr	r2, [pc, #432]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCC_OscConfig+0xb0>
 8005a10:	4b69      	ldr	r3, [pc, #420]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a68      	ldr	r2, [pc, #416]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	4b66      	ldr	r3, [pc, #408]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a65      	ldr	r2, [pc, #404]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d013      	beq.n	8005a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a30:	f7fd fefe 	bl	8003830 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a38:	f7fd fefa 	bl	8003830 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b64      	cmp	r3, #100	@ 0x64
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e207      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0xc0>
 8005a56:	e014      	b.n	8005a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fd feea 	bl	8003830 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a60:	f7fd fee6 	bl	8003830 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	@ 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e1f3      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a72:	4b51      	ldr	r3, [pc, #324]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0xe8>
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d063      	beq.n	8005b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a9a:	4b47      	ldr	r3, [pc, #284]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d11c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa6:	4b44      	ldr	r3, [pc, #272]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d116      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	4b41      	ldr	r3, [pc, #260]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_RCC_OscConfig+0x152>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d001      	beq.n	8005aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e1c7      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aca:	4b3b      	ldr	r3, [pc, #236]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4937      	ldr	r1, [pc, #220]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ade:	e03a      	b.n	8005b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ae8:	4b34      	ldr	r3, [pc, #208]	@ (8005bbc <HAL_RCC_OscConfig+0x244>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aee:	f7fd fe9f 	bl	8003830 <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005af6:	f7fd fe9b 	bl	8003830 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e1a8      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b08:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b14:	4b28      	ldr	r3, [pc, #160]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4925      	ldr	r1, [pc, #148]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]
 8005b28:	e015      	b.n	8005b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b2a:	4b24      	ldr	r3, [pc, #144]	@ (8005bbc <HAL_RCC_OscConfig+0x244>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fd fe7e 	bl	8003830 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b38:	f7fd fe7a 	bl	8003830 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e187      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d036      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b6a:	4b15      	ldr	r3, [pc, #84]	@ (8005bc0 <HAL_RCC_OscConfig+0x248>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fd fe5e 	bl	8003830 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b78:	f7fd fe5a 	bl	8003830 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e167      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <HAL_RCC_OscConfig+0x200>
 8005b96:	e01b      	b.n	8005bd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b98:	4b09      	ldr	r3, [pc, #36]	@ (8005bc0 <HAL_RCC_OscConfig+0x248>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9e:	f7fd fe47 	bl	8003830 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba4:	e00e      	b.n	8005bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba6:	f7fd fe43 	bl	8003830 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d907      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e150      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	42470000 	.word	0x42470000
 8005bc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc4:	4b88      	ldr	r3, [pc, #544]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ea      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8097 	beq.w	8005d0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be2:	4b81      	ldr	r3, [pc, #516]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	4b7d      	ldr	r3, [pc, #500]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf6:	4a7c      	ldr	r2, [pc, #496]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bfe:	4b7a      	ldr	r3, [pc, #488]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c06:	60bb      	str	r3, [r7, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0e:	4b77      	ldr	r3, [pc, #476]	@ (8005dec <HAL_RCC_OscConfig+0x474>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d118      	bne.n	8005c4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c1a:	4b74      	ldr	r3, [pc, #464]	@ (8005dec <HAL_RCC_OscConfig+0x474>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a73      	ldr	r2, [pc, #460]	@ (8005dec <HAL_RCC_OscConfig+0x474>)
 8005c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c26:	f7fd fe03 	bl	8003830 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2e:	f7fd fdff 	bl	8003830 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e10c      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c40:	4b6a      	ldr	r3, [pc, #424]	@ (8005dec <HAL_RCC_OscConfig+0x474>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d106      	bne.n	8005c62 <HAL_RCC_OscConfig+0x2ea>
 8005c54:	4b64      	ldr	r3, [pc, #400]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c58:	4a63      	ldr	r2, [pc, #396]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c60:	e01c      	b.n	8005c9c <HAL_RCC_OscConfig+0x324>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d10c      	bne.n	8005c84 <HAL_RCC_OscConfig+0x30c>
 8005c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6e:	4a5e      	ldr	r2, [pc, #376]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c70:	f043 0304 	orr.w	r3, r3, #4
 8005c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c76:	4b5c      	ldr	r3, [pc, #368]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c82:	e00b      	b.n	8005c9c <HAL_RCC_OscConfig+0x324>
 8005c84:	4b58      	ldr	r3, [pc, #352]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c88:	4a57      	ldr	r2, [pc, #348]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c90:	4b55      	ldr	r3, [pc, #340]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c94:	4a54      	ldr	r2, [pc, #336]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c96:	f023 0304 	bic.w	r3, r3, #4
 8005c9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d015      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca4:	f7fd fdc4 	bl	8003830 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005caa:	e00a      	b.n	8005cc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cac:	f7fd fdc0 	bl	8003830 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0cb      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc2:	4b49      	ldr	r3, [pc, #292]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0ee      	beq.n	8005cac <HAL_RCC_OscConfig+0x334>
 8005cce:	e014      	b.n	8005cfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd0:	f7fd fdae 	bl	8003830 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd8:	f7fd fdaa 	bl	8003830 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e0b5      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cee:	4b3e      	ldr	r3, [pc, #248]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1ee      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d105      	bne.n	8005d0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d00:	4b39      	ldr	r3, [pc, #228]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	4a38      	ldr	r2, [pc, #224]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80a1 	beq.w	8005e58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d16:	4b34      	ldr	r3, [pc, #208]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 030c 	and.w	r3, r3, #12
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d05c      	beq.n	8005ddc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d141      	bne.n	8005dae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2a:	4b31      	ldr	r3, [pc, #196]	@ (8005df0 <HAL_RCC_OscConfig+0x478>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fd fd7e 	bl	8003830 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d38:	f7fd fd7a 	bl	8003830 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e087      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4a:	4b27      	ldr	r3, [pc, #156]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	491b      	ldr	r1, [pc, #108]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d80:	4b1b      	ldr	r3, [pc, #108]	@ (8005df0 <HAL_RCC_OscConfig+0x478>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d86:	f7fd fd53 	bl	8003830 <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8e:	f7fd fd4f 	bl	8003830 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e05c      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da0:	4b11      	ldr	r3, [pc, #68]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f0      	beq.n	8005d8e <HAL_RCC_OscConfig+0x416>
 8005dac:	e054      	b.n	8005e58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dae:	4b10      	ldr	r3, [pc, #64]	@ (8005df0 <HAL_RCC_OscConfig+0x478>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db4:	f7fd fd3c 	bl	8003830 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dbc:	f7fd fd38 	bl	8003830 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e045      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dce:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0x444>
 8005dda:	e03d      	b.n	8005e58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d107      	bne.n	8005df4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e038      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
 8005de8:	40023800 	.word	0x40023800
 8005dec:	40007000 	.word	0x40007000
 8005df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005df4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e64 <HAL_RCC_OscConfig+0x4ec>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d028      	beq.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d121      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d11a      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e24:	4013      	ands	r3, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d111      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023800 	.word	0x40023800

08005e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0cc      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b68      	ldr	r3, [pc, #416]	@ (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d90c      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b65      	ldr	r3, [pc, #404]	@ (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b63      	ldr	r3, [pc, #396]	@ (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0b8      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d020      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ebc:	4b59      	ldr	r3, [pc, #356]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a58      	ldr	r2, [pc, #352]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ec6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ed4:	4b53      	ldr	r3, [pc, #332]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	4a52      	ldr	r2, [pc, #328]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee0:	4b50      	ldr	r3, [pc, #320]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	494d      	ldr	r1, [pc, #308]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d044      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d107      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f06:	4b47      	ldr	r3, [pc, #284]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d119      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e07f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d107      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f26:	4b3f      	ldr	r3, [pc, #252]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e06f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f36:	4b3b      	ldr	r3, [pc, #236]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e067      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f46:	4b37      	ldr	r3, [pc, #220]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f023 0203 	bic.w	r2, r3, #3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	4934      	ldr	r1, [pc, #208]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f58:	f7fd fc6a 	bl	8003830 <HAL_GetTick>
 8005f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5e:	e00a      	b.n	8005f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f60:	f7fd fc66 	bl	8003830 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e04f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f76:	4b2b      	ldr	r3, [pc, #172]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 020c 	and.w	r2, r3, #12
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d1eb      	bne.n	8005f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f88:	4b25      	ldr	r3, [pc, #148]	@ (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d20c      	bcs.n	8005fb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f96:	4b22      	ldr	r3, [pc, #136]	@ (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b20      	ldr	r3, [pc, #128]	@ (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e032      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fbc:	4b19      	ldr	r3, [pc, #100]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4916      	ldr	r1, [pc, #88]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fda:	4b12      	ldr	r3, [pc, #72]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	490e      	ldr	r1, [pc, #56]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fee:	f000 f821 	bl	8006034 <HAL_RCC_GetSysClockFreq>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	490a      	ldr	r1, [pc, #40]	@ (8006028 <HAL_RCC_ClockConfig+0x1c0>)
 8006000:	5ccb      	ldrb	r3, [r1, r3]
 8006002:	fa22 f303 	lsr.w	r3, r2, r3
 8006006:	4a09      	ldr	r2, [pc, #36]	@ (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8006008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800600a:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd fbcc 	bl	80037ac <HAL_InitTick>

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40023c00 	.word	0x40023c00
 8006024:	40023800 	.word	0x40023800
 8006028:	0800ba5c 	.word	0x0800ba5c
 800602c:	20000018 	.word	0x20000018
 8006030:	2000001c 	.word	0x2000001c

08006034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006038:	b094      	sub	sp, #80	@ 0x50
 800603a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800604c:	4b7c      	ldr	r3, [pc, #496]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x20c>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 030c 	and.w	r3, r3, #12
 8006054:	2b08      	cmp	r3, #8
 8006056:	d00d      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x40>
 8006058:	2b08      	cmp	r3, #8
 800605a:	f200 80e7 	bhi.w	800622c <HAL_RCC_GetSysClockFreq+0x1f8>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_RCC_GetSysClockFreq+0x34>
 8006062:	2b04      	cmp	r3, #4
 8006064:	d003      	beq.n	800606e <HAL_RCC_GetSysClockFreq+0x3a>
 8006066:	e0e1      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006068:	4b76      	ldr	r3, [pc, #472]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x210>)
 800606a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800606c:	e0e1      	b.n	8006232 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800606e:	4b76      	ldr	r3, [pc, #472]	@ (8006248 <HAL_RCC_GetSysClockFreq+0x214>)
 8006070:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006072:	e0de      	b.n	8006232 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006074:	4b72      	ldr	r3, [pc, #456]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x20c>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800607c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800607e:	4b70      	ldr	r3, [pc, #448]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x20c>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d065      	beq.n	8006156 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800608a:	4b6d      	ldr	r3, [pc, #436]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x20c>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	099b      	lsrs	r3, r3, #6
 8006090:	2200      	movs	r2, #0
 8006092:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006094:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609c:	633b      	str	r3, [r7, #48]	@ 0x30
 800609e:	2300      	movs	r3, #0
 80060a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80060a6:	4622      	mov	r2, r4
 80060a8:	462b      	mov	r3, r5
 80060aa:	f04f 0000 	mov.w	r0, #0
 80060ae:	f04f 0100 	mov.w	r1, #0
 80060b2:	0159      	lsls	r1, r3, #5
 80060b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060b8:	0150      	lsls	r0, r2, #5
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4621      	mov	r1, r4
 80060c0:	1a51      	subs	r1, r2, r1
 80060c2:	6139      	str	r1, [r7, #16]
 80060c4:	4629      	mov	r1, r5
 80060c6:	eb63 0301 	sbc.w	r3, r3, r1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d8:	4659      	mov	r1, fp
 80060da:	018b      	lsls	r3, r1, #6
 80060dc:	4651      	mov	r1, sl
 80060de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060e2:	4651      	mov	r1, sl
 80060e4:	018a      	lsls	r2, r1, #6
 80060e6:	46d4      	mov	ip, sl
 80060e8:	ebb2 080c 	subs.w	r8, r2, ip
 80060ec:	4659      	mov	r1, fp
 80060ee:	eb63 0901 	sbc.w	r9, r3, r1
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006106:	4690      	mov	r8, r2
 8006108:	4699      	mov	r9, r3
 800610a:	4623      	mov	r3, r4
 800610c:	eb18 0303 	adds.w	r3, r8, r3
 8006110:	60bb      	str	r3, [r7, #8]
 8006112:	462b      	mov	r3, r5
 8006114:	eb49 0303 	adc.w	r3, r9, r3
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006126:	4629      	mov	r1, r5
 8006128:	024b      	lsls	r3, r1, #9
 800612a:	4620      	mov	r0, r4
 800612c:	4629      	mov	r1, r5
 800612e:	4604      	mov	r4, r0
 8006130:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006134:	4601      	mov	r1, r0
 8006136:	024a      	lsls	r2, r1, #9
 8006138:	4610      	mov	r0, r2
 800613a:	4619      	mov	r1, r3
 800613c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800613e:	2200      	movs	r2, #0
 8006140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006144:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006148:	f7fb f812 	bl	8001170 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4613      	mov	r3, r2
 8006152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006154:	e05c      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006156:	4b3a      	ldr	r3, [pc, #232]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x20c>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	099b      	lsrs	r3, r3, #6
 800615c:	2200      	movs	r2, #0
 800615e:	4618      	mov	r0, r3
 8006160:	4611      	mov	r1, r2
 8006162:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006166:	623b      	str	r3, [r7, #32]
 8006168:	2300      	movs	r3, #0
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
 800616c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006170:	4642      	mov	r2, r8
 8006172:	464b      	mov	r3, r9
 8006174:	f04f 0000 	mov.w	r0, #0
 8006178:	f04f 0100 	mov.w	r1, #0
 800617c:	0159      	lsls	r1, r3, #5
 800617e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006182:	0150      	lsls	r0, r2, #5
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	46c4      	mov	ip, r8
 800618a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800618e:	4640      	mov	r0, r8
 8006190:	4649      	mov	r1, r9
 8006192:	468c      	mov	ip, r1
 8006194:	eb63 0b0c 	sbc.w	fp, r3, ip
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061ac:	ebb2 040a 	subs.w	r4, r2, sl
 80061b0:	eb63 050b 	sbc.w	r5, r3, fp
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	00eb      	lsls	r3, r5, #3
 80061be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061c2:	00e2      	lsls	r2, r4, #3
 80061c4:	4614      	mov	r4, r2
 80061c6:	461d      	mov	r5, r3
 80061c8:	4603      	mov	r3, r0
 80061ca:	18e3      	adds	r3, r4, r3
 80061cc:	603b      	str	r3, [r7, #0]
 80061ce:	460b      	mov	r3, r1
 80061d0:	eb45 0303 	adc.w	r3, r5, r3
 80061d4:	607b      	str	r3, [r7, #4]
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061e2:	4629      	mov	r1, r5
 80061e4:	028b      	lsls	r3, r1, #10
 80061e6:	4620      	mov	r0, r4
 80061e8:	4629      	mov	r1, r5
 80061ea:	4604      	mov	r4, r0
 80061ec:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80061f0:	4601      	mov	r1, r0
 80061f2:	028a      	lsls	r2, r1, #10
 80061f4:	4610      	mov	r0, r2
 80061f6:	4619      	mov	r1, r3
 80061f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061fa:	2200      	movs	r2, #0
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	61fa      	str	r2, [r7, #28]
 8006200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006204:	f7fa ffb4 	bl	8001170 <__aeabi_uldivmod>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4613      	mov	r3, r2
 800620e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006210:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x20c>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	0c1b      	lsrs	r3, r3, #16
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	3301      	adds	r3, #1
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006220:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800622a:	e002      	b.n	8006232 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800622c:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x210>)
 800622e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006234:	4618      	mov	r0, r3
 8006236:	3750      	adds	r7, #80	@ 0x50
 8006238:	46bd      	mov	sp, r7
 800623a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800623e:	bf00      	nop
 8006240:	40023800 	.word	0x40023800
 8006244:	00f42400 	.word	0x00f42400
 8006248:	007a1200 	.word	0x007a1200

0800624c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006250:	4b02      	ldr	r3, [pc, #8]	@ (800625c <HAL_RCC_GetHCLKFreq+0x10>)
 8006252:	681b      	ldr	r3, [r3, #0]
}
 8006254:	4618      	mov	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr
 800625c:	20000018 	.word	0x20000018

08006260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006264:	f7ff fff2 	bl	800624c <HAL_RCC_GetHCLKFreq>
 8006268:	4602      	mov	r2, r0
 800626a:	4b05      	ldr	r3, [pc, #20]	@ (8006280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	0a9b      	lsrs	r3, r3, #10
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	4903      	ldr	r1, [pc, #12]	@ (8006284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006276:	5ccb      	ldrb	r3, [r1, r3]
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40023800 	.word	0x40023800
 8006284:	0800ba6c 	.word	0x0800ba6c

08006288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d105      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d075      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062bc:	4b91      	ldr	r3, [pc, #580]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062c2:	f7fd fab5 	bl	8003830 <HAL_GetTick>
 80062c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062c8:	e008      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062ca:	f7fd fab1 	bl	8003830 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e189      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062dc:	4b8a      	ldr	r3, [pc, #552]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f0      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	019a      	lsls	r2, r3, #6
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	071b      	lsls	r3, r3, #28
 8006300:	4981      	ldr	r1, [pc, #516]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01f      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006314:	4b7c      	ldr	r3, [pc, #496]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800631a:	0f1b      	lsrs	r3, r3, #28
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	019a      	lsls	r2, r3, #6
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	061b      	lsls	r3, r3, #24
 800632e:	431a      	orrs	r2, r3
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	071b      	lsls	r3, r3, #28
 8006334:	4974      	ldr	r1, [pc, #464]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800633c:	4b72      	ldr	r3, [pc, #456]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800633e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006342:	f023 021f 	bic.w	r2, r3, #31
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	3b01      	subs	r3, #1
 800634c:	496e      	ldr	r1, [pc, #440]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00d      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	019a      	lsls	r2, r3, #6
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	061b      	lsls	r3, r3, #24
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	071b      	lsls	r3, r3, #28
 8006374:	4964      	ldr	r1, [pc, #400]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800637c:	4b61      	ldr	r3, [pc, #388]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006382:	f7fd fa55 	bl	8003830 <HAL_GetTick>
 8006386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800638a:	f7fd fa51 	bl	8003830 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e129      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800639c:	4b5a      	ldr	r3, [pc, #360]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d105      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d079      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80063c0:	4b52      	ldr	r3, [pc, #328]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063c6:	f7fd fa33 	bl	8003830 <HAL_GetTick>
 80063ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063cc:	e008      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80063ce:	f7fd fa2f 	bl	8003830 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e107      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063e0:	4b49      	ldr	r3, [pc, #292]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ec:	d0ef      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d020      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063fa:	4b43      	ldr	r3, [pc, #268]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006400:	0f1b      	lsrs	r3, r3, #28
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	019a      	lsls	r2, r3, #6
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	061b      	lsls	r3, r3, #24
 8006414:	431a      	orrs	r2, r3
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	071b      	lsls	r3, r3, #28
 800641a:	493b      	ldr	r1, [pc, #236]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006422:	4b39      	ldr	r3, [pc, #228]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006428:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	3b01      	subs	r3, #1
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	4934      	ldr	r1, [pc, #208]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01e      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006448:	4b2f      	ldr	r3, [pc, #188]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644e:	0e1b      	lsrs	r3, r3, #24
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	019a      	lsls	r2, r3, #6
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	061b      	lsls	r3, r3, #24
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	071b      	lsls	r3, r3, #28
 8006468:	4927      	ldr	r1, [pc, #156]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006470:	4b25      	ldr	r3, [pc, #148]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006476:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	4922      	ldr	r1, [pc, #136]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006486:	4b21      	ldr	r3, [pc, #132]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800648c:	f7fd f9d0 	bl	8003830 <HAL_GetTick>
 8006490:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006494:	f7fd f9cc 	bl	8003830 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e0a4      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064a6:	4b18      	ldr	r3, [pc, #96]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064b2:	d1ef      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 808b 	beq.w	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	4b10      	ldr	r3, [pc, #64]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	4a0f      	ldr	r2, [pc, #60]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064de:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80064e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064ea:	f7fd f9a1 	bl	8003830 <HAL_GetTick>
 80064ee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80064f0:	e010      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f2:	f7fd f99d 	bl	8003830 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d909      	bls.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e075      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006504:	42470068 	.word	0x42470068
 8006508:	40023800 	.word	0x40023800
 800650c:	42470070 	.word	0x42470070
 8006510:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006514:	4b38      	ldr	r3, [pc, #224]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0e8      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006520:	4b36      	ldr	r3, [pc, #216]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006524:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006528:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d02f      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	429a      	cmp	r2, r3
 800653c:	d028      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800653e:	4b2f      	ldr	r3, [pc, #188]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006546:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006548:	4b2d      	ldr	r3, [pc, #180]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800654a:	2201      	movs	r2, #1
 800654c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800654e:	4b2c      	ldr	r3, [pc, #176]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006554:	4a29      	ldr	r2, [pc, #164]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800655a:	4b28      	ldr	r3, [pc, #160]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800655c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b01      	cmp	r3, #1
 8006564:	d114      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006566:	f7fd f963 	bl	8003830 <HAL_GetTick>
 800656a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656c:	e00a      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800656e:	f7fd f95f 	bl	8003830 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800657c:	4293      	cmp	r3, r2
 800657e:	d901      	bls.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e035      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006584:	4b1d      	ldr	r3, [pc, #116]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0ee      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006594:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006598:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800659c:	d10d      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x332>
 800659e:	4b17      	ldr	r3, [pc, #92]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065b2:	4912      	ldr	r1, [pc, #72]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	608b      	str	r3, [r1, #8]
 80065b8:	e005      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80065ba:	4b10      	ldr	r3, [pc, #64]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	4a0f      	ldr	r2, [pc, #60]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065c0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80065c4:	6093      	str	r3, [r2, #8]
 80065c6:	4b0d      	ldr	r3, [pc, #52]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d2:	490a      	ldr	r1, [pc, #40]	@ (80065fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d004      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80065ea:	4b06      	ldr	r3, [pc, #24]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80065ec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40007000 	.word	0x40007000
 80065fc:	40023800 	.word	0x40023800
 8006600:	42470e40 	.word	0x42470e40
 8006604:	424711e0 	.word	0x424711e0

08006608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e07b      	b.n	8006712 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d108      	bne.n	8006634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800662a:	d009      	beq.n	8006640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	61da      	str	r2, [r3, #28]
 8006632:	e005      	b.n	8006640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fc fbde 	bl	8002e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006676:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c4:	ea42 0103 	orr.w	r1, r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	f003 0104 	and.w	r1, r3, #4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	f003 0210 	and.w	r2, r3, #16
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006700:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e01a      	b.n	8006762 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006742:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7fc fbb1 	bl	8002eac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800677a:	f7fd f859 	bl	8003830 <HAL_GetTick>
 800677e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d001      	beq.n	8006794 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006790:	2302      	movs	r3, #2
 8006792:	e12a      	b.n	80069ea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_SPI_Transmit+0x36>
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e122      	b.n	80069ea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_SPI_Transmit+0x48>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e11b      	b.n	80069ea <HAL_SPI_Transmit+0x280>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2203      	movs	r2, #3
 80067be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	88fa      	ldrh	r2, [r7, #6]
 80067d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006800:	d10f      	bne.n	8006822 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006810:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682c:	2b40      	cmp	r3, #64	@ 0x40
 800682e:	d007      	beq.n	8006840 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800683e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006848:	d152      	bne.n	80068f0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <HAL_SPI_Transmit+0xee>
 8006852:	8b7b      	ldrh	r3, [r7, #26]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d145      	bne.n	80068e4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685c:	881a      	ldrh	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006868:	1c9a      	adds	r2, r3, #2
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800687c:	e032      	b.n	80068e4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b02      	cmp	r3, #2
 800688a:	d112      	bne.n	80068b2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006890:	881a      	ldrh	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	1c9a      	adds	r2, r3, #2
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068b0:	e018      	b.n	80068e4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068b2:	f7fc ffbd 	bl	8003830 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d803      	bhi.n	80068ca <HAL_SPI_Transmit+0x160>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068c8:	d102      	bne.n	80068d0 <HAL_SPI_Transmit+0x166>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e082      	b.n	80069ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1c7      	bne.n	800687e <HAL_SPI_Transmit+0x114>
 80068ee:	e053      	b.n	8006998 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_SPI_Transmit+0x194>
 80068f8:	8b7b      	ldrh	r3, [r7, #26]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d147      	bne.n	800698e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	7812      	ldrb	r2, [r2, #0]
 800690a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006924:	e033      	b.n	800698e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b02      	cmp	r3, #2
 8006932:	d113      	bne.n	800695c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	7812      	ldrb	r2, [r2, #0]
 8006940:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	86da      	strh	r2, [r3, #54]	@ 0x36
 800695a:	e018      	b.n	800698e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800695c:	f7fc ff68 	bl	8003830 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d803      	bhi.n	8006974 <HAL_SPI_Transmit+0x20a>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006972:	d102      	bne.n	800697a <HAL_SPI_Transmit+0x210>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e02d      	b.n	80069ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1c6      	bne.n	8006926 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006998:	69fa      	ldr	r2, [r7, #28]
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f8bd 	bl	8006b1c <SPI_EndRxTxTransaction>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80069e8:	2300      	movs	r3, #0
  }
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a00:	b2db      	uxtb	r3, r3
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr

08006a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a1c:	f7fc ff08 	bl	8003830 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	4413      	add	r3, r2
 8006a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a2c:	f7fc ff00 	bl	8003830 <HAL_GetTick>
 8006a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a32:	4b39      	ldr	r3, [pc, #228]	@ (8006b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	015b      	lsls	r3, r3, #5
 8006a38:	0d1b      	lsrs	r3, r3, #20
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	fb02 f303 	mul.w	r3, r2, r3
 8006a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a42:	e054      	b.n	8006aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a4a:	d050      	beq.n	8006aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a4c:	f7fc fef0 	bl	8003830 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d902      	bls.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d13d      	bne.n	8006ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a7a:	d111      	bne.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a84:	d004      	beq.n	8006a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8e:	d107      	bne.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa8:	d10f      	bne.n	8006aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e017      	b.n	8006b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4013      	ands	r3, r2
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	bf0c      	ite	eq
 8006afe:	2301      	moveq	r3, #1
 8006b00:	2300      	movne	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d19b      	bne.n	8006a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3720      	adds	r7, #32
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20000018 	.word	0x20000018

08006b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	2102      	movs	r1, #2
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff ff6a 	bl	8006a0c <SPI_WaitFlagStateUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b42:	f043 0220 	orr.w	r2, r3, #32
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e032      	b.n	8006bb4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bbc <SPI_EndRxTxTransaction+0xa0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc0 <SPI_EndRxTxTransaction+0xa4>)
 8006b54:	fba2 2303 	umull	r2, r3, r2, r3
 8006b58:	0d5b      	lsrs	r3, r3, #21
 8006b5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b5e:	fb02 f303 	mul.w	r3, r2, r3
 8006b62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b6c:	d112      	bne.n	8006b94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2200      	movs	r2, #0
 8006b76:	2180      	movs	r1, #128	@ 0x80
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff ff47 	bl	8006a0c <SPI_WaitFlagStateUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d016      	beq.n	8006bb2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b88:	f043 0220 	orr.w	r2, r3, #32
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e00f      	b.n	8006bb4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006baa:	2b80      	cmp	r3, #128	@ 0x80
 8006bac:	d0f2      	beq.n	8006b94 <SPI_EndRxTxTransaction+0x78>
 8006bae:	e000      	b.n	8006bb2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006bb0:	bf00      	nop
  }

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000018 	.word	0x20000018
 8006bc0:	165e9f81 	.word	0x165e9f81

08006bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e041      	b.n	8006c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fc f97c 	bl	8002ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f000 f956 	bl	8006eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d001      	beq.n	8006c7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e046      	b.n	8006d0a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a22      	ldr	r2, [pc, #136]	@ (8006d14 <HAL_TIM_Base_Start+0xb0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d022      	beq.n	8006cd4 <HAL_TIM_Base_Start+0x70>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c96:	d01d      	beq.n	8006cd4 <HAL_TIM_Base_Start+0x70>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8006d18 <HAL_TIM_Base_Start+0xb4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d018      	beq.n	8006cd4 <HAL_TIM_Base_Start+0x70>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d1c <HAL_TIM_Base_Start+0xb8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d013      	beq.n	8006cd4 <HAL_TIM_Base_Start+0x70>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d20 <HAL_TIM_Base_Start+0xbc>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00e      	beq.n	8006cd4 <HAL_TIM_Base_Start+0x70>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1a      	ldr	r2, [pc, #104]	@ (8006d24 <HAL_TIM_Base_Start+0xc0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d009      	beq.n	8006cd4 <HAL_TIM_Base_Start+0x70>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a18      	ldr	r2, [pc, #96]	@ (8006d28 <HAL_TIM_Base_Start+0xc4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d004      	beq.n	8006cd4 <HAL_TIM_Base_Start+0x70>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a17      	ldr	r2, [pc, #92]	@ (8006d2c <HAL_TIM_Base_Start+0xc8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d111      	bne.n	8006cf8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b06      	cmp	r3, #6
 8006ce4:	d010      	beq.n	8006d08 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0201 	orr.w	r2, r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf6:	e007      	b.n	8006d08 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40010400 	.word	0x40010400
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40001800 	.word	0x40001800

08006d30 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6a1a      	ldr	r2, [r3, #32]
 8006d3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10f      	bne.n	8006d68 <HAL_TIM_Base_Stop+0x38>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6a1a      	ldr	r2, [r3, #32]
 8006d4e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d107      	bne.n	8006d68 <HAL_TIM_Base_Stop+0x38>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0201 	bic.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d001      	beq.n	8006d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e04e      	b.n	8006e32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a22      	ldr	r2, [pc, #136]	@ (8006e3c <HAL_TIM_Base_Start_IT+0xc0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d022      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dbe:	d01d      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d018      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1d      	ldr	r2, [pc, #116]	@ (8006e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d013      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00e      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1a      	ldr	r2, [pc, #104]	@ (8006e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d009      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a18      	ldr	r2, [pc, #96]	@ (8006e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a17      	ldr	r2, [pc, #92]	@ (8006e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d111      	bne.n	8006e20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b06      	cmp	r3, #6
 8006e0c:	d010      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0201 	orr.w	r2, r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1e:	e007      	b.n	8006e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0201 	orr.w	r2, r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr
 8006e3c:	40010000 	.word	0x40010000
 8006e40:	40000400 	.word	0x40000400
 8006e44:	40000800 	.word	0x40000800
 8006e48:	40000c00 	.word	0x40000c00
 8006e4c:	40010400 	.word	0x40010400
 8006e50:	40014000 	.word	0x40014000
 8006e54:	40001800 	.word	0x40001800

08006e58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0201 	bic.w	r2, r2, #1
 8006e6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6a1a      	ldr	r2, [r3, #32]
 8006e76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10f      	bne.n	8006ea0 <HAL_TIM_Base_Stop_IT+0x48>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a1a      	ldr	r2, [r3, #32]
 8006e86:	f240 4344 	movw	r3, #1092	@ 0x444
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <HAL_TIM_Base_Stop_IT+0x48>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a45      	ldr	r2, [pc, #276]	@ (8006fdc <TIM_Base_SetConfig+0x128>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d013      	beq.n	8006ef4 <TIM_Base_SetConfig+0x40>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ed2:	d00f      	beq.n	8006ef4 <TIM_Base_SetConfig+0x40>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a42      	ldr	r2, [pc, #264]	@ (8006fe0 <TIM_Base_SetConfig+0x12c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00b      	beq.n	8006ef4 <TIM_Base_SetConfig+0x40>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a41      	ldr	r2, [pc, #260]	@ (8006fe4 <TIM_Base_SetConfig+0x130>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d007      	beq.n	8006ef4 <TIM_Base_SetConfig+0x40>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a40      	ldr	r2, [pc, #256]	@ (8006fe8 <TIM_Base_SetConfig+0x134>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d003      	beq.n	8006ef4 <TIM_Base_SetConfig+0x40>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a3f      	ldr	r2, [pc, #252]	@ (8006fec <TIM_Base_SetConfig+0x138>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d108      	bne.n	8006f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a34      	ldr	r2, [pc, #208]	@ (8006fdc <TIM_Base_SetConfig+0x128>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d02b      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f14:	d027      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a31      	ldr	r2, [pc, #196]	@ (8006fe0 <TIM_Base_SetConfig+0x12c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d023      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a30      	ldr	r2, [pc, #192]	@ (8006fe4 <TIM_Base_SetConfig+0x130>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d01f      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a2f      	ldr	r2, [pc, #188]	@ (8006fe8 <TIM_Base_SetConfig+0x134>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d01b      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a2e      	ldr	r2, [pc, #184]	@ (8006fec <TIM_Base_SetConfig+0x138>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d017      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff0 <TIM_Base_SetConfig+0x13c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d013      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a2c      	ldr	r2, [pc, #176]	@ (8006ff4 <TIM_Base_SetConfig+0x140>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00f      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2b      	ldr	r2, [pc, #172]	@ (8006ff8 <TIM_Base_SetConfig+0x144>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00b      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a2a      	ldr	r2, [pc, #168]	@ (8006ffc <TIM_Base_SetConfig+0x148>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d007      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a29      	ldr	r2, [pc, #164]	@ (8007000 <TIM_Base_SetConfig+0x14c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d003      	beq.n	8006f66 <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a28      	ldr	r2, [pc, #160]	@ (8007004 <TIM_Base_SetConfig+0x150>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d108      	bne.n	8006f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8006fdc <TIM_Base_SetConfig+0x128>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_Base_SetConfig+0xf8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a11      	ldr	r2, [pc, #68]	@ (8006fec <TIM_Base_SetConfig+0x138>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d103      	bne.n	8006fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d105      	bne.n	8006fd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f023 0201 	bic.w	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	611a      	str	r2, [r3, #16]
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr
 8006fdc:	40010000 	.word	0x40010000
 8006fe0:	40000400 	.word	0x40000400
 8006fe4:	40000800 	.word	0x40000800
 8006fe8:	40000c00 	.word	0x40000c00
 8006fec:	40010400 	.word	0x40010400
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40014400 	.word	0x40014400
 8006ff8:	40014800 	.word	0x40014800
 8006ffc:	40001800 	.word	0x40001800
 8007000:	40001c00 	.word	0x40001c00
 8007004:	40002000 	.word	0x40002000

08007008 <findslot>:
 8007008:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <findslot+0x2c>)
 800700a:	b510      	push	{r4, lr}
 800700c:	4604      	mov	r4, r0
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	b118      	cbz	r0, 800701a <findslot+0x12>
 8007012:	6a03      	ldr	r3, [r0, #32]
 8007014:	b90b      	cbnz	r3, 800701a <findslot+0x12>
 8007016:	f000 fe1d 	bl	8007c54 <__sinit>
 800701a:	2c13      	cmp	r4, #19
 800701c:	d807      	bhi.n	800702e <findslot+0x26>
 800701e:	4806      	ldr	r0, [pc, #24]	@ (8007038 <findslot+0x30>)
 8007020:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007024:	3201      	adds	r2, #1
 8007026:	d002      	beq.n	800702e <findslot+0x26>
 8007028:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800702c:	bd10      	pop	{r4, pc}
 800702e:	2000      	movs	r0, #0
 8007030:	e7fc      	b.n	800702c <findslot+0x24>
 8007032:	bf00      	nop
 8007034:	20000030 	.word	0x20000030
 8007038:	20025c4c 	.word	0x20025c4c

0800703c <error>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	4604      	mov	r4, r0
 8007040:	f000 fe4a 	bl	8007cd8 <__errno>
 8007044:	2613      	movs	r6, #19
 8007046:	4605      	mov	r5, r0
 8007048:	2700      	movs	r7, #0
 800704a:	4630      	mov	r0, r6
 800704c:	4639      	mov	r1, r7
 800704e:	beab      	bkpt	0x00ab
 8007050:	4606      	mov	r6, r0
 8007052:	602e      	str	r6, [r5, #0]
 8007054:	4620      	mov	r0, r4
 8007056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007058 <checkerror>:
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d101      	bne.n	8007060 <checkerror+0x8>
 800705c:	f7ff bfee 	b.w	800703c <error>
 8007060:	4770      	bx	lr

08007062 <_swiread>:
 8007062:	b530      	push	{r4, r5, lr}
 8007064:	b085      	sub	sp, #20
 8007066:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800706a:	9203      	str	r2, [sp, #12]
 800706c:	2406      	movs	r4, #6
 800706e:	ad01      	add	r5, sp, #4
 8007070:	4620      	mov	r0, r4
 8007072:	4629      	mov	r1, r5
 8007074:	beab      	bkpt	0x00ab
 8007076:	4604      	mov	r4, r0
 8007078:	4620      	mov	r0, r4
 800707a:	f7ff ffed 	bl	8007058 <checkerror>
 800707e:	b005      	add	sp, #20
 8007080:	bd30      	pop	{r4, r5, pc}

08007082 <_read>:
 8007082:	b570      	push	{r4, r5, r6, lr}
 8007084:	460e      	mov	r6, r1
 8007086:	4614      	mov	r4, r2
 8007088:	f7ff ffbe 	bl	8007008 <findslot>
 800708c:	4605      	mov	r5, r0
 800708e:	b930      	cbnz	r0, 800709e <_read+0x1c>
 8007090:	f000 fe22 	bl	8007cd8 <__errno>
 8007094:	2309      	movs	r3, #9
 8007096:	6003      	str	r3, [r0, #0]
 8007098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800709c:	bd70      	pop	{r4, r5, r6, pc}
 800709e:	6800      	ldr	r0, [r0, #0]
 80070a0:	4622      	mov	r2, r4
 80070a2:	4631      	mov	r1, r6
 80070a4:	f7ff ffdd 	bl	8007062 <_swiread>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d0f5      	beq.n	8007098 <_read+0x16>
 80070ac:	686b      	ldr	r3, [r5, #4]
 80070ae:	1a20      	subs	r0, r4, r0
 80070b0:	4403      	add	r3, r0
 80070b2:	606b      	str	r3, [r5, #4]
 80070b4:	e7f2      	b.n	800709c <_read+0x1a>

080070b6 <_swilseek>:
 80070b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	4616      	mov	r6, r2
 80070bc:	f7ff ffa4 	bl	8007008 <findslot>
 80070c0:	4605      	mov	r5, r0
 80070c2:	b940      	cbnz	r0, 80070d6 <_swilseek+0x20>
 80070c4:	f000 fe08 	bl	8007cd8 <__errno>
 80070c8:	2309      	movs	r3, #9
 80070ca:	6003      	str	r3, [r0, #0]
 80070cc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80070d0:	4620      	mov	r0, r4
 80070d2:	b003      	add	sp, #12
 80070d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d6:	2e02      	cmp	r6, #2
 80070d8:	d903      	bls.n	80070e2 <_swilseek+0x2c>
 80070da:	f000 fdfd 	bl	8007cd8 <__errno>
 80070de:	2316      	movs	r3, #22
 80070e0:	e7f3      	b.n	80070ca <_swilseek+0x14>
 80070e2:	2e01      	cmp	r6, #1
 80070e4:	d112      	bne.n	800710c <_swilseek+0x56>
 80070e6:	6843      	ldr	r3, [r0, #4]
 80070e8:	18e4      	adds	r4, r4, r3
 80070ea:	d4f6      	bmi.n	80070da <_swilseek+0x24>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	260a      	movs	r6, #10
 80070f0:	e9cd 3400 	strd	r3, r4, [sp]
 80070f4:	466f      	mov	r7, sp
 80070f6:	4630      	mov	r0, r6
 80070f8:	4639      	mov	r1, r7
 80070fa:	beab      	bkpt	0x00ab
 80070fc:	4606      	mov	r6, r0
 80070fe:	4630      	mov	r0, r6
 8007100:	f7ff ffaa 	bl	8007058 <checkerror>
 8007104:	2800      	cmp	r0, #0
 8007106:	dbe1      	blt.n	80070cc <_swilseek+0x16>
 8007108:	606c      	str	r4, [r5, #4]
 800710a:	e7e1      	b.n	80070d0 <_swilseek+0x1a>
 800710c:	2e02      	cmp	r6, #2
 800710e:	6803      	ldr	r3, [r0, #0]
 8007110:	d1ec      	bne.n	80070ec <_swilseek+0x36>
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	260c      	movs	r6, #12
 8007116:	466f      	mov	r7, sp
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	beab      	bkpt	0x00ab
 800711e:	4606      	mov	r6, r0
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff ff99 	bl	8007058 <checkerror>
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	d0d0      	beq.n	80070cc <_swilseek+0x16>
 800712a:	4404      	add	r4, r0
 800712c:	e7de      	b.n	80070ec <_swilseek+0x36>

0800712e <_lseek>:
 800712e:	f7ff bfc2 	b.w	80070b6 <_swilseek>

08007132 <_swiwrite>:
 8007132:	b530      	push	{r4, r5, lr}
 8007134:	b085      	sub	sp, #20
 8007136:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800713a:	9203      	str	r2, [sp, #12]
 800713c:	2405      	movs	r4, #5
 800713e:	ad01      	add	r5, sp, #4
 8007140:	4620      	mov	r0, r4
 8007142:	4629      	mov	r1, r5
 8007144:	beab      	bkpt	0x00ab
 8007146:	4604      	mov	r4, r0
 8007148:	4620      	mov	r0, r4
 800714a:	f7ff ff85 	bl	8007058 <checkerror>
 800714e:	b005      	add	sp, #20
 8007150:	bd30      	pop	{r4, r5, pc}

08007152 <_write>:
 8007152:	b570      	push	{r4, r5, r6, lr}
 8007154:	460e      	mov	r6, r1
 8007156:	4615      	mov	r5, r2
 8007158:	f7ff ff56 	bl	8007008 <findslot>
 800715c:	4604      	mov	r4, r0
 800715e:	b930      	cbnz	r0, 800716e <_write+0x1c>
 8007160:	f000 fdba 	bl	8007cd8 <__errno>
 8007164:	2309      	movs	r3, #9
 8007166:	6003      	str	r3, [r0, #0]
 8007168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800716c:	bd70      	pop	{r4, r5, r6, pc}
 800716e:	6800      	ldr	r0, [r0, #0]
 8007170:	462a      	mov	r2, r5
 8007172:	4631      	mov	r1, r6
 8007174:	f7ff ffdd 	bl	8007132 <_swiwrite>
 8007178:	1e03      	subs	r3, r0, #0
 800717a:	dbf5      	blt.n	8007168 <_write+0x16>
 800717c:	6862      	ldr	r2, [r4, #4]
 800717e:	1ae8      	subs	r0, r5, r3
 8007180:	4402      	add	r2, r0
 8007182:	42ab      	cmp	r3, r5
 8007184:	6062      	str	r2, [r4, #4]
 8007186:	d1f1      	bne.n	800716c <_write+0x1a>
 8007188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800718c:	2000      	movs	r0, #0
 800718e:	f7ff bf55 	b.w	800703c <error>

08007192 <_swiclose>:
 8007192:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007194:	2402      	movs	r4, #2
 8007196:	9001      	str	r0, [sp, #4]
 8007198:	ad01      	add	r5, sp, #4
 800719a:	4620      	mov	r0, r4
 800719c:	4629      	mov	r1, r5
 800719e:	beab      	bkpt	0x00ab
 80071a0:	4604      	mov	r4, r0
 80071a2:	4620      	mov	r0, r4
 80071a4:	f7ff ff58 	bl	8007058 <checkerror>
 80071a8:	b003      	add	sp, #12
 80071aa:	bd30      	pop	{r4, r5, pc}

080071ac <_close>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4605      	mov	r5, r0
 80071b0:	f7ff ff2a 	bl	8007008 <findslot>
 80071b4:	4604      	mov	r4, r0
 80071b6:	b930      	cbnz	r0, 80071c6 <_close+0x1a>
 80071b8:	f000 fd8e 	bl	8007cd8 <__errno>
 80071bc:	2309      	movs	r3, #9
 80071be:	6003      	str	r3, [r0, #0]
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071c4:	bd38      	pop	{r3, r4, r5, pc}
 80071c6:	3d01      	subs	r5, #1
 80071c8:	2d01      	cmp	r5, #1
 80071ca:	d809      	bhi.n	80071e0 <_close+0x34>
 80071cc:	4b07      	ldr	r3, [pc, #28]	@ (80071ec <_close+0x40>)
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d104      	bne.n	80071e0 <_close+0x34>
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	2000      	movs	r0, #0
 80071de:	e7f1      	b.n	80071c4 <_close+0x18>
 80071e0:	6820      	ldr	r0, [r4, #0]
 80071e2:	f7ff ffd6 	bl	8007192 <_swiclose>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d0f5      	beq.n	80071d6 <_close+0x2a>
 80071ea:	e7eb      	b.n	80071c4 <_close+0x18>
 80071ec:	20025c4c 	.word	0x20025c4c

080071f0 <_getpid>:
 80071f0:	2001      	movs	r0, #1
 80071f2:	4770      	bx	lr

080071f4 <_swistat>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	460c      	mov	r4, r1
 80071f8:	f7ff ff06 	bl	8007008 <findslot>
 80071fc:	4605      	mov	r5, r0
 80071fe:	b930      	cbnz	r0, 800720e <_swistat+0x1a>
 8007200:	f000 fd6a 	bl	8007cd8 <__errno>
 8007204:	2309      	movs	r3, #9
 8007206:	6003      	str	r3, [r0, #0]
 8007208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800720c:	bd70      	pop	{r4, r5, r6, pc}
 800720e:	6863      	ldr	r3, [r4, #4]
 8007210:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007214:	6063      	str	r3, [r4, #4]
 8007216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800721a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800721c:	260c      	movs	r6, #12
 800721e:	4630      	mov	r0, r6
 8007220:	4629      	mov	r1, r5
 8007222:	beab      	bkpt	0x00ab
 8007224:	4605      	mov	r5, r0
 8007226:	4628      	mov	r0, r5
 8007228:	f7ff ff16 	bl	8007058 <checkerror>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d0eb      	beq.n	8007208 <_swistat+0x14>
 8007230:	6120      	str	r0, [r4, #16]
 8007232:	2000      	movs	r0, #0
 8007234:	e7ea      	b.n	800720c <_swistat+0x18>

08007236 <_fstat>:
 8007236:	460b      	mov	r3, r1
 8007238:	b510      	push	{r4, lr}
 800723a:	2100      	movs	r1, #0
 800723c:	4604      	mov	r4, r0
 800723e:	2258      	movs	r2, #88	@ 0x58
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fd3d 	bl	8007cc0 <memset>
 8007246:	4601      	mov	r1, r0
 8007248:	4620      	mov	r0, r4
 800724a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800724e:	f7ff bfd1 	b.w	80071f4 <_swistat>

08007252 <_isatty>:
 8007252:	b570      	push	{r4, r5, r6, lr}
 8007254:	f7ff fed8 	bl	8007008 <findslot>
 8007258:	2409      	movs	r4, #9
 800725a:	4605      	mov	r5, r0
 800725c:	b920      	cbnz	r0, 8007268 <_isatty+0x16>
 800725e:	f000 fd3b 	bl	8007cd8 <__errno>
 8007262:	6004      	str	r4, [r0, #0]
 8007264:	2000      	movs	r0, #0
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	4620      	mov	r0, r4
 800726a:	4629      	mov	r1, r5
 800726c:	beab      	bkpt	0x00ab
 800726e:	4604      	mov	r4, r0
 8007270:	2c01      	cmp	r4, #1
 8007272:	4620      	mov	r0, r4
 8007274:	d0f7      	beq.n	8007266 <_isatty+0x14>
 8007276:	f000 fd2f 	bl	8007cd8 <__errno>
 800727a:	2513      	movs	r5, #19
 800727c:	4604      	mov	r4, r0
 800727e:	2600      	movs	r6, #0
 8007280:	4628      	mov	r0, r5
 8007282:	4631      	mov	r1, r6
 8007284:	beab      	bkpt	0x00ab
 8007286:	4605      	mov	r5, r0
 8007288:	6025      	str	r5, [r4, #0]
 800728a:	e7eb      	b.n	8007264 <_isatty+0x12>

0800728c <__cvt>:
 800728c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007290:	b088      	sub	sp, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	461d      	mov	r5, r3
 8007296:	4614      	mov	r4, r2
 8007298:	bfbc      	itt	lt
 800729a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800729e:	4614      	movlt	r4, r2
 80072a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072a2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80072a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80072a8:	bfb6      	itet	lt
 80072aa:	461d      	movlt	r5, r3
 80072ac:	2300      	movge	r3, #0
 80072ae:	232d      	movlt	r3, #45	@ 0x2d
 80072b0:	7013      	strb	r3, [r2, #0]
 80072b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072b4:	f023 0820 	bic.w	r8, r3, #32
 80072b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072bc:	d005      	beq.n	80072ca <__cvt+0x3e>
 80072be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072c2:	d100      	bne.n	80072c6 <__cvt+0x3a>
 80072c4:	3601      	adds	r6, #1
 80072c6:	2302      	movs	r3, #2
 80072c8:	e000      	b.n	80072cc <__cvt+0x40>
 80072ca:	2303      	movs	r3, #3
 80072cc:	aa07      	add	r2, sp, #28
 80072ce:	9204      	str	r2, [sp, #16]
 80072d0:	aa06      	add	r2, sp, #24
 80072d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80072d6:	e9cd 3600 	strd	r3, r6, [sp]
 80072da:	4622      	mov	r2, r4
 80072dc:	462b      	mov	r3, r5
 80072de:	f000 fdd7 	bl	8007e90 <_dtoa_r>
 80072e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072e6:	4607      	mov	r7, r0
 80072e8:	d119      	bne.n	800731e <__cvt+0x92>
 80072ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072ec:	07db      	lsls	r3, r3, #31
 80072ee:	d50e      	bpl.n	800730e <__cvt+0x82>
 80072f0:	eb00 0906 	add.w	r9, r0, r6
 80072f4:	2200      	movs	r2, #0
 80072f6:	2300      	movs	r3, #0
 80072f8:	4620      	mov	r0, r4
 80072fa:	4629      	mov	r1, r5
 80072fc:	f7f9 fbf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007300:	b108      	cbz	r0, 8007306 <__cvt+0x7a>
 8007302:	f8cd 901c 	str.w	r9, [sp, #28]
 8007306:	2230      	movs	r2, #48	@ 0x30
 8007308:	9b07      	ldr	r3, [sp, #28]
 800730a:	454b      	cmp	r3, r9
 800730c:	d31e      	bcc.n	800734c <__cvt+0xc0>
 800730e:	9b07      	ldr	r3, [sp, #28]
 8007310:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007312:	1bdb      	subs	r3, r3, r7
 8007314:	4638      	mov	r0, r7
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	b008      	add	sp, #32
 800731a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800731e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007322:	eb00 0906 	add.w	r9, r0, r6
 8007326:	d1e5      	bne.n	80072f4 <__cvt+0x68>
 8007328:	7803      	ldrb	r3, [r0, #0]
 800732a:	2b30      	cmp	r3, #48	@ 0x30
 800732c:	d10a      	bne.n	8007344 <__cvt+0xb8>
 800732e:	2200      	movs	r2, #0
 8007330:	2300      	movs	r3, #0
 8007332:	4620      	mov	r0, r4
 8007334:	4629      	mov	r1, r5
 8007336:	f7f9 fbd7 	bl	8000ae8 <__aeabi_dcmpeq>
 800733a:	b918      	cbnz	r0, 8007344 <__cvt+0xb8>
 800733c:	f1c6 0601 	rsb	r6, r6, #1
 8007340:	f8ca 6000 	str.w	r6, [sl]
 8007344:	f8da 3000 	ldr.w	r3, [sl]
 8007348:	4499      	add	r9, r3
 800734a:	e7d3      	b.n	80072f4 <__cvt+0x68>
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	9107      	str	r1, [sp, #28]
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e7d9      	b.n	8007308 <__cvt+0x7c>

08007354 <__exponent>:
 8007354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007356:	2900      	cmp	r1, #0
 8007358:	bfba      	itte	lt
 800735a:	4249      	neglt	r1, r1
 800735c:	232d      	movlt	r3, #45	@ 0x2d
 800735e:	232b      	movge	r3, #43	@ 0x2b
 8007360:	2909      	cmp	r1, #9
 8007362:	7002      	strb	r2, [r0, #0]
 8007364:	7043      	strb	r3, [r0, #1]
 8007366:	dd29      	ble.n	80073bc <__exponent+0x68>
 8007368:	f10d 0307 	add.w	r3, sp, #7
 800736c:	461d      	mov	r5, r3
 800736e:	270a      	movs	r7, #10
 8007370:	461a      	mov	r2, r3
 8007372:	fbb1 f6f7 	udiv	r6, r1, r7
 8007376:	fb07 1416 	mls	r4, r7, r6, r1
 800737a:	3430      	adds	r4, #48	@ 0x30
 800737c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007380:	460c      	mov	r4, r1
 8007382:	2c63      	cmp	r4, #99	@ 0x63
 8007384:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007388:	4631      	mov	r1, r6
 800738a:	dcf1      	bgt.n	8007370 <__exponent+0x1c>
 800738c:	3130      	adds	r1, #48	@ 0x30
 800738e:	1e94      	subs	r4, r2, #2
 8007390:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007394:	1c41      	adds	r1, r0, #1
 8007396:	4623      	mov	r3, r4
 8007398:	42ab      	cmp	r3, r5
 800739a:	d30a      	bcc.n	80073b2 <__exponent+0x5e>
 800739c:	f10d 0309 	add.w	r3, sp, #9
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	42ac      	cmp	r4, r5
 80073a4:	bf88      	it	hi
 80073a6:	2300      	movhi	r3, #0
 80073a8:	3302      	adds	r3, #2
 80073aa:	4403      	add	r3, r0
 80073ac:	1a18      	subs	r0, r3, r0
 80073ae:	b003      	add	sp, #12
 80073b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073ba:	e7ed      	b.n	8007398 <__exponent+0x44>
 80073bc:	2330      	movs	r3, #48	@ 0x30
 80073be:	3130      	adds	r1, #48	@ 0x30
 80073c0:	7083      	strb	r3, [r0, #2]
 80073c2:	70c1      	strb	r1, [r0, #3]
 80073c4:	1d03      	adds	r3, r0, #4
 80073c6:	e7f1      	b.n	80073ac <__exponent+0x58>

080073c8 <_printf_float>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	b091      	sub	sp, #68	@ 0x44
 80073ce:	460c      	mov	r4, r1
 80073d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80073d4:	4616      	mov	r6, r2
 80073d6:	461f      	mov	r7, r3
 80073d8:	4605      	mov	r5, r0
 80073da:	f000 fc79 	bl	8007cd0 <_localeconv_r>
 80073de:	6803      	ldr	r3, [r0, #0]
 80073e0:	9308      	str	r3, [sp, #32]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f8 ff54 	bl	8000290 <strlen>
 80073e8:	2300      	movs	r3, #0
 80073ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80073ec:	f8d8 3000 	ldr.w	r3, [r8]
 80073f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80073f2:	3307      	adds	r3, #7
 80073f4:	f023 0307 	bic.w	r3, r3, #7
 80073f8:	f103 0208 	add.w	r2, r3, #8
 80073fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007400:	f8d4 b000 	ldr.w	fp, [r4]
 8007404:	f8c8 2000 	str.w	r2, [r8]
 8007408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800740c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007412:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007416:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800741a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800741e:	4b9d      	ldr	r3, [pc, #628]	@ (8007694 <_printf_float+0x2cc>)
 8007420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007424:	f7f9 fb92 	bl	8000b4c <__aeabi_dcmpun>
 8007428:	bb70      	cbnz	r0, 8007488 <_printf_float+0xc0>
 800742a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800742e:	4b99      	ldr	r3, [pc, #612]	@ (8007694 <_printf_float+0x2cc>)
 8007430:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007434:	f7f9 fb6c 	bl	8000b10 <__aeabi_dcmple>
 8007438:	bb30      	cbnz	r0, 8007488 <_printf_float+0xc0>
 800743a:	2200      	movs	r2, #0
 800743c:	2300      	movs	r3, #0
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f9 fb5b 	bl	8000afc <__aeabi_dcmplt>
 8007446:	b110      	cbz	r0, 800744e <_printf_float+0x86>
 8007448:	232d      	movs	r3, #45	@ 0x2d
 800744a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800744e:	4a92      	ldr	r2, [pc, #584]	@ (8007698 <_printf_float+0x2d0>)
 8007450:	4b92      	ldr	r3, [pc, #584]	@ (800769c <_printf_float+0x2d4>)
 8007452:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007456:	bf94      	ite	ls
 8007458:	4690      	movls	r8, r2
 800745a:	4698      	movhi	r8, r3
 800745c:	2303      	movs	r3, #3
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	f02b 0304 	bic.w	r3, fp, #4
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	f04f 0900 	mov.w	r9, #0
 800746a:	9700      	str	r7, [sp, #0]
 800746c:	4633      	mov	r3, r6
 800746e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f000 f9d4 	bl	8007820 <_printf_common>
 8007478:	3001      	adds	r0, #1
 800747a:	f040 808f 	bne.w	800759c <_printf_float+0x1d4>
 800747e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007482:	b011      	add	sp, #68	@ 0x44
 8007484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007488:	4642      	mov	r2, r8
 800748a:	464b      	mov	r3, r9
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 fb5c 	bl	8000b4c <__aeabi_dcmpun>
 8007494:	b140      	cbz	r0, 80074a8 <_printf_float+0xe0>
 8007496:	464b      	mov	r3, r9
 8007498:	2b00      	cmp	r3, #0
 800749a:	bfbc      	itt	lt
 800749c:	232d      	movlt	r3, #45	@ 0x2d
 800749e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074a2:	4a7f      	ldr	r2, [pc, #508]	@ (80076a0 <_printf_float+0x2d8>)
 80074a4:	4b7f      	ldr	r3, [pc, #508]	@ (80076a4 <_printf_float+0x2dc>)
 80074a6:	e7d4      	b.n	8007452 <_printf_float+0x8a>
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80074b0:	d13f      	bne.n	8007532 <_printf_float+0x16a>
 80074b2:	2306      	movs	r3, #6
 80074b4:	6063      	str	r3, [r4, #4]
 80074b6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80074ba:	2200      	movs	r2, #0
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	9206      	str	r2, [sp, #24]
 80074c0:	aa0e      	add	r2, sp, #56	@ 0x38
 80074c2:	e9cd a204 	strd	sl, r2, [sp, #16]
 80074c6:	aa0d      	add	r2, sp, #52	@ 0x34
 80074c8:	9203      	str	r2, [sp, #12]
 80074ca:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80074ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	4642      	mov	r2, r8
 80074d8:	464b      	mov	r3, r9
 80074da:	4628      	mov	r0, r5
 80074dc:	910a      	str	r1, [sp, #40]	@ 0x28
 80074de:	f7ff fed5 	bl	800728c <__cvt>
 80074e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074e4:	2947      	cmp	r1, #71	@ 0x47
 80074e6:	4680      	mov	r8, r0
 80074e8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80074ea:	d128      	bne.n	800753e <_printf_float+0x176>
 80074ec:	1cc8      	adds	r0, r1, #3
 80074ee:	db02      	blt.n	80074f6 <_printf_float+0x12e>
 80074f0:	6863      	ldr	r3, [r4, #4]
 80074f2:	4299      	cmp	r1, r3
 80074f4:	dd40      	ble.n	8007578 <_printf_float+0x1b0>
 80074f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80074fa:	fa5f fa8a 	uxtb.w	sl, sl
 80074fe:	3901      	subs	r1, #1
 8007500:	4652      	mov	r2, sl
 8007502:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007506:	910d      	str	r1, [sp, #52]	@ 0x34
 8007508:	f7ff ff24 	bl	8007354 <__exponent>
 800750c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800750e:	1813      	adds	r3, r2, r0
 8007510:	2a01      	cmp	r2, #1
 8007512:	4681      	mov	r9, r0
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	dc02      	bgt.n	800751e <_printf_float+0x156>
 8007518:	6822      	ldr	r2, [r4, #0]
 800751a:	07d2      	lsls	r2, r2, #31
 800751c:	d501      	bpl.n	8007522 <_printf_float+0x15a>
 800751e:	3301      	adds	r3, #1
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007526:	2b00      	cmp	r3, #0
 8007528:	d09f      	beq.n	800746a <_printf_float+0xa2>
 800752a:	232d      	movs	r3, #45	@ 0x2d
 800752c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007530:	e79b      	b.n	800746a <_printf_float+0xa2>
 8007532:	2947      	cmp	r1, #71	@ 0x47
 8007534:	d1bf      	bne.n	80074b6 <_printf_float+0xee>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1bd      	bne.n	80074b6 <_printf_float+0xee>
 800753a:	2301      	movs	r3, #1
 800753c:	e7ba      	b.n	80074b4 <_printf_float+0xec>
 800753e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007542:	d9dc      	bls.n	80074fe <_printf_float+0x136>
 8007544:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007548:	d118      	bne.n	800757c <_printf_float+0x1b4>
 800754a:	2900      	cmp	r1, #0
 800754c:	6863      	ldr	r3, [r4, #4]
 800754e:	dd0b      	ble.n	8007568 <_printf_float+0x1a0>
 8007550:	6121      	str	r1, [r4, #16]
 8007552:	b913      	cbnz	r3, 800755a <_printf_float+0x192>
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	07d0      	lsls	r0, r2, #31
 8007558:	d502      	bpl.n	8007560 <_printf_float+0x198>
 800755a:	3301      	adds	r3, #1
 800755c:	440b      	add	r3, r1
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	e7dc      	b.n	8007522 <_printf_float+0x15a>
 8007568:	b913      	cbnz	r3, 8007570 <_printf_float+0x1a8>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	07d2      	lsls	r2, r2, #31
 800756e:	d501      	bpl.n	8007574 <_printf_float+0x1ac>
 8007570:	3302      	adds	r3, #2
 8007572:	e7f4      	b.n	800755e <_printf_float+0x196>
 8007574:	2301      	movs	r3, #1
 8007576:	e7f2      	b.n	800755e <_printf_float+0x196>
 8007578:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800757c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800757e:	4299      	cmp	r1, r3
 8007580:	db05      	blt.n	800758e <_printf_float+0x1c6>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	6121      	str	r1, [r4, #16]
 8007586:	07d8      	lsls	r0, r3, #31
 8007588:	d5ea      	bpl.n	8007560 <_printf_float+0x198>
 800758a:	1c4b      	adds	r3, r1, #1
 800758c:	e7e7      	b.n	800755e <_printf_float+0x196>
 800758e:	2900      	cmp	r1, #0
 8007590:	bfd4      	ite	le
 8007592:	f1c1 0202 	rsble	r2, r1, #2
 8007596:	2201      	movgt	r2, #1
 8007598:	4413      	add	r3, r2
 800759a:	e7e0      	b.n	800755e <_printf_float+0x196>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	055a      	lsls	r2, r3, #21
 80075a0:	d407      	bmi.n	80075b2 <_printf_float+0x1ea>
 80075a2:	6923      	ldr	r3, [r4, #16]
 80075a4:	4642      	mov	r2, r8
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	d12b      	bne.n	8007608 <_printf_float+0x240>
 80075b0:	e765      	b.n	800747e <_printf_float+0xb6>
 80075b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075b6:	f240 80dd 	bls.w	8007774 <_printf_float+0x3ac>
 80075ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	f7f9 fa91 	bl	8000ae8 <__aeabi_dcmpeq>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d033      	beq.n	8007632 <_printf_float+0x26a>
 80075ca:	4a37      	ldr	r2, [pc, #220]	@ (80076a8 <_printf_float+0x2e0>)
 80075cc:	2301      	movs	r3, #1
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f af52 	beq.w	800747e <_printf_float+0xb6>
 80075da:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80075de:	4543      	cmp	r3, r8
 80075e0:	db02      	blt.n	80075e8 <_printf_float+0x220>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	07d8      	lsls	r0, r3, #31
 80075e6:	d50f      	bpl.n	8007608 <_printf_float+0x240>
 80075e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075ec:	4631      	mov	r1, r6
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b8      	blx	r7
 80075f2:	3001      	adds	r0, #1
 80075f4:	f43f af43 	beq.w	800747e <_printf_float+0xb6>
 80075f8:	f04f 0900 	mov.w	r9, #0
 80075fc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007600:	f104 0a1a 	add.w	sl, r4, #26
 8007604:	45c8      	cmp	r8, r9
 8007606:	dc09      	bgt.n	800761c <_printf_float+0x254>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	079b      	lsls	r3, r3, #30
 800760c:	f100 8103 	bmi.w	8007816 <_printf_float+0x44e>
 8007610:	68e0      	ldr	r0, [r4, #12]
 8007612:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007614:	4298      	cmp	r0, r3
 8007616:	bfb8      	it	lt
 8007618:	4618      	movlt	r0, r3
 800761a:	e732      	b.n	8007482 <_printf_float+0xba>
 800761c:	2301      	movs	r3, #1
 800761e:	4652      	mov	r2, sl
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f af29 	beq.w	800747e <_printf_float+0xb6>
 800762c:	f109 0901 	add.w	r9, r9, #1
 8007630:	e7e8      	b.n	8007604 <_printf_float+0x23c>
 8007632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007634:	2b00      	cmp	r3, #0
 8007636:	dc39      	bgt.n	80076ac <_printf_float+0x2e4>
 8007638:	4a1b      	ldr	r2, [pc, #108]	@ (80076a8 <_printf_float+0x2e0>)
 800763a:	2301      	movs	r3, #1
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f af1b 	beq.w	800747e <_printf_float+0xb6>
 8007648:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800764c:	ea59 0303 	orrs.w	r3, r9, r3
 8007650:	d102      	bne.n	8007658 <_printf_float+0x290>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	07d9      	lsls	r1, r3, #31
 8007656:	d5d7      	bpl.n	8007608 <_printf_float+0x240>
 8007658:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f af0b 	beq.w	800747e <_printf_float+0xb6>
 8007668:	f04f 0a00 	mov.w	sl, #0
 800766c:	f104 0b1a 	add.w	fp, r4, #26
 8007670:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007672:	425b      	negs	r3, r3
 8007674:	4553      	cmp	r3, sl
 8007676:	dc01      	bgt.n	800767c <_printf_float+0x2b4>
 8007678:	464b      	mov	r3, r9
 800767a:	e793      	b.n	80075a4 <_printf_float+0x1dc>
 800767c:	2301      	movs	r3, #1
 800767e:	465a      	mov	r2, fp
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	f43f aef9 	beq.w	800747e <_printf_float+0xb6>
 800768c:	f10a 0a01 	add.w	sl, sl, #1
 8007690:	e7ee      	b.n	8007670 <_printf_float+0x2a8>
 8007692:	bf00      	nop
 8007694:	7fefffff 	.word	0x7fefffff
 8007698:	0800ba74 	.word	0x0800ba74
 800769c:	0800ba78 	.word	0x0800ba78
 80076a0:	0800ba7c 	.word	0x0800ba7c
 80076a4:	0800ba80 	.word	0x0800ba80
 80076a8:	0800ba84 	.word	0x0800ba84
 80076ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076ae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80076b2:	4553      	cmp	r3, sl
 80076b4:	bfa8      	it	ge
 80076b6:	4653      	movge	r3, sl
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	4699      	mov	r9, r3
 80076bc:	dc36      	bgt.n	800772c <_printf_float+0x364>
 80076be:	f04f 0b00 	mov.w	fp, #0
 80076c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076c6:	f104 021a 	add.w	r2, r4, #26
 80076ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80076ce:	eba3 0309 	sub.w	r3, r3, r9
 80076d2:	455b      	cmp	r3, fp
 80076d4:	dc31      	bgt.n	800773a <_printf_float+0x372>
 80076d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076d8:	459a      	cmp	sl, r3
 80076da:	dc3a      	bgt.n	8007752 <_printf_float+0x38a>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	07da      	lsls	r2, r3, #31
 80076e0:	d437      	bmi.n	8007752 <_printf_float+0x38a>
 80076e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076e4:	ebaa 0903 	sub.w	r9, sl, r3
 80076e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ea:	ebaa 0303 	sub.w	r3, sl, r3
 80076ee:	4599      	cmp	r9, r3
 80076f0:	bfa8      	it	ge
 80076f2:	4699      	movge	r9, r3
 80076f4:	f1b9 0f00 	cmp.w	r9, #0
 80076f8:	dc33      	bgt.n	8007762 <_printf_float+0x39a>
 80076fa:	f04f 0800 	mov.w	r8, #0
 80076fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007702:	f104 0b1a 	add.w	fp, r4, #26
 8007706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007708:	ebaa 0303 	sub.w	r3, sl, r3
 800770c:	eba3 0309 	sub.w	r3, r3, r9
 8007710:	4543      	cmp	r3, r8
 8007712:	f77f af79 	ble.w	8007608 <_printf_float+0x240>
 8007716:	2301      	movs	r3, #1
 8007718:	465a      	mov	r2, fp
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	f43f aeac 	beq.w	800747e <_printf_float+0xb6>
 8007726:	f108 0801 	add.w	r8, r8, #1
 800772a:	e7ec      	b.n	8007706 <_printf_float+0x33e>
 800772c:	4642      	mov	r2, r8
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	d1c2      	bne.n	80076be <_printf_float+0x2f6>
 8007738:	e6a1      	b.n	800747e <_printf_float+0xb6>
 800773a:	2301      	movs	r3, #1
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	920a      	str	r2, [sp, #40]	@ 0x28
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f ae9a 	beq.w	800747e <_printf_float+0xb6>
 800774a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800774c:	f10b 0b01 	add.w	fp, fp, #1
 8007750:	e7bb      	b.n	80076ca <_printf_float+0x302>
 8007752:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	d1c0      	bne.n	80076e2 <_printf_float+0x31a>
 8007760:	e68d      	b.n	800747e <_printf_float+0xb6>
 8007762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007764:	464b      	mov	r3, r9
 8007766:	4442      	add	r2, r8
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	d1c3      	bne.n	80076fa <_printf_float+0x332>
 8007772:	e684      	b.n	800747e <_printf_float+0xb6>
 8007774:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007778:	f1ba 0f01 	cmp.w	sl, #1
 800777c:	dc01      	bgt.n	8007782 <_printf_float+0x3ba>
 800777e:	07db      	lsls	r3, r3, #31
 8007780:	d536      	bpl.n	80077f0 <_printf_float+0x428>
 8007782:	2301      	movs	r3, #1
 8007784:	4642      	mov	r2, r8
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f ae76 	beq.w	800747e <_printf_float+0xb6>
 8007792:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	f43f ae6e 	beq.w	800747e <_printf_float+0xb6>
 80077a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077a6:	2200      	movs	r2, #0
 80077a8:	2300      	movs	r3, #0
 80077aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80077ae:	f7f9 f99b 	bl	8000ae8 <__aeabi_dcmpeq>
 80077b2:	b9c0      	cbnz	r0, 80077e6 <_printf_float+0x41e>
 80077b4:	4653      	mov	r3, sl
 80077b6:	f108 0201 	add.w	r2, r8, #1
 80077ba:	4631      	mov	r1, r6
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	d10c      	bne.n	80077de <_printf_float+0x416>
 80077c4:	e65b      	b.n	800747e <_printf_float+0xb6>
 80077c6:	2301      	movs	r3, #1
 80077c8:	465a      	mov	r2, fp
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f ae54 	beq.w	800747e <_printf_float+0xb6>
 80077d6:	f108 0801 	add.w	r8, r8, #1
 80077da:	45d0      	cmp	r8, sl
 80077dc:	dbf3      	blt.n	80077c6 <_printf_float+0x3fe>
 80077de:	464b      	mov	r3, r9
 80077e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077e4:	e6df      	b.n	80075a6 <_printf_float+0x1de>
 80077e6:	f04f 0800 	mov.w	r8, #0
 80077ea:	f104 0b1a 	add.w	fp, r4, #26
 80077ee:	e7f4      	b.n	80077da <_printf_float+0x412>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4642      	mov	r2, r8
 80077f4:	e7e1      	b.n	80077ba <_printf_float+0x3f2>
 80077f6:	2301      	movs	r3, #1
 80077f8:	464a      	mov	r2, r9
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae3c 	beq.w	800747e <_printf_float+0xb6>
 8007806:	f108 0801 	add.w	r8, r8, #1
 800780a:	68e3      	ldr	r3, [r4, #12]
 800780c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800780e:	1a5b      	subs	r3, r3, r1
 8007810:	4543      	cmp	r3, r8
 8007812:	dcf0      	bgt.n	80077f6 <_printf_float+0x42e>
 8007814:	e6fc      	b.n	8007610 <_printf_float+0x248>
 8007816:	f04f 0800 	mov.w	r8, #0
 800781a:	f104 0919 	add.w	r9, r4, #25
 800781e:	e7f4      	b.n	800780a <_printf_float+0x442>

08007820 <_printf_common>:
 8007820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007824:	4616      	mov	r6, r2
 8007826:	4698      	mov	r8, r3
 8007828:	688a      	ldr	r2, [r1, #8]
 800782a:	690b      	ldr	r3, [r1, #16]
 800782c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007830:	4293      	cmp	r3, r2
 8007832:	bfb8      	it	lt
 8007834:	4613      	movlt	r3, r2
 8007836:	6033      	str	r3, [r6, #0]
 8007838:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800783c:	4607      	mov	r7, r0
 800783e:	460c      	mov	r4, r1
 8007840:	b10a      	cbz	r2, 8007846 <_printf_common+0x26>
 8007842:	3301      	adds	r3, #1
 8007844:	6033      	str	r3, [r6, #0]
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	0699      	lsls	r1, r3, #26
 800784a:	bf42      	ittt	mi
 800784c:	6833      	ldrmi	r3, [r6, #0]
 800784e:	3302      	addmi	r3, #2
 8007850:	6033      	strmi	r3, [r6, #0]
 8007852:	6825      	ldr	r5, [r4, #0]
 8007854:	f015 0506 	ands.w	r5, r5, #6
 8007858:	d106      	bne.n	8007868 <_printf_common+0x48>
 800785a:	f104 0a19 	add.w	sl, r4, #25
 800785e:	68e3      	ldr	r3, [r4, #12]
 8007860:	6832      	ldr	r2, [r6, #0]
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	42ab      	cmp	r3, r5
 8007866:	dc26      	bgt.n	80078b6 <_printf_common+0x96>
 8007868:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	3b00      	subs	r3, #0
 8007870:	bf18      	it	ne
 8007872:	2301      	movne	r3, #1
 8007874:	0692      	lsls	r2, r2, #26
 8007876:	d42b      	bmi.n	80078d0 <_printf_common+0xb0>
 8007878:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800787c:	4641      	mov	r1, r8
 800787e:	4638      	mov	r0, r7
 8007880:	47c8      	blx	r9
 8007882:	3001      	adds	r0, #1
 8007884:	d01e      	beq.n	80078c4 <_printf_common+0xa4>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	6922      	ldr	r2, [r4, #16]
 800788a:	f003 0306 	and.w	r3, r3, #6
 800788e:	2b04      	cmp	r3, #4
 8007890:	bf02      	ittt	eq
 8007892:	68e5      	ldreq	r5, [r4, #12]
 8007894:	6833      	ldreq	r3, [r6, #0]
 8007896:	1aed      	subeq	r5, r5, r3
 8007898:	68a3      	ldr	r3, [r4, #8]
 800789a:	bf0c      	ite	eq
 800789c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a0:	2500      	movne	r5, #0
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bfc4      	itt	gt
 80078a6:	1a9b      	subgt	r3, r3, r2
 80078a8:	18ed      	addgt	r5, r5, r3
 80078aa:	2600      	movs	r6, #0
 80078ac:	341a      	adds	r4, #26
 80078ae:	42b5      	cmp	r5, r6
 80078b0:	d11a      	bne.n	80078e8 <_printf_common+0xc8>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e008      	b.n	80078c8 <_printf_common+0xa8>
 80078b6:	2301      	movs	r3, #1
 80078b8:	4652      	mov	r2, sl
 80078ba:	4641      	mov	r1, r8
 80078bc:	4638      	mov	r0, r7
 80078be:	47c8      	blx	r9
 80078c0:	3001      	adds	r0, #1
 80078c2:	d103      	bne.n	80078cc <_printf_common+0xac>
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078cc:	3501      	adds	r5, #1
 80078ce:	e7c6      	b.n	800785e <_printf_common+0x3e>
 80078d0:	18e1      	adds	r1, r4, r3
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	2030      	movs	r0, #48	@ 0x30
 80078d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078da:	4422      	add	r2, r4
 80078dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078e4:	3302      	adds	r3, #2
 80078e6:	e7c7      	b.n	8007878 <_printf_common+0x58>
 80078e8:	2301      	movs	r3, #1
 80078ea:	4622      	mov	r2, r4
 80078ec:	4641      	mov	r1, r8
 80078ee:	4638      	mov	r0, r7
 80078f0:	47c8      	blx	r9
 80078f2:	3001      	adds	r0, #1
 80078f4:	d0e6      	beq.n	80078c4 <_printf_common+0xa4>
 80078f6:	3601      	adds	r6, #1
 80078f8:	e7d9      	b.n	80078ae <_printf_common+0x8e>
	...

080078fc <_printf_i>:
 80078fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	7e0f      	ldrb	r7, [r1, #24]
 8007902:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007904:	2f78      	cmp	r7, #120	@ 0x78
 8007906:	4691      	mov	r9, r2
 8007908:	4680      	mov	r8, r0
 800790a:	460c      	mov	r4, r1
 800790c:	469a      	mov	sl, r3
 800790e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007912:	d807      	bhi.n	8007924 <_printf_i+0x28>
 8007914:	2f62      	cmp	r7, #98	@ 0x62
 8007916:	d80a      	bhi.n	800792e <_printf_i+0x32>
 8007918:	2f00      	cmp	r7, #0
 800791a:	f000 80d2 	beq.w	8007ac2 <_printf_i+0x1c6>
 800791e:	2f58      	cmp	r7, #88	@ 0x58
 8007920:	f000 80b9 	beq.w	8007a96 <_printf_i+0x19a>
 8007924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800792c:	e03a      	b.n	80079a4 <_printf_i+0xa8>
 800792e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007932:	2b15      	cmp	r3, #21
 8007934:	d8f6      	bhi.n	8007924 <_printf_i+0x28>
 8007936:	a101      	add	r1, pc, #4	@ (adr r1, 800793c <_printf_i+0x40>)
 8007938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800793c:	08007995 	.word	0x08007995
 8007940:	080079a9 	.word	0x080079a9
 8007944:	08007925 	.word	0x08007925
 8007948:	08007925 	.word	0x08007925
 800794c:	08007925 	.word	0x08007925
 8007950:	08007925 	.word	0x08007925
 8007954:	080079a9 	.word	0x080079a9
 8007958:	08007925 	.word	0x08007925
 800795c:	08007925 	.word	0x08007925
 8007960:	08007925 	.word	0x08007925
 8007964:	08007925 	.word	0x08007925
 8007968:	08007aa9 	.word	0x08007aa9
 800796c:	080079d3 	.word	0x080079d3
 8007970:	08007a63 	.word	0x08007a63
 8007974:	08007925 	.word	0x08007925
 8007978:	08007925 	.word	0x08007925
 800797c:	08007acb 	.word	0x08007acb
 8007980:	08007925 	.word	0x08007925
 8007984:	080079d3 	.word	0x080079d3
 8007988:	08007925 	.word	0x08007925
 800798c:	08007925 	.word	0x08007925
 8007990:	08007a6b 	.word	0x08007a6b
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	1d1a      	adds	r2, r3, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6032      	str	r2, [r6, #0]
 800799c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079a4:	2301      	movs	r3, #1
 80079a6:	e09d      	b.n	8007ae4 <_printf_i+0x1e8>
 80079a8:	6833      	ldr	r3, [r6, #0]
 80079aa:	6820      	ldr	r0, [r4, #0]
 80079ac:	1d19      	adds	r1, r3, #4
 80079ae:	6031      	str	r1, [r6, #0]
 80079b0:	0606      	lsls	r6, r0, #24
 80079b2:	d501      	bpl.n	80079b8 <_printf_i+0xbc>
 80079b4:	681d      	ldr	r5, [r3, #0]
 80079b6:	e003      	b.n	80079c0 <_printf_i+0xc4>
 80079b8:	0645      	lsls	r5, r0, #25
 80079ba:	d5fb      	bpl.n	80079b4 <_printf_i+0xb8>
 80079bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	da03      	bge.n	80079cc <_printf_i+0xd0>
 80079c4:	232d      	movs	r3, #45	@ 0x2d
 80079c6:	426d      	negs	r5, r5
 80079c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079cc:	4859      	ldr	r0, [pc, #356]	@ (8007b34 <_printf_i+0x238>)
 80079ce:	230a      	movs	r3, #10
 80079d0:	e011      	b.n	80079f6 <_printf_i+0xfa>
 80079d2:	6821      	ldr	r1, [r4, #0]
 80079d4:	6833      	ldr	r3, [r6, #0]
 80079d6:	0608      	lsls	r0, r1, #24
 80079d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80079dc:	d402      	bmi.n	80079e4 <_printf_i+0xe8>
 80079de:	0649      	lsls	r1, r1, #25
 80079e0:	bf48      	it	mi
 80079e2:	b2ad      	uxthmi	r5, r5
 80079e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80079e6:	4853      	ldr	r0, [pc, #332]	@ (8007b34 <_printf_i+0x238>)
 80079e8:	6033      	str	r3, [r6, #0]
 80079ea:	bf14      	ite	ne
 80079ec:	230a      	movne	r3, #10
 80079ee:	2308      	moveq	r3, #8
 80079f0:	2100      	movs	r1, #0
 80079f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079f6:	6866      	ldr	r6, [r4, #4]
 80079f8:	60a6      	str	r6, [r4, #8]
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	bfa2      	ittt	ge
 80079fe:	6821      	ldrge	r1, [r4, #0]
 8007a00:	f021 0104 	bicge.w	r1, r1, #4
 8007a04:	6021      	strge	r1, [r4, #0]
 8007a06:	b90d      	cbnz	r5, 8007a0c <_printf_i+0x110>
 8007a08:	2e00      	cmp	r6, #0
 8007a0a:	d04b      	beq.n	8007aa4 <_printf_i+0x1a8>
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a12:	fb03 5711 	mls	r7, r3, r1, r5
 8007a16:	5dc7      	ldrb	r7, [r0, r7]
 8007a18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a1c:	462f      	mov	r7, r5
 8007a1e:	42bb      	cmp	r3, r7
 8007a20:	460d      	mov	r5, r1
 8007a22:	d9f4      	bls.n	8007a0e <_printf_i+0x112>
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d10b      	bne.n	8007a40 <_printf_i+0x144>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	07df      	lsls	r7, r3, #31
 8007a2c:	d508      	bpl.n	8007a40 <_printf_i+0x144>
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	6861      	ldr	r1, [r4, #4]
 8007a32:	4299      	cmp	r1, r3
 8007a34:	bfde      	ittt	le
 8007a36:	2330      	movle	r3, #48	@ 0x30
 8007a38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a3c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007a40:	1b92      	subs	r2, r2, r6
 8007a42:	6122      	str	r2, [r4, #16]
 8007a44:	f8cd a000 	str.w	sl, [sp]
 8007a48:	464b      	mov	r3, r9
 8007a4a:	aa03      	add	r2, sp, #12
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4640      	mov	r0, r8
 8007a50:	f7ff fee6 	bl	8007820 <_printf_common>
 8007a54:	3001      	adds	r0, #1
 8007a56:	d14a      	bne.n	8007aee <_printf_i+0x1f2>
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a5c:	b004      	add	sp, #16
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	f043 0320 	orr.w	r3, r3, #32
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	4833      	ldr	r0, [pc, #204]	@ (8007b38 <_printf_i+0x23c>)
 8007a6c:	2778      	movs	r7, #120	@ 0x78
 8007a6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	6831      	ldr	r1, [r6, #0]
 8007a76:	061f      	lsls	r7, r3, #24
 8007a78:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a7c:	d402      	bmi.n	8007a84 <_printf_i+0x188>
 8007a7e:	065f      	lsls	r7, r3, #25
 8007a80:	bf48      	it	mi
 8007a82:	b2ad      	uxthmi	r5, r5
 8007a84:	6031      	str	r1, [r6, #0]
 8007a86:	07d9      	lsls	r1, r3, #31
 8007a88:	bf44      	itt	mi
 8007a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a8e:	6023      	strmi	r3, [r4, #0]
 8007a90:	b11d      	cbz	r5, 8007a9a <_printf_i+0x19e>
 8007a92:	2310      	movs	r3, #16
 8007a94:	e7ac      	b.n	80079f0 <_printf_i+0xf4>
 8007a96:	4827      	ldr	r0, [pc, #156]	@ (8007b34 <_printf_i+0x238>)
 8007a98:	e7e9      	b.n	8007a6e <_printf_i+0x172>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	f023 0320 	bic.w	r3, r3, #32
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	e7f6      	b.n	8007a92 <_printf_i+0x196>
 8007aa4:	4616      	mov	r6, r2
 8007aa6:	e7bd      	b.n	8007a24 <_printf_i+0x128>
 8007aa8:	6833      	ldr	r3, [r6, #0]
 8007aaa:	6825      	ldr	r5, [r4, #0]
 8007aac:	6961      	ldr	r1, [r4, #20]
 8007aae:	1d18      	adds	r0, r3, #4
 8007ab0:	6030      	str	r0, [r6, #0]
 8007ab2:	062e      	lsls	r6, r5, #24
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	d501      	bpl.n	8007abc <_printf_i+0x1c0>
 8007ab8:	6019      	str	r1, [r3, #0]
 8007aba:	e002      	b.n	8007ac2 <_printf_i+0x1c6>
 8007abc:	0668      	lsls	r0, r5, #25
 8007abe:	d5fb      	bpl.n	8007ab8 <_printf_i+0x1bc>
 8007ac0:	8019      	strh	r1, [r3, #0]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6123      	str	r3, [r4, #16]
 8007ac6:	4616      	mov	r6, r2
 8007ac8:	e7bc      	b.n	8007a44 <_printf_i+0x148>
 8007aca:	6833      	ldr	r3, [r6, #0]
 8007acc:	1d1a      	adds	r2, r3, #4
 8007ace:	6032      	str	r2, [r6, #0]
 8007ad0:	681e      	ldr	r6, [r3, #0]
 8007ad2:	6862      	ldr	r2, [r4, #4]
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f7f8 fb8a 	bl	80001f0 <memchr>
 8007adc:	b108      	cbz	r0, 8007ae2 <_printf_i+0x1e6>
 8007ade:	1b80      	subs	r0, r0, r6
 8007ae0:	6060      	str	r0, [r4, #4]
 8007ae2:	6863      	ldr	r3, [r4, #4]
 8007ae4:	6123      	str	r3, [r4, #16]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aec:	e7aa      	b.n	8007a44 <_printf_i+0x148>
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	4632      	mov	r2, r6
 8007af2:	4649      	mov	r1, r9
 8007af4:	4640      	mov	r0, r8
 8007af6:	47d0      	blx	sl
 8007af8:	3001      	adds	r0, #1
 8007afa:	d0ad      	beq.n	8007a58 <_printf_i+0x15c>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	079b      	lsls	r3, r3, #30
 8007b00:	d413      	bmi.n	8007b2a <_printf_i+0x22e>
 8007b02:	68e0      	ldr	r0, [r4, #12]
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	4298      	cmp	r0, r3
 8007b08:	bfb8      	it	lt
 8007b0a:	4618      	movlt	r0, r3
 8007b0c:	e7a6      	b.n	8007a5c <_printf_i+0x160>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	4632      	mov	r2, r6
 8007b12:	4649      	mov	r1, r9
 8007b14:	4640      	mov	r0, r8
 8007b16:	47d0      	blx	sl
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d09d      	beq.n	8007a58 <_printf_i+0x15c>
 8007b1c:	3501      	adds	r5, #1
 8007b1e:	68e3      	ldr	r3, [r4, #12]
 8007b20:	9903      	ldr	r1, [sp, #12]
 8007b22:	1a5b      	subs	r3, r3, r1
 8007b24:	42ab      	cmp	r3, r5
 8007b26:	dcf2      	bgt.n	8007b0e <_printf_i+0x212>
 8007b28:	e7eb      	b.n	8007b02 <_printf_i+0x206>
 8007b2a:	2500      	movs	r5, #0
 8007b2c:	f104 0619 	add.w	r6, r4, #25
 8007b30:	e7f5      	b.n	8007b1e <_printf_i+0x222>
 8007b32:	bf00      	nop
 8007b34:	0800ba86 	.word	0x0800ba86
 8007b38:	0800ba97 	.word	0x0800ba97

08007b3c <std>:
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	b510      	push	{r4, lr}
 8007b40:	4604      	mov	r4, r0
 8007b42:	e9c0 3300 	strd	r3, r3, [r0]
 8007b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b4a:	6083      	str	r3, [r0, #8]
 8007b4c:	8181      	strh	r1, [r0, #12]
 8007b4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b50:	81c2      	strh	r2, [r0, #14]
 8007b52:	6183      	str	r3, [r0, #24]
 8007b54:	4619      	mov	r1, r3
 8007b56:	2208      	movs	r2, #8
 8007b58:	305c      	adds	r0, #92	@ 0x5c
 8007b5a:	f000 f8b1 	bl	8007cc0 <memset>
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <std+0x58>)
 8007b60:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <std+0x5c>)
 8007b64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b66:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <std+0x60>)
 8007b68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba0 <std+0x64>)
 8007b6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba4 <std+0x68>)
 8007b70:	6224      	str	r4, [r4, #32]
 8007b72:	429c      	cmp	r4, r3
 8007b74:	d006      	beq.n	8007b84 <std+0x48>
 8007b76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b7a:	4294      	cmp	r4, r2
 8007b7c:	d002      	beq.n	8007b84 <std+0x48>
 8007b7e:	33d0      	adds	r3, #208	@ 0xd0
 8007b80:	429c      	cmp	r4, r3
 8007b82:	d105      	bne.n	8007b90 <std+0x54>
 8007b84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b8c:	f000 b8ce 	b.w	8007d2c <__retarget_lock_init_recursive>
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	bf00      	nop
 8007b94:	08009695 	.word	0x08009695
 8007b98:	080096b7 	.word	0x080096b7
 8007b9c:	080096ef 	.word	0x080096ef
 8007ba0:	08009713 	.word	0x08009713
 8007ba4:	20025cec 	.word	0x20025cec

08007ba8 <stdio_exit_handler>:
 8007ba8:	4a02      	ldr	r2, [pc, #8]	@ (8007bb4 <stdio_exit_handler+0xc>)
 8007baa:	4903      	ldr	r1, [pc, #12]	@ (8007bb8 <stdio_exit_handler+0x10>)
 8007bac:	4803      	ldr	r0, [pc, #12]	@ (8007bbc <stdio_exit_handler+0x14>)
 8007bae:	f000 b869 	b.w	8007c84 <_fwalk_sglue>
 8007bb2:	bf00      	nop
 8007bb4:	20000024 	.word	0x20000024
 8007bb8:	08008ef5 	.word	0x08008ef5
 8007bbc:	20000034 	.word	0x20000034

08007bc0 <cleanup_stdio>:
 8007bc0:	6841      	ldr	r1, [r0, #4]
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf4 <cleanup_stdio+0x34>)
 8007bc4:	4299      	cmp	r1, r3
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	4604      	mov	r4, r0
 8007bca:	d001      	beq.n	8007bd0 <cleanup_stdio+0x10>
 8007bcc:	f001 f992 	bl	8008ef4 <_fflush_r>
 8007bd0:	68a1      	ldr	r1, [r4, #8]
 8007bd2:	4b09      	ldr	r3, [pc, #36]	@ (8007bf8 <cleanup_stdio+0x38>)
 8007bd4:	4299      	cmp	r1, r3
 8007bd6:	d002      	beq.n	8007bde <cleanup_stdio+0x1e>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f001 f98b 	bl	8008ef4 <_fflush_r>
 8007bde:	68e1      	ldr	r1, [r4, #12]
 8007be0:	4b06      	ldr	r3, [pc, #24]	@ (8007bfc <cleanup_stdio+0x3c>)
 8007be2:	4299      	cmp	r1, r3
 8007be4:	d004      	beq.n	8007bf0 <cleanup_stdio+0x30>
 8007be6:	4620      	mov	r0, r4
 8007be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bec:	f001 b982 	b.w	8008ef4 <_fflush_r>
 8007bf0:	bd10      	pop	{r4, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20025cec 	.word	0x20025cec
 8007bf8:	20025d54 	.word	0x20025d54
 8007bfc:	20025dbc 	.word	0x20025dbc

08007c00 <global_stdio_init.part.0>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <global_stdio_init.part.0+0x30>)
 8007c04:	4c0b      	ldr	r4, [pc, #44]	@ (8007c34 <global_stdio_init.part.0+0x34>)
 8007c06:	4a0c      	ldr	r2, [pc, #48]	@ (8007c38 <global_stdio_init.part.0+0x38>)
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2104      	movs	r1, #4
 8007c10:	f7ff ff94 	bl	8007b3c <std>
 8007c14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c18:	2201      	movs	r2, #1
 8007c1a:	2109      	movs	r1, #9
 8007c1c:	f7ff ff8e 	bl	8007b3c <std>
 8007c20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c24:	2202      	movs	r2, #2
 8007c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c2a:	2112      	movs	r1, #18
 8007c2c:	f7ff bf86 	b.w	8007b3c <std>
 8007c30:	20025e24 	.word	0x20025e24
 8007c34:	20025cec 	.word	0x20025cec
 8007c38:	08007ba9 	.word	0x08007ba9

08007c3c <__sfp_lock_acquire>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	@ (8007c44 <__sfp_lock_acquire+0x8>)
 8007c3e:	f000 b876 	b.w	8007d2e <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	20025e29 	.word	0x20025e29

08007c48 <__sfp_lock_release>:
 8007c48:	4801      	ldr	r0, [pc, #4]	@ (8007c50 <__sfp_lock_release+0x8>)
 8007c4a:	f000 b871 	b.w	8007d30 <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	20025e29 	.word	0x20025e29

08007c54 <__sinit>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4604      	mov	r4, r0
 8007c58:	f7ff fff0 	bl	8007c3c <__sfp_lock_acquire>
 8007c5c:	6a23      	ldr	r3, [r4, #32]
 8007c5e:	b11b      	cbz	r3, 8007c68 <__sinit+0x14>
 8007c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c64:	f7ff bff0 	b.w	8007c48 <__sfp_lock_release>
 8007c68:	4b04      	ldr	r3, [pc, #16]	@ (8007c7c <__sinit+0x28>)
 8007c6a:	6223      	str	r3, [r4, #32]
 8007c6c:	4b04      	ldr	r3, [pc, #16]	@ (8007c80 <__sinit+0x2c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1f5      	bne.n	8007c60 <__sinit+0xc>
 8007c74:	f7ff ffc4 	bl	8007c00 <global_stdio_init.part.0>
 8007c78:	e7f2      	b.n	8007c60 <__sinit+0xc>
 8007c7a:	bf00      	nop
 8007c7c:	08007bc1 	.word	0x08007bc1
 8007c80:	20025e24 	.word	0x20025e24

08007c84 <_fwalk_sglue>:
 8007c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c88:	4607      	mov	r7, r0
 8007c8a:	4688      	mov	r8, r1
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	2600      	movs	r6, #0
 8007c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c94:	f1b9 0901 	subs.w	r9, r9, #1
 8007c98:	d505      	bpl.n	8007ca6 <_fwalk_sglue+0x22>
 8007c9a:	6824      	ldr	r4, [r4, #0]
 8007c9c:	2c00      	cmp	r4, #0
 8007c9e:	d1f7      	bne.n	8007c90 <_fwalk_sglue+0xc>
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d907      	bls.n	8007cbc <_fwalk_sglue+0x38>
 8007cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	d003      	beq.n	8007cbc <_fwalk_sglue+0x38>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	47c0      	blx	r8
 8007cba:	4306      	orrs	r6, r0
 8007cbc:	3568      	adds	r5, #104	@ 0x68
 8007cbe:	e7e9      	b.n	8007c94 <_fwalk_sglue+0x10>

08007cc0 <memset>:
 8007cc0:	4402      	add	r2, r0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d100      	bne.n	8007cca <memset+0xa>
 8007cc8:	4770      	bx	lr
 8007cca:	f803 1b01 	strb.w	r1, [r3], #1
 8007cce:	e7f9      	b.n	8007cc4 <memset+0x4>

08007cd0 <_localeconv_r>:
 8007cd0:	4800      	ldr	r0, [pc, #0]	@ (8007cd4 <_localeconv_r+0x4>)
 8007cd2:	4770      	bx	lr
 8007cd4:	20000170 	.word	0x20000170

08007cd8 <__errno>:
 8007cd8:	4b01      	ldr	r3, [pc, #4]	@ (8007ce0 <__errno+0x8>)
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20000030 	.word	0x20000030

08007ce4 <__libc_init_array>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8007d1c <__libc_init_array+0x38>)
 8007ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8007d20 <__libc_init_array+0x3c>)
 8007cea:	1b64      	subs	r4, r4, r5
 8007cec:	10a4      	asrs	r4, r4, #2
 8007cee:	2600      	movs	r6, #0
 8007cf0:	42a6      	cmp	r6, r4
 8007cf2:	d109      	bne.n	8007d08 <__libc_init_array+0x24>
 8007cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8007d24 <__libc_init_array+0x40>)
 8007cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8007d28 <__libc_init_array+0x44>)
 8007cf8:	f002 f8d2 	bl	8009ea0 <_init>
 8007cfc:	1b64      	subs	r4, r4, r5
 8007cfe:	10a4      	asrs	r4, r4, #2
 8007d00:	2600      	movs	r6, #0
 8007d02:	42a6      	cmp	r6, r4
 8007d04:	d105      	bne.n	8007d12 <__libc_init_array+0x2e>
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0c:	4798      	blx	r3
 8007d0e:	3601      	adds	r6, #1
 8007d10:	e7ee      	b.n	8007cf0 <__libc_init_array+0xc>
 8007d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d16:	4798      	blx	r3
 8007d18:	3601      	adds	r6, #1
 8007d1a:	e7f2      	b.n	8007d02 <__libc_init_array+0x1e>
 8007d1c:	0800bdf0 	.word	0x0800bdf0
 8007d20:	0800bdf0 	.word	0x0800bdf0
 8007d24:	0800bdf0 	.word	0x0800bdf0
 8007d28:	0800bdf4 	.word	0x0800bdf4

08007d2c <__retarget_lock_init_recursive>:
 8007d2c:	4770      	bx	lr

08007d2e <__retarget_lock_acquire_recursive>:
 8007d2e:	4770      	bx	lr

08007d30 <__retarget_lock_release_recursive>:
 8007d30:	4770      	bx	lr
	...

08007d34 <gcvt>:
 8007d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d36:	461c      	mov	r4, r3
 8007d38:	b085      	sub	sp, #20
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	4615      	mov	r5, r2
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4606      	mov	r6, r0
 8007d42:	460f      	mov	r7, r1
 8007d44:	f7f8 feda 	bl	8000afc <__aeabi_dcmplt>
 8007d48:	4623      	mov	r3, r4
 8007d4a:	b118      	cbz	r0, 8007d54 <gcvt+0x20>
 8007d4c:	222d      	movs	r2, #45	@ 0x2d
 8007d4e:	f803 2b01 	strb.w	r2, [r3], #1
 8007d52:	3d01      	subs	r5, #1
 8007d54:	2267      	movs	r2, #103	@ 0x67
 8007d56:	2100      	movs	r1, #0
 8007d58:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8007d5c:	e9cd 5300 	strd	r5, r3, [sp]
 8007d60:	4905      	ldr	r1, [pc, #20]	@ (8007d78 <gcvt+0x44>)
 8007d62:	4632      	mov	r2, r6
 8007d64:	6808      	ldr	r0, [r1, #0]
 8007d66:	463b      	mov	r3, r7
 8007d68:	f001 febe 	bl	8009ae8 <_gcvt>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	bf18      	it	ne
 8007d70:	4620      	movne	r0, r4
 8007d72:	b005      	add	sp, #20
 8007d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20000030 	.word	0x20000030

08007d7c <quorem>:
 8007d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	6903      	ldr	r3, [r0, #16]
 8007d82:	690c      	ldr	r4, [r1, #16]
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	4607      	mov	r7, r0
 8007d88:	db7e      	blt.n	8007e88 <quorem+0x10c>
 8007d8a:	3c01      	subs	r4, #1
 8007d8c:	f101 0814 	add.w	r8, r1, #20
 8007d90:	00a3      	lsls	r3, r4, #2
 8007d92:	f100 0514 	add.w	r5, r0, #20
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007da2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007da6:	3301      	adds	r3, #1
 8007da8:	429a      	cmp	r2, r3
 8007daa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dae:	fbb2 f6f3 	udiv	r6, r2, r3
 8007db2:	d32e      	bcc.n	8007e12 <quorem+0x96>
 8007db4:	f04f 0a00 	mov.w	sl, #0
 8007db8:	46c4      	mov	ip, r8
 8007dba:	46ae      	mov	lr, r5
 8007dbc:	46d3      	mov	fp, sl
 8007dbe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dc2:	b298      	uxth	r0, r3
 8007dc4:	fb06 a000 	mla	r0, r6, r0, sl
 8007dc8:	0c02      	lsrs	r2, r0, #16
 8007dca:	0c1b      	lsrs	r3, r3, #16
 8007dcc:	fb06 2303 	mla	r3, r6, r3, r2
 8007dd0:	f8de 2000 	ldr.w	r2, [lr]
 8007dd4:	b280      	uxth	r0, r0
 8007dd6:	b292      	uxth	r2, r2
 8007dd8:	1a12      	subs	r2, r2, r0
 8007dda:	445a      	add	r2, fp
 8007ddc:	f8de 0000 	ldr.w	r0, [lr]
 8007de0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007dea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007dee:	b292      	uxth	r2, r2
 8007df0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007df4:	45e1      	cmp	r9, ip
 8007df6:	f84e 2b04 	str.w	r2, [lr], #4
 8007dfa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007dfe:	d2de      	bcs.n	8007dbe <quorem+0x42>
 8007e00:	9b00      	ldr	r3, [sp, #0]
 8007e02:	58eb      	ldr	r3, [r5, r3]
 8007e04:	b92b      	cbnz	r3, 8007e12 <quorem+0x96>
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	3b04      	subs	r3, #4
 8007e0a:	429d      	cmp	r5, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	d32f      	bcc.n	8007e70 <quorem+0xf4>
 8007e10:	613c      	str	r4, [r7, #16]
 8007e12:	4638      	mov	r0, r7
 8007e14:	f001 fb1c 	bl	8009450 <__mcmp>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	db25      	blt.n	8007e68 <quorem+0xec>
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e24:	f8d1 c000 	ldr.w	ip, [r1]
 8007e28:	fa1f fe82 	uxth.w	lr, r2
 8007e2c:	fa1f f38c 	uxth.w	r3, ip
 8007e30:	eba3 030e 	sub.w	r3, r3, lr
 8007e34:	4403      	add	r3, r0
 8007e36:	0c12      	lsrs	r2, r2, #16
 8007e38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e46:	45c1      	cmp	r9, r8
 8007e48:	f841 3b04 	str.w	r3, [r1], #4
 8007e4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e50:	d2e6      	bcs.n	8007e20 <quorem+0xa4>
 8007e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e5a:	b922      	cbnz	r2, 8007e66 <quorem+0xea>
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	d30b      	bcc.n	8007e7c <quorem+0x100>
 8007e64:	613c      	str	r4, [r7, #16]
 8007e66:	3601      	adds	r6, #1
 8007e68:	4630      	mov	r0, r6
 8007e6a:	b003      	add	sp, #12
 8007e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	3b04      	subs	r3, #4
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	d1cb      	bne.n	8007e10 <quorem+0x94>
 8007e78:	3c01      	subs	r4, #1
 8007e7a:	e7c6      	b.n	8007e0a <quorem+0x8e>
 8007e7c:	6812      	ldr	r2, [r2, #0]
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	d1ef      	bne.n	8007e64 <quorem+0xe8>
 8007e84:	3c01      	subs	r4, #1
 8007e86:	e7ea      	b.n	8007e5e <quorem+0xe2>
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e7ee      	b.n	8007e6a <quorem+0xee>
 8007e8c:	0000      	movs	r0, r0
	...

08007e90 <_dtoa_r>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	69c7      	ldr	r7, [r0, #28]
 8007e96:	b097      	sub	sp, #92	@ 0x5c
 8007e98:	4614      	mov	r4, r2
 8007e9a:	461d      	mov	r5, r3
 8007e9c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007ea0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007ea2:	4683      	mov	fp, r0
 8007ea4:	b97f      	cbnz	r7, 8007ec6 <_dtoa_r+0x36>
 8007ea6:	2010      	movs	r0, #16
 8007ea8:	f000 fefa 	bl	8008ca0 <malloc>
 8007eac:	4602      	mov	r2, r0
 8007eae:	f8cb 001c 	str.w	r0, [fp, #28]
 8007eb2:	b920      	cbnz	r0, 8007ebe <_dtoa_r+0x2e>
 8007eb4:	4ba8      	ldr	r3, [pc, #672]	@ (8008158 <_dtoa_r+0x2c8>)
 8007eb6:	21ef      	movs	r1, #239	@ 0xef
 8007eb8:	48a8      	ldr	r0, [pc, #672]	@ (800815c <_dtoa_r+0x2cc>)
 8007eba:	f001 feef 	bl	8009c9c <__assert_func>
 8007ebe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ec2:	6007      	str	r7, [r0, #0]
 8007ec4:	60c7      	str	r7, [r0, #12]
 8007ec6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007eca:	6819      	ldr	r1, [r3, #0]
 8007ecc:	b159      	cbz	r1, 8007ee6 <_dtoa_r+0x56>
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	604a      	str	r2, [r1, #4]
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4093      	lsls	r3, r2
 8007ed6:	608b      	str	r3, [r1, #8]
 8007ed8:	4658      	mov	r0, fp
 8007eda:	f001 f87f 	bl	8008fdc <_Bfree>
 8007ede:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	1e2b      	subs	r3, r5, #0
 8007ee8:	bfb9      	ittee	lt
 8007eea:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007eee:	9303      	strlt	r3, [sp, #12]
 8007ef0:	2300      	movge	r3, #0
 8007ef2:	6033      	strge	r3, [r6, #0]
 8007ef4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ef8:	4b99      	ldr	r3, [pc, #612]	@ (8008160 <_dtoa_r+0x2d0>)
 8007efa:	bfbc      	itt	lt
 8007efc:	2201      	movlt	r2, #1
 8007efe:	6032      	strlt	r2, [r6, #0]
 8007f00:	ea33 0308 	bics.w	r3, r3, r8
 8007f04:	d112      	bne.n	8007f2c <_dtoa_r+0x9c>
 8007f06:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007f12:	4323      	orrs	r3, r4
 8007f14:	f000 8551 	beq.w	80089ba <_dtoa_r+0xb2a>
 8007f18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f1a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 8008164 <_dtoa_r+0x2d4>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8553 	beq.w	80089ca <_dtoa_r+0xb3a>
 8007f24:	f10a 0303 	add.w	r3, sl, #3
 8007f28:	f000 bd4d 	b.w	80089c6 <_dtoa_r+0xb36>
 8007f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f30:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f7f8 fdd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f40:	4607      	mov	r7, r0
 8007f42:	b158      	cbz	r0, 8007f5c <_dtoa_r+0xcc>
 8007f44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f46:	2301      	movs	r3, #1
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f4c:	b113      	cbz	r3, 8007f54 <_dtoa_r+0xc4>
 8007f4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007f50:	4b85      	ldr	r3, [pc, #532]	@ (8008168 <_dtoa_r+0x2d8>)
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800816c <_dtoa_r+0x2dc>
 8007f58:	f000 bd37 	b.w	80089ca <_dtoa_r+0xb3a>
 8007f5c:	ab14      	add	r3, sp, #80	@ 0x50
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	ab15      	add	r3, sp, #84	@ 0x54
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	4658      	mov	r0, fp
 8007f66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007f6a:	f001 fb1f 	bl	80095ac <__d2b>
 8007f6e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007f72:	4681      	mov	r9, r0
 8007f74:	2e00      	cmp	r6, #0
 8007f76:	d076      	beq.n	8008066 <_dtoa_r+0x1d6>
 8007f78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f7a:	9712      	str	r7, [sp, #72]	@ 0x48
 8007f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f90:	4619      	mov	r1, r3
 8007f92:	2200      	movs	r2, #0
 8007f94:	4b76      	ldr	r3, [pc, #472]	@ (8008170 <_dtoa_r+0x2e0>)
 8007f96:	f7f8 f987 	bl	80002a8 <__aeabi_dsub>
 8007f9a:	a369      	add	r3, pc, #420	@ (adr r3, 8008140 <_dtoa_r+0x2b0>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 fb3a 	bl	8000618 <__aeabi_dmul>
 8007fa4:	a368      	add	r3, pc, #416	@ (adr r3, 8008148 <_dtoa_r+0x2b8>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f97f 	bl	80002ac <__adddf3>
 8007fae:	4604      	mov	r4, r0
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	f7f8 fac6 	bl	8000544 <__aeabi_i2d>
 8007fb8:	a365      	add	r3, pc, #404	@ (adr r3, 8008150 <_dtoa_r+0x2c0>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 fb2b 	bl	8000618 <__aeabi_dmul>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	4629      	mov	r1, r5
 8007fca:	f7f8 f96f 	bl	80002ac <__adddf3>
 8007fce:	4604      	mov	r4, r0
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	f7f8 fdd1 	bl	8000b78 <__aeabi_d2iz>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	4607      	mov	r7, r0
 8007fda:	2300      	movs	r3, #0
 8007fdc:	4620      	mov	r0, r4
 8007fde:	4629      	mov	r1, r5
 8007fe0:	f7f8 fd8c 	bl	8000afc <__aeabi_dcmplt>
 8007fe4:	b140      	cbz	r0, 8007ff8 <_dtoa_r+0x168>
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	f7f8 faac 	bl	8000544 <__aeabi_i2d>
 8007fec:	4622      	mov	r2, r4
 8007fee:	462b      	mov	r3, r5
 8007ff0:	f7f8 fd7a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ff4:	b900      	cbnz	r0, 8007ff8 <_dtoa_r+0x168>
 8007ff6:	3f01      	subs	r7, #1
 8007ff8:	2f16      	cmp	r7, #22
 8007ffa:	d852      	bhi.n	80080a2 <_dtoa_r+0x212>
 8007ffc:	4b5d      	ldr	r3, [pc, #372]	@ (8008174 <_dtoa_r+0x2e4>)
 8007ffe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800800a:	f7f8 fd77 	bl	8000afc <__aeabi_dcmplt>
 800800e:	2800      	cmp	r0, #0
 8008010:	d049      	beq.n	80080a6 <_dtoa_r+0x216>
 8008012:	3f01      	subs	r7, #1
 8008014:	2300      	movs	r3, #0
 8008016:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008018:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800801a:	1b9b      	subs	r3, r3, r6
 800801c:	1e5a      	subs	r2, r3, #1
 800801e:	bf44      	itt	mi
 8008020:	f1c3 0801 	rsbmi	r8, r3, #1
 8008024:	2300      	movmi	r3, #0
 8008026:	9209      	str	r2, [sp, #36]	@ 0x24
 8008028:	bf54      	ite	pl
 800802a:	f04f 0800 	movpl.w	r8, #0
 800802e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008030:	2f00      	cmp	r7, #0
 8008032:	db3a      	blt.n	80080aa <_dtoa_r+0x21a>
 8008034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008036:	970e      	str	r7, [sp, #56]	@ 0x38
 8008038:	443b      	add	r3, r7
 800803a:	9309      	str	r3, [sp, #36]	@ 0x24
 800803c:	2300      	movs	r3, #0
 800803e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008040:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008042:	2b09      	cmp	r3, #9
 8008044:	d865      	bhi.n	8008112 <_dtoa_r+0x282>
 8008046:	2b05      	cmp	r3, #5
 8008048:	bfc4      	itt	gt
 800804a:	3b04      	subgt	r3, #4
 800804c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800804e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008050:	f1a3 0302 	sub.w	r3, r3, #2
 8008054:	bfcc      	ite	gt
 8008056:	2400      	movgt	r4, #0
 8008058:	2401      	movle	r4, #1
 800805a:	2b03      	cmp	r3, #3
 800805c:	d864      	bhi.n	8008128 <_dtoa_r+0x298>
 800805e:	e8df f003 	tbb	[pc, r3]
 8008062:	382b      	.short	0x382b
 8008064:	5636      	.short	0x5636
 8008066:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800806a:	441e      	add	r6, r3
 800806c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008070:	2b20      	cmp	r3, #32
 8008072:	bfc1      	itttt	gt
 8008074:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008078:	fa08 f803 	lslgt.w	r8, r8, r3
 800807c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008080:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008084:	bfd6      	itet	le
 8008086:	f1c3 0320 	rsble	r3, r3, #32
 800808a:	ea48 0003 	orrgt.w	r0, r8, r3
 800808e:	fa04 f003 	lslle.w	r0, r4, r3
 8008092:	f7f8 fa47 	bl	8000524 <__aeabi_ui2d>
 8008096:	2201      	movs	r2, #1
 8008098:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800809c:	3e01      	subs	r6, #1
 800809e:	9212      	str	r2, [sp, #72]	@ 0x48
 80080a0:	e776      	b.n	8007f90 <_dtoa_r+0x100>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e7b7      	b.n	8008016 <_dtoa_r+0x186>
 80080a6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80080a8:	e7b6      	b.n	8008018 <_dtoa_r+0x188>
 80080aa:	427b      	negs	r3, r7
 80080ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ae:	2300      	movs	r3, #0
 80080b0:	eba8 0807 	sub.w	r8, r8, r7
 80080b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80080b6:	e7c3      	b.n	8008040 <_dtoa_r+0x1b0>
 80080b8:	2300      	movs	r3, #0
 80080ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dc35      	bgt.n	800812e <_dtoa_r+0x29e>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80080c8:	461a      	mov	r2, r3
 80080ca:	9221      	str	r2, [sp, #132]	@ 0x84
 80080cc:	e00b      	b.n	80080e6 <_dtoa_r+0x256>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e7f3      	b.n	80080ba <_dtoa_r+0x22a>
 80080d2:	2300      	movs	r3, #0
 80080d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	9308      	str	r3, [sp, #32]
 80080dc:	3301      	adds	r3, #1
 80080de:	2b01      	cmp	r3, #1
 80080e0:	9307      	str	r3, [sp, #28]
 80080e2:	bfb8      	it	lt
 80080e4:	2301      	movlt	r3, #1
 80080e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80080ea:	2100      	movs	r1, #0
 80080ec:	2204      	movs	r2, #4
 80080ee:	f102 0514 	add.w	r5, r2, #20
 80080f2:	429d      	cmp	r5, r3
 80080f4:	d91f      	bls.n	8008136 <_dtoa_r+0x2a6>
 80080f6:	6041      	str	r1, [r0, #4]
 80080f8:	4658      	mov	r0, fp
 80080fa:	f000 ff2f 	bl	8008f5c <_Balloc>
 80080fe:	4682      	mov	sl, r0
 8008100:	2800      	cmp	r0, #0
 8008102:	d13b      	bne.n	800817c <_dtoa_r+0x2ec>
 8008104:	4b1c      	ldr	r3, [pc, #112]	@ (8008178 <_dtoa_r+0x2e8>)
 8008106:	4602      	mov	r2, r0
 8008108:	f240 11af 	movw	r1, #431	@ 0x1af
 800810c:	e6d4      	b.n	8007eb8 <_dtoa_r+0x28>
 800810e:	2301      	movs	r3, #1
 8008110:	e7e0      	b.n	80080d4 <_dtoa_r+0x244>
 8008112:	2401      	movs	r4, #1
 8008114:	2300      	movs	r3, #0
 8008116:	9320      	str	r3, [sp, #128]	@ 0x80
 8008118:	940b      	str	r4, [sp, #44]	@ 0x2c
 800811a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800811e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008122:	2200      	movs	r2, #0
 8008124:	2312      	movs	r3, #18
 8008126:	e7d0      	b.n	80080ca <_dtoa_r+0x23a>
 8008128:	2301      	movs	r3, #1
 800812a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800812c:	e7f5      	b.n	800811a <_dtoa_r+0x28a>
 800812e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008130:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008134:	e7d7      	b.n	80080e6 <_dtoa_r+0x256>
 8008136:	3101      	adds	r1, #1
 8008138:	0052      	lsls	r2, r2, #1
 800813a:	e7d8      	b.n	80080ee <_dtoa_r+0x25e>
 800813c:	f3af 8000 	nop.w
 8008140:	636f4361 	.word	0x636f4361
 8008144:	3fd287a7 	.word	0x3fd287a7
 8008148:	8b60c8b3 	.word	0x8b60c8b3
 800814c:	3fc68a28 	.word	0x3fc68a28
 8008150:	509f79fb 	.word	0x509f79fb
 8008154:	3fd34413 	.word	0x3fd34413
 8008158:	0800bab5 	.word	0x0800bab5
 800815c:	0800bacc 	.word	0x0800bacc
 8008160:	7ff00000 	.word	0x7ff00000
 8008164:	0800bab1 	.word	0x0800bab1
 8008168:	0800ba85 	.word	0x0800ba85
 800816c:	0800ba84 	.word	0x0800ba84
 8008170:	3ff80000 	.word	0x3ff80000
 8008174:	0800bbd8 	.word	0x0800bbd8
 8008178:	0800bb24 	.word	0x0800bb24
 800817c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008180:	6018      	str	r0, [r3, #0]
 8008182:	9b07      	ldr	r3, [sp, #28]
 8008184:	2b0e      	cmp	r3, #14
 8008186:	f200 80a4 	bhi.w	80082d2 <_dtoa_r+0x442>
 800818a:	2c00      	cmp	r4, #0
 800818c:	f000 80a1 	beq.w	80082d2 <_dtoa_r+0x442>
 8008190:	2f00      	cmp	r7, #0
 8008192:	dd33      	ble.n	80081fc <_dtoa_r+0x36c>
 8008194:	4b86      	ldr	r3, [pc, #536]	@ (80083b0 <_dtoa_r+0x520>)
 8008196:	f007 020f 	and.w	r2, r7, #15
 800819a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800819e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081a2:	05f8      	lsls	r0, r7, #23
 80081a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081ac:	d516      	bpl.n	80081dc <_dtoa_r+0x34c>
 80081ae:	4b81      	ldr	r3, [pc, #516]	@ (80083b4 <_dtoa_r+0x524>)
 80081b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081b8:	f7f8 fb58 	bl	800086c <__aeabi_ddiv>
 80081bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081c0:	f004 040f 	and.w	r4, r4, #15
 80081c4:	2603      	movs	r6, #3
 80081c6:	4d7b      	ldr	r5, [pc, #492]	@ (80083b4 <_dtoa_r+0x524>)
 80081c8:	b954      	cbnz	r4, 80081e0 <_dtoa_r+0x350>
 80081ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081d2:	f7f8 fb4b 	bl	800086c <__aeabi_ddiv>
 80081d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081da:	e028      	b.n	800822e <_dtoa_r+0x39e>
 80081dc:	2602      	movs	r6, #2
 80081de:	e7f2      	b.n	80081c6 <_dtoa_r+0x336>
 80081e0:	07e1      	lsls	r1, r4, #31
 80081e2:	d508      	bpl.n	80081f6 <_dtoa_r+0x366>
 80081e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081ec:	f7f8 fa14 	bl	8000618 <__aeabi_dmul>
 80081f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081f4:	3601      	adds	r6, #1
 80081f6:	1064      	asrs	r4, r4, #1
 80081f8:	3508      	adds	r5, #8
 80081fa:	e7e5      	b.n	80081c8 <_dtoa_r+0x338>
 80081fc:	f000 80d2 	beq.w	80083a4 <_dtoa_r+0x514>
 8008200:	427c      	negs	r4, r7
 8008202:	4b6b      	ldr	r3, [pc, #428]	@ (80083b0 <_dtoa_r+0x520>)
 8008204:	4d6b      	ldr	r5, [pc, #428]	@ (80083b4 <_dtoa_r+0x524>)
 8008206:	f004 020f 	and.w	r2, r4, #15
 800820a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008216:	f7f8 f9ff 	bl	8000618 <__aeabi_dmul>
 800821a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800821e:	1124      	asrs	r4, r4, #4
 8008220:	2300      	movs	r3, #0
 8008222:	2602      	movs	r6, #2
 8008224:	2c00      	cmp	r4, #0
 8008226:	f040 80b2 	bne.w	800838e <_dtoa_r+0x4fe>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1d3      	bne.n	80081d6 <_dtoa_r+0x346>
 800822e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008230:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 80b7 	beq.w	80083a8 <_dtoa_r+0x518>
 800823a:	4b5f      	ldr	r3, [pc, #380]	@ (80083b8 <_dtoa_r+0x528>)
 800823c:	2200      	movs	r2, #0
 800823e:	4620      	mov	r0, r4
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 fc5b 	bl	8000afc <__aeabi_dcmplt>
 8008246:	2800      	cmp	r0, #0
 8008248:	f000 80ae 	beq.w	80083a8 <_dtoa_r+0x518>
 800824c:	9b07      	ldr	r3, [sp, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80aa 	beq.w	80083a8 <_dtoa_r+0x518>
 8008254:	9b08      	ldr	r3, [sp, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	dd37      	ble.n	80082ca <_dtoa_r+0x43a>
 800825a:	1e7b      	subs	r3, r7, #1
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	4620      	mov	r0, r4
 8008260:	4b56      	ldr	r3, [pc, #344]	@ (80083bc <_dtoa_r+0x52c>)
 8008262:	2200      	movs	r2, #0
 8008264:	4629      	mov	r1, r5
 8008266:	f7f8 f9d7 	bl	8000618 <__aeabi_dmul>
 800826a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800826e:	9c08      	ldr	r4, [sp, #32]
 8008270:	3601      	adds	r6, #1
 8008272:	4630      	mov	r0, r6
 8008274:	f7f8 f966 	bl	8000544 <__aeabi_i2d>
 8008278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800827c:	f7f8 f9cc 	bl	8000618 <__aeabi_dmul>
 8008280:	4b4f      	ldr	r3, [pc, #316]	@ (80083c0 <_dtoa_r+0x530>)
 8008282:	2200      	movs	r2, #0
 8008284:	f7f8 f812 	bl	80002ac <__adddf3>
 8008288:	4605      	mov	r5, r0
 800828a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800828e:	2c00      	cmp	r4, #0
 8008290:	f040 809a 	bne.w	80083c8 <_dtoa_r+0x538>
 8008294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008298:	4b4a      	ldr	r3, [pc, #296]	@ (80083c4 <_dtoa_r+0x534>)
 800829a:	2200      	movs	r2, #0
 800829c:	f7f8 f804 	bl	80002a8 <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082a8:	462a      	mov	r2, r5
 80082aa:	4633      	mov	r3, r6
 80082ac:	f7f8 fc44 	bl	8000b38 <__aeabi_dcmpgt>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	f040 828e 	bne.w	80087d2 <_dtoa_r+0x942>
 80082b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ba:	462a      	mov	r2, r5
 80082bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082c0:	f7f8 fc1c 	bl	8000afc <__aeabi_dcmplt>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	f040 8127 	bne.w	8008518 <_dtoa_r+0x688>
 80082ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80082ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80082d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f2c0 8163 	blt.w	80085a0 <_dtoa_r+0x710>
 80082da:	2f0e      	cmp	r7, #14
 80082dc:	f300 8160 	bgt.w	80085a0 <_dtoa_r+0x710>
 80082e0:	4b33      	ldr	r3, [pc, #204]	@ (80083b0 <_dtoa_r+0x520>)
 80082e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da03      	bge.n	80082fc <_dtoa_r+0x46c>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f340 8100 	ble.w	80084fc <_dtoa_r+0x66c>
 80082fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008300:	4656      	mov	r6, sl
 8008302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f8 faaf 	bl	800086c <__aeabi_ddiv>
 800830e:	f7f8 fc33 	bl	8000b78 <__aeabi_d2iz>
 8008312:	4680      	mov	r8, r0
 8008314:	f7f8 f916 	bl	8000544 <__aeabi_i2d>
 8008318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800831c:	f7f8 f97c 	bl	8000618 <__aeabi_dmul>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4620      	mov	r0, r4
 8008326:	4629      	mov	r1, r5
 8008328:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800832c:	f7f7 ffbc 	bl	80002a8 <__aeabi_dsub>
 8008330:	f806 4b01 	strb.w	r4, [r6], #1
 8008334:	9d07      	ldr	r5, [sp, #28]
 8008336:	eba6 040a 	sub.w	r4, r6, sl
 800833a:	42a5      	cmp	r5, r4
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	f040 8116 	bne.w	8008570 <_dtoa_r+0x6e0>
 8008344:	f7f7 ffb2 	bl	80002ac <__adddf3>
 8008348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	f7f8 fbf2 	bl	8000b38 <__aeabi_dcmpgt>
 8008354:	2800      	cmp	r0, #0
 8008356:	f040 80f8 	bne.w	800854a <_dtoa_r+0x6ba>
 800835a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800835e:	4620      	mov	r0, r4
 8008360:	4629      	mov	r1, r5
 8008362:	f7f8 fbc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008366:	b118      	cbz	r0, 8008370 <_dtoa_r+0x4e0>
 8008368:	f018 0f01 	tst.w	r8, #1
 800836c:	f040 80ed 	bne.w	800854a <_dtoa_r+0x6ba>
 8008370:	4649      	mov	r1, r9
 8008372:	4658      	mov	r0, fp
 8008374:	f000 fe32 	bl	8008fdc <_Bfree>
 8008378:	2300      	movs	r3, #0
 800837a:	7033      	strb	r3, [r6, #0]
 800837c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800837e:	3701      	adds	r7, #1
 8008380:	601f      	str	r7, [r3, #0]
 8008382:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 8320 	beq.w	80089ca <_dtoa_r+0xb3a>
 800838a:	601e      	str	r6, [r3, #0]
 800838c:	e31d      	b.n	80089ca <_dtoa_r+0xb3a>
 800838e:	07e2      	lsls	r2, r4, #31
 8008390:	d505      	bpl.n	800839e <_dtoa_r+0x50e>
 8008392:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008396:	f7f8 f93f 	bl	8000618 <__aeabi_dmul>
 800839a:	3601      	adds	r6, #1
 800839c:	2301      	movs	r3, #1
 800839e:	1064      	asrs	r4, r4, #1
 80083a0:	3508      	adds	r5, #8
 80083a2:	e73f      	b.n	8008224 <_dtoa_r+0x394>
 80083a4:	2602      	movs	r6, #2
 80083a6:	e742      	b.n	800822e <_dtoa_r+0x39e>
 80083a8:	9c07      	ldr	r4, [sp, #28]
 80083aa:	9704      	str	r7, [sp, #16]
 80083ac:	e761      	b.n	8008272 <_dtoa_r+0x3e2>
 80083ae:	bf00      	nop
 80083b0:	0800bbd8 	.word	0x0800bbd8
 80083b4:	0800bbb0 	.word	0x0800bbb0
 80083b8:	3ff00000 	.word	0x3ff00000
 80083bc:	40240000 	.word	0x40240000
 80083c0:	401c0000 	.word	0x401c0000
 80083c4:	40140000 	.word	0x40140000
 80083c8:	4b70      	ldr	r3, [pc, #448]	@ (800858c <_dtoa_r+0x6fc>)
 80083ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083d4:	4454      	add	r4, sl
 80083d6:	2900      	cmp	r1, #0
 80083d8:	d045      	beq.n	8008466 <_dtoa_r+0x5d6>
 80083da:	496d      	ldr	r1, [pc, #436]	@ (8008590 <_dtoa_r+0x700>)
 80083dc:	2000      	movs	r0, #0
 80083de:	f7f8 fa45 	bl	800086c <__aeabi_ddiv>
 80083e2:	4633      	mov	r3, r6
 80083e4:	462a      	mov	r2, r5
 80083e6:	f7f7 ff5f 	bl	80002a8 <__aeabi_dsub>
 80083ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083ee:	4656      	mov	r6, sl
 80083f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f4:	f7f8 fbc0 	bl	8000b78 <__aeabi_d2iz>
 80083f8:	4605      	mov	r5, r0
 80083fa:	f7f8 f8a3 	bl	8000544 <__aeabi_i2d>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008406:	f7f7 ff4f 	bl	80002a8 <__aeabi_dsub>
 800840a:	3530      	adds	r5, #48	@ 0x30
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008414:	f806 5b01 	strb.w	r5, [r6], #1
 8008418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800841c:	f7f8 fb6e 	bl	8000afc <__aeabi_dcmplt>
 8008420:	2800      	cmp	r0, #0
 8008422:	d163      	bne.n	80084ec <_dtoa_r+0x65c>
 8008424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008428:	495a      	ldr	r1, [pc, #360]	@ (8008594 <_dtoa_r+0x704>)
 800842a:	2000      	movs	r0, #0
 800842c:	f7f7 ff3c 	bl	80002a8 <__aeabi_dsub>
 8008430:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008434:	f7f8 fb62 	bl	8000afc <__aeabi_dcmplt>
 8008438:	2800      	cmp	r0, #0
 800843a:	f040 8087 	bne.w	800854c <_dtoa_r+0x6bc>
 800843e:	42a6      	cmp	r6, r4
 8008440:	f43f af43 	beq.w	80082ca <_dtoa_r+0x43a>
 8008444:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008448:	4b53      	ldr	r3, [pc, #332]	@ (8008598 <_dtoa_r+0x708>)
 800844a:	2200      	movs	r2, #0
 800844c:	f7f8 f8e4 	bl	8000618 <__aeabi_dmul>
 8008450:	4b51      	ldr	r3, [pc, #324]	@ (8008598 <_dtoa_r+0x708>)
 8008452:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008456:	2200      	movs	r2, #0
 8008458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800845c:	f7f8 f8dc 	bl	8000618 <__aeabi_dmul>
 8008460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008464:	e7c4      	b.n	80083f0 <_dtoa_r+0x560>
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	f7f8 f8d5 	bl	8000618 <__aeabi_dmul>
 800846e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008472:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008474:	4656      	mov	r6, sl
 8008476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800847a:	f7f8 fb7d 	bl	8000b78 <__aeabi_d2iz>
 800847e:	4605      	mov	r5, r0
 8008480:	f7f8 f860 	bl	8000544 <__aeabi_i2d>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848c:	f7f7 ff0c 	bl	80002a8 <__aeabi_dsub>
 8008490:	3530      	adds	r5, #48	@ 0x30
 8008492:	f806 5b01 	strb.w	r5, [r6], #1
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	42a6      	cmp	r6, r4
 800849c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	d124      	bne.n	80084f0 <_dtoa_r+0x660>
 80084a6:	4b3a      	ldr	r3, [pc, #232]	@ (8008590 <_dtoa_r+0x700>)
 80084a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084ac:	f7f7 fefe 	bl	80002ac <__adddf3>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084b8:	f7f8 fb3e 	bl	8000b38 <__aeabi_dcmpgt>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d145      	bne.n	800854c <_dtoa_r+0x6bc>
 80084c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084c4:	4932      	ldr	r1, [pc, #200]	@ (8008590 <_dtoa_r+0x700>)
 80084c6:	2000      	movs	r0, #0
 80084c8:	f7f7 feee 	bl	80002a8 <__aeabi_dsub>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d4:	f7f8 fb12 	bl	8000afc <__aeabi_dcmplt>
 80084d8:	2800      	cmp	r0, #0
 80084da:	f43f aef6 	beq.w	80082ca <_dtoa_r+0x43a>
 80084de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80084e0:	1e73      	subs	r3, r6, #1
 80084e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084e8:	2b30      	cmp	r3, #48	@ 0x30
 80084ea:	d0f8      	beq.n	80084de <_dtoa_r+0x64e>
 80084ec:	9f04      	ldr	r7, [sp, #16]
 80084ee:	e73f      	b.n	8008370 <_dtoa_r+0x4e0>
 80084f0:	4b29      	ldr	r3, [pc, #164]	@ (8008598 <_dtoa_r+0x708>)
 80084f2:	f7f8 f891 	bl	8000618 <__aeabi_dmul>
 80084f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084fa:	e7bc      	b.n	8008476 <_dtoa_r+0x5e6>
 80084fc:	d10c      	bne.n	8008518 <_dtoa_r+0x688>
 80084fe:	4b27      	ldr	r3, [pc, #156]	@ (800859c <_dtoa_r+0x70c>)
 8008500:	2200      	movs	r2, #0
 8008502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008506:	f7f8 f887 	bl	8000618 <__aeabi_dmul>
 800850a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800850e:	f7f8 fb09 	bl	8000b24 <__aeabi_dcmpge>
 8008512:	2800      	cmp	r0, #0
 8008514:	f000 815b 	beq.w	80087ce <_dtoa_r+0x93e>
 8008518:	2400      	movs	r4, #0
 800851a:	4625      	mov	r5, r4
 800851c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800851e:	43db      	mvns	r3, r3
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	4656      	mov	r6, sl
 8008524:	2700      	movs	r7, #0
 8008526:	4621      	mov	r1, r4
 8008528:	4658      	mov	r0, fp
 800852a:	f000 fd57 	bl	8008fdc <_Bfree>
 800852e:	2d00      	cmp	r5, #0
 8008530:	d0dc      	beq.n	80084ec <_dtoa_r+0x65c>
 8008532:	b12f      	cbz	r7, 8008540 <_dtoa_r+0x6b0>
 8008534:	42af      	cmp	r7, r5
 8008536:	d003      	beq.n	8008540 <_dtoa_r+0x6b0>
 8008538:	4639      	mov	r1, r7
 800853a:	4658      	mov	r0, fp
 800853c:	f000 fd4e 	bl	8008fdc <_Bfree>
 8008540:	4629      	mov	r1, r5
 8008542:	4658      	mov	r0, fp
 8008544:	f000 fd4a 	bl	8008fdc <_Bfree>
 8008548:	e7d0      	b.n	80084ec <_dtoa_r+0x65c>
 800854a:	9704      	str	r7, [sp, #16]
 800854c:	4633      	mov	r3, r6
 800854e:	461e      	mov	r6, r3
 8008550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008554:	2a39      	cmp	r2, #57	@ 0x39
 8008556:	d107      	bne.n	8008568 <_dtoa_r+0x6d8>
 8008558:	459a      	cmp	sl, r3
 800855a:	d1f8      	bne.n	800854e <_dtoa_r+0x6be>
 800855c:	9a04      	ldr	r2, [sp, #16]
 800855e:	3201      	adds	r2, #1
 8008560:	9204      	str	r2, [sp, #16]
 8008562:	2230      	movs	r2, #48	@ 0x30
 8008564:	f88a 2000 	strb.w	r2, [sl]
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	3201      	adds	r2, #1
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	e7bd      	b.n	80084ec <_dtoa_r+0x65c>
 8008570:	4b09      	ldr	r3, [pc, #36]	@ (8008598 <_dtoa_r+0x708>)
 8008572:	2200      	movs	r2, #0
 8008574:	f7f8 f850 	bl	8000618 <__aeabi_dmul>
 8008578:	2200      	movs	r2, #0
 800857a:	2300      	movs	r3, #0
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	f7f8 fab2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008584:	2800      	cmp	r0, #0
 8008586:	f43f aebc 	beq.w	8008302 <_dtoa_r+0x472>
 800858a:	e6f1      	b.n	8008370 <_dtoa_r+0x4e0>
 800858c:	0800bbd8 	.word	0x0800bbd8
 8008590:	3fe00000 	.word	0x3fe00000
 8008594:	3ff00000 	.word	0x3ff00000
 8008598:	40240000 	.word	0x40240000
 800859c:	40140000 	.word	0x40140000
 80085a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80085a2:	2a00      	cmp	r2, #0
 80085a4:	f000 80db 	beq.w	800875e <_dtoa_r+0x8ce>
 80085a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085aa:	2a01      	cmp	r2, #1
 80085ac:	f300 80bf 	bgt.w	800872e <_dtoa_r+0x89e>
 80085b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80085b2:	2a00      	cmp	r2, #0
 80085b4:	f000 80b7 	beq.w	8008726 <_dtoa_r+0x896>
 80085b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085be:	4646      	mov	r6, r8
 80085c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c2:	2101      	movs	r1, #1
 80085c4:	441a      	add	r2, r3
 80085c6:	4658      	mov	r0, fp
 80085c8:	4498      	add	r8, r3
 80085ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80085cc:	f000 fdba 	bl	8009144 <__i2b>
 80085d0:	4605      	mov	r5, r0
 80085d2:	b15e      	cbz	r6, 80085ec <_dtoa_r+0x75c>
 80085d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dd08      	ble.n	80085ec <_dtoa_r+0x75c>
 80085da:	42b3      	cmp	r3, r6
 80085dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085de:	bfa8      	it	ge
 80085e0:	4633      	movge	r3, r6
 80085e2:	eba8 0803 	sub.w	r8, r8, r3
 80085e6:	1af6      	subs	r6, r6, r3
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085ee:	b1f3      	cbz	r3, 800862e <_dtoa_r+0x79e>
 80085f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 80b7 	beq.w	8008766 <_dtoa_r+0x8d6>
 80085f8:	b18c      	cbz	r4, 800861e <_dtoa_r+0x78e>
 80085fa:	4629      	mov	r1, r5
 80085fc:	4622      	mov	r2, r4
 80085fe:	4658      	mov	r0, fp
 8008600:	f000 fe60 	bl	80092c4 <__pow5mult>
 8008604:	464a      	mov	r2, r9
 8008606:	4601      	mov	r1, r0
 8008608:	4605      	mov	r5, r0
 800860a:	4658      	mov	r0, fp
 800860c:	f000 fdb0 	bl	8009170 <__multiply>
 8008610:	4649      	mov	r1, r9
 8008612:	9004      	str	r0, [sp, #16]
 8008614:	4658      	mov	r0, fp
 8008616:	f000 fce1 	bl	8008fdc <_Bfree>
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	4699      	mov	r9, r3
 800861e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008620:	1b1a      	subs	r2, r3, r4
 8008622:	d004      	beq.n	800862e <_dtoa_r+0x79e>
 8008624:	4649      	mov	r1, r9
 8008626:	4658      	mov	r0, fp
 8008628:	f000 fe4c 	bl	80092c4 <__pow5mult>
 800862c:	4681      	mov	r9, r0
 800862e:	2101      	movs	r1, #1
 8008630:	4658      	mov	r0, fp
 8008632:	f000 fd87 	bl	8009144 <__i2b>
 8008636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008638:	4604      	mov	r4, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 81c9 	beq.w	80089d2 <_dtoa_r+0xb42>
 8008640:	461a      	mov	r2, r3
 8008642:	4601      	mov	r1, r0
 8008644:	4658      	mov	r0, fp
 8008646:	f000 fe3d 	bl	80092c4 <__pow5mult>
 800864a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800864c:	2b01      	cmp	r3, #1
 800864e:	4604      	mov	r4, r0
 8008650:	f300 808f 	bgt.w	8008772 <_dtoa_r+0x8e2>
 8008654:	9b02      	ldr	r3, [sp, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f040 8087 	bne.w	800876a <_dtoa_r+0x8da>
 800865c:	9b03      	ldr	r3, [sp, #12]
 800865e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008662:	2b00      	cmp	r3, #0
 8008664:	f040 8083 	bne.w	800876e <_dtoa_r+0x8de>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800866e:	0d1b      	lsrs	r3, r3, #20
 8008670:	051b      	lsls	r3, r3, #20
 8008672:	b12b      	cbz	r3, 8008680 <_dtoa_r+0x7f0>
 8008674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008676:	3301      	adds	r3, #1
 8008678:	9309      	str	r3, [sp, #36]	@ 0x24
 800867a:	f108 0801 	add.w	r8, r8, #1
 800867e:	2301      	movs	r3, #1
 8008680:	930a      	str	r3, [sp, #40]	@ 0x28
 8008682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 81aa 	beq.w	80089de <_dtoa_r+0xb4e>
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008690:	6918      	ldr	r0, [r3, #16]
 8008692:	f000 fd0b 	bl	80090ac <__hi0bits>
 8008696:	f1c0 0020 	rsb	r0, r0, #32
 800869a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800869c:	4418      	add	r0, r3
 800869e:	f010 001f 	ands.w	r0, r0, #31
 80086a2:	d071      	beq.n	8008788 <_dtoa_r+0x8f8>
 80086a4:	f1c0 0320 	rsb	r3, r0, #32
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	dd65      	ble.n	8008778 <_dtoa_r+0x8e8>
 80086ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ae:	f1c0 001c 	rsb	r0, r0, #28
 80086b2:	4403      	add	r3, r0
 80086b4:	4480      	add	r8, r0
 80086b6:	4406      	add	r6, r0
 80086b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ba:	f1b8 0f00 	cmp.w	r8, #0
 80086be:	dd05      	ble.n	80086cc <_dtoa_r+0x83c>
 80086c0:	4649      	mov	r1, r9
 80086c2:	4642      	mov	r2, r8
 80086c4:	4658      	mov	r0, fp
 80086c6:	f000 fe57 	bl	8009378 <__lshift>
 80086ca:	4681      	mov	r9, r0
 80086cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd05      	ble.n	80086de <_dtoa_r+0x84e>
 80086d2:	4621      	mov	r1, r4
 80086d4:	461a      	mov	r2, r3
 80086d6:	4658      	mov	r0, fp
 80086d8:	f000 fe4e 	bl	8009378 <__lshift>
 80086dc:	4604      	mov	r4, r0
 80086de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d053      	beq.n	800878c <_dtoa_r+0x8fc>
 80086e4:	4621      	mov	r1, r4
 80086e6:	4648      	mov	r0, r9
 80086e8:	f000 feb2 	bl	8009450 <__mcmp>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	da4d      	bge.n	800878c <_dtoa_r+0x8fc>
 80086f0:	1e7b      	subs	r3, r7, #1
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	4649      	mov	r1, r9
 80086f6:	2300      	movs	r3, #0
 80086f8:	220a      	movs	r2, #10
 80086fa:	4658      	mov	r0, fp
 80086fc:	f000 fc90 	bl	8009020 <__multadd>
 8008700:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008702:	4681      	mov	r9, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 816c 	beq.w	80089e2 <_dtoa_r+0xb52>
 800870a:	2300      	movs	r3, #0
 800870c:	4629      	mov	r1, r5
 800870e:	220a      	movs	r2, #10
 8008710:	4658      	mov	r0, fp
 8008712:	f000 fc85 	bl	8009020 <__multadd>
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	2b00      	cmp	r3, #0
 800871a:	4605      	mov	r5, r0
 800871c:	dc61      	bgt.n	80087e2 <_dtoa_r+0x952>
 800871e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008720:	2b02      	cmp	r3, #2
 8008722:	dc3b      	bgt.n	800879c <_dtoa_r+0x90c>
 8008724:	e05d      	b.n	80087e2 <_dtoa_r+0x952>
 8008726:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008728:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800872c:	e746      	b.n	80085bc <_dtoa_r+0x72c>
 800872e:	9b07      	ldr	r3, [sp, #28]
 8008730:	1e5c      	subs	r4, r3, #1
 8008732:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008734:	42a3      	cmp	r3, r4
 8008736:	bfbf      	itttt	lt
 8008738:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800873a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800873c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800873e:	1ae3      	sublt	r3, r4, r3
 8008740:	bfb4      	ite	lt
 8008742:	18d2      	addlt	r2, r2, r3
 8008744:	1b1c      	subge	r4, r3, r4
 8008746:	9b07      	ldr	r3, [sp, #28]
 8008748:	bfbc      	itt	lt
 800874a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800874c:	2400      	movlt	r4, #0
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfb5      	itete	lt
 8008752:	eba8 0603 	sublt.w	r6, r8, r3
 8008756:	9b07      	ldrge	r3, [sp, #28]
 8008758:	2300      	movlt	r3, #0
 800875a:	4646      	movge	r6, r8
 800875c:	e730      	b.n	80085c0 <_dtoa_r+0x730>
 800875e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008760:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008762:	4646      	mov	r6, r8
 8008764:	e735      	b.n	80085d2 <_dtoa_r+0x742>
 8008766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008768:	e75c      	b.n	8008624 <_dtoa_r+0x794>
 800876a:	2300      	movs	r3, #0
 800876c:	e788      	b.n	8008680 <_dtoa_r+0x7f0>
 800876e:	9b02      	ldr	r3, [sp, #8]
 8008770:	e786      	b.n	8008680 <_dtoa_r+0x7f0>
 8008772:	2300      	movs	r3, #0
 8008774:	930a      	str	r3, [sp, #40]	@ 0x28
 8008776:	e788      	b.n	800868a <_dtoa_r+0x7fa>
 8008778:	d09f      	beq.n	80086ba <_dtoa_r+0x82a>
 800877a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800877c:	331c      	adds	r3, #28
 800877e:	441a      	add	r2, r3
 8008780:	4498      	add	r8, r3
 8008782:	441e      	add	r6, r3
 8008784:	9209      	str	r2, [sp, #36]	@ 0x24
 8008786:	e798      	b.n	80086ba <_dtoa_r+0x82a>
 8008788:	4603      	mov	r3, r0
 800878a:	e7f6      	b.n	800877a <_dtoa_r+0x8ea>
 800878c:	9b07      	ldr	r3, [sp, #28]
 800878e:	9704      	str	r7, [sp, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	dc20      	bgt.n	80087d6 <_dtoa_r+0x946>
 8008794:	9308      	str	r3, [sp, #32]
 8008796:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008798:	2b02      	cmp	r3, #2
 800879a:	dd1e      	ble.n	80087da <_dtoa_r+0x94a>
 800879c:	9b08      	ldr	r3, [sp, #32]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f47f aebc 	bne.w	800851c <_dtoa_r+0x68c>
 80087a4:	4621      	mov	r1, r4
 80087a6:	2205      	movs	r2, #5
 80087a8:	4658      	mov	r0, fp
 80087aa:	f000 fc39 	bl	8009020 <__multadd>
 80087ae:	4601      	mov	r1, r0
 80087b0:	4604      	mov	r4, r0
 80087b2:	4648      	mov	r0, r9
 80087b4:	f000 fe4c 	bl	8009450 <__mcmp>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f77f aeaf 	ble.w	800851c <_dtoa_r+0x68c>
 80087be:	4656      	mov	r6, sl
 80087c0:	2331      	movs	r3, #49	@ 0x31
 80087c2:	f806 3b01 	strb.w	r3, [r6], #1
 80087c6:	9b04      	ldr	r3, [sp, #16]
 80087c8:	3301      	adds	r3, #1
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	e6aa      	b.n	8008524 <_dtoa_r+0x694>
 80087ce:	9c07      	ldr	r4, [sp, #28]
 80087d0:	9704      	str	r7, [sp, #16]
 80087d2:	4625      	mov	r5, r4
 80087d4:	e7f3      	b.n	80087be <_dtoa_r+0x92e>
 80087d6:	9b07      	ldr	r3, [sp, #28]
 80087d8:	9308      	str	r3, [sp, #32]
 80087da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8104 	beq.w	80089ea <_dtoa_r+0xb5a>
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	dd05      	ble.n	80087f2 <_dtoa_r+0x962>
 80087e6:	4629      	mov	r1, r5
 80087e8:	4632      	mov	r2, r6
 80087ea:	4658      	mov	r0, fp
 80087ec:	f000 fdc4 	bl	8009378 <__lshift>
 80087f0:	4605      	mov	r5, r0
 80087f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d05a      	beq.n	80088ae <_dtoa_r+0xa1e>
 80087f8:	6869      	ldr	r1, [r5, #4]
 80087fa:	4658      	mov	r0, fp
 80087fc:	f000 fbae 	bl	8008f5c <_Balloc>
 8008800:	4606      	mov	r6, r0
 8008802:	b928      	cbnz	r0, 8008810 <_dtoa_r+0x980>
 8008804:	4b84      	ldr	r3, [pc, #528]	@ (8008a18 <_dtoa_r+0xb88>)
 8008806:	4602      	mov	r2, r0
 8008808:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800880c:	f7ff bb54 	b.w	8007eb8 <_dtoa_r+0x28>
 8008810:	692a      	ldr	r2, [r5, #16]
 8008812:	3202      	adds	r2, #2
 8008814:	0092      	lsls	r2, r2, #2
 8008816:	f105 010c 	add.w	r1, r5, #12
 800881a:	300c      	adds	r0, #12
 800881c:	f001 fa28 	bl	8009c70 <memcpy>
 8008820:	2201      	movs	r2, #1
 8008822:	4631      	mov	r1, r6
 8008824:	4658      	mov	r0, fp
 8008826:	f000 fda7 	bl	8009378 <__lshift>
 800882a:	f10a 0301 	add.w	r3, sl, #1
 800882e:	9307      	str	r3, [sp, #28]
 8008830:	9b08      	ldr	r3, [sp, #32]
 8008832:	4453      	add	r3, sl
 8008834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008836:	9b02      	ldr	r3, [sp, #8]
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	462f      	mov	r7, r5
 800883e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008840:	4605      	mov	r5, r0
 8008842:	9b07      	ldr	r3, [sp, #28]
 8008844:	4621      	mov	r1, r4
 8008846:	3b01      	subs	r3, #1
 8008848:	4648      	mov	r0, r9
 800884a:	9302      	str	r3, [sp, #8]
 800884c:	f7ff fa96 	bl	8007d7c <quorem>
 8008850:	4639      	mov	r1, r7
 8008852:	9008      	str	r0, [sp, #32]
 8008854:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008858:	4648      	mov	r0, r9
 800885a:	f000 fdf9 	bl	8009450 <__mcmp>
 800885e:	462a      	mov	r2, r5
 8008860:	9009      	str	r0, [sp, #36]	@ 0x24
 8008862:	4621      	mov	r1, r4
 8008864:	4658      	mov	r0, fp
 8008866:	f000 fe0f 	bl	8009488 <__mdiff>
 800886a:	68c2      	ldr	r2, [r0, #12]
 800886c:	4606      	mov	r6, r0
 800886e:	bb02      	cbnz	r2, 80088b2 <_dtoa_r+0xa22>
 8008870:	4601      	mov	r1, r0
 8008872:	4648      	mov	r0, r9
 8008874:	f000 fdec 	bl	8009450 <__mcmp>
 8008878:	4602      	mov	r2, r0
 800887a:	4631      	mov	r1, r6
 800887c:	4658      	mov	r0, fp
 800887e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008880:	f000 fbac 	bl	8008fdc <_Bfree>
 8008884:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008886:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008888:	9e07      	ldr	r6, [sp, #28]
 800888a:	ea43 0102 	orr.w	r1, r3, r2
 800888e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008890:	4319      	orrs	r1, r3
 8008892:	d110      	bne.n	80088b6 <_dtoa_r+0xa26>
 8008894:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008898:	d029      	beq.n	80088ee <_dtoa_r+0xa5e>
 800889a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800889c:	2b00      	cmp	r3, #0
 800889e:	dd02      	ble.n	80088a6 <_dtoa_r+0xa16>
 80088a0:	9b08      	ldr	r3, [sp, #32]
 80088a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80088a6:	9b02      	ldr	r3, [sp, #8]
 80088a8:	f883 8000 	strb.w	r8, [r3]
 80088ac:	e63b      	b.n	8008526 <_dtoa_r+0x696>
 80088ae:	4628      	mov	r0, r5
 80088b0:	e7bb      	b.n	800882a <_dtoa_r+0x99a>
 80088b2:	2201      	movs	r2, #1
 80088b4:	e7e1      	b.n	800887a <_dtoa_r+0x9ea>
 80088b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	db04      	blt.n	80088c6 <_dtoa_r+0xa36>
 80088bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80088be:	430b      	orrs	r3, r1
 80088c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088c2:	430b      	orrs	r3, r1
 80088c4:	d120      	bne.n	8008908 <_dtoa_r+0xa78>
 80088c6:	2a00      	cmp	r2, #0
 80088c8:	dded      	ble.n	80088a6 <_dtoa_r+0xa16>
 80088ca:	4649      	mov	r1, r9
 80088cc:	2201      	movs	r2, #1
 80088ce:	4658      	mov	r0, fp
 80088d0:	f000 fd52 	bl	8009378 <__lshift>
 80088d4:	4621      	mov	r1, r4
 80088d6:	4681      	mov	r9, r0
 80088d8:	f000 fdba 	bl	8009450 <__mcmp>
 80088dc:	2800      	cmp	r0, #0
 80088de:	dc03      	bgt.n	80088e8 <_dtoa_r+0xa58>
 80088e0:	d1e1      	bne.n	80088a6 <_dtoa_r+0xa16>
 80088e2:	f018 0f01 	tst.w	r8, #1
 80088e6:	d0de      	beq.n	80088a6 <_dtoa_r+0xa16>
 80088e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088ec:	d1d8      	bne.n	80088a0 <_dtoa_r+0xa10>
 80088ee:	9a02      	ldr	r2, [sp, #8]
 80088f0:	2339      	movs	r3, #57	@ 0x39
 80088f2:	7013      	strb	r3, [r2, #0]
 80088f4:	4633      	mov	r3, r6
 80088f6:	461e      	mov	r6, r3
 80088f8:	3b01      	subs	r3, #1
 80088fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088fe:	2a39      	cmp	r2, #57	@ 0x39
 8008900:	d052      	beq.n	80089a8 <_dtoa_r+0xb18>
 8008902:	3201      	adds	r2, #1
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	e60e      	b.n	8008526 <_dtoa_r+0x696>
 8008908:	2a00      	cmp	r2, #0
 800890a:	dd07      	ble.n	800891c <_dtoa_r+0xa8c>
 800890c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008910:	d0ed      	beq.n	80088ee <_dtoa_r+0xa5e>
 8008912:	9a02      	ldr	r2, [sp, #8]
 8008914:	f108 0301 	add.w	r3, r8, #1
 8008918:	7013      	strb	r3, [r2, #0]
 800891a:	e604      	b.n	8008526 <_dtoa_r+0x696>
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	9a07      	ldr	r2, [sp, #28]
 8008920:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008924:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008926:	4293      	cmp	r3, r2
 8008928:	d028      	beq.n	800897c <_dtoa_r+0xaec>
 800892a:	4649      	mov	r1, r9
 800892c:	2300      	movs	r3, #0
 800892e:	220a      	movs	r2, #10
 8008930:	4658      	mov	r0, fp
 8008932:	f000 fb75 	bl	8009020 <__multadd>
 8008936:	42af      	cmp	r7, r5
 8008938:	4681      	mov	r9, r0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	f04f 020a 	mov.w	r2, #10
 8008942:	4639      	mov	r1, r7
 8008944:	4658      	mov	r0, fp
 8008946:	d107      	bne.n	8008958 <_dtoa_r+0xac8>
 8008948:	f000 fb6a 	bl	8009020 <__multadd>
 800894c:	4607      	mov	r7, r0
 800894e:	4605      	mov	r5, r0
 8008950:	9b07      	ldr	r3, [sp, #28]
 8008952:	3301      	adds	r3, #1
 8008954:	9307      	str	r3, [sp, #28]
 8008956:	e774      	b.n	8008842 <_dtoa_r+0x9b2>
 8008958:	f000 fb62 	bl	8009020 <__multadd>
 800895c:	4629      	mov	r1, r5
 800895e:	4607      	mov	r7, r0
 8008960:	2300      	movs	r3, #0
 8008962:	220a      	movs	r2, #10
 8008964:	4658      	mov	r0, fp
 8008966:	f000 fb5b 	bl	8009020 <__multadd>
 800896a:	4605      	mov	r5, r0
 800896c:	e7f0      	b.n	8008950 <_dtoa_r+0xac0>
 800896e:	9b08      	ldr	r3, [sp, #32]
 8008970:	2b00      	cmp	r3, #0
 8008972:	bfcc      	ite	gt
 8008974:	461e      	movgt	r6, r3
 8008976:	2601      	movle	r6, #1
 8008978:	4456      	add	r6, sl
 800897a:	2700      	movs	r7, #0
 800897c:	4649      	mov	r1, r9
 800897e:	2201      	movs	r2, #1
 8008980:	4658      	mov	r0, fp
 8008982:	f000 fcf9 	bl	8009378 <__lshift>
 8008986:	4621      	mov	r1, r4
 8008988:	4681      	mov	r9, r0
 800898a:	f000 fd61 	bl	8009450 <__mcmp>
 800898e:	2800      	cmp	r0, #0
 8008990:	dcb0      	bgt.n	80088f4 <_dtoa_r+0xa64>
 8008992:	d102      	bne.n	800899a <_dtoa_r+0xb0a>
 8008994:	f018 0f01 	tst.w	r8, #1
 8008998:	d1ac      	bne.n	80088f4 <_dtoa_r+0xa64>
 800899a:	4633      	mov	r3, r6
 800899c:	461e      	mov	r6, r3
 800899e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a2:	2a30      	cmp	r2, #48	@ 0x30
 80089a4:	d0fa      	beq.n	800899c <_dtoa_r+0xb0c>
 80089a6:	e5be      	b.n	8008526 <_dtoa_r+0x696>
 80089a8:	459a      	cmp	sl, r3
 80089aa:	d1a4      	bne.n	80088f6 <_dtoa_r+0xa66>
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	3301      	adds	r3, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	2331      	movs	r3, #49	@ 0x31
 80089b4:	f88a 3000 	strb.w	r3, [sl]
 80089b8:	e5b5      	b.n	8008526 <_dtoa_r+0x696>
 80089ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008a1c <_dtoa_r+0xb8c>
 80089c0:	b11b      	cbz	r3, 80089ca <_dtoa_r+0xb3a>
 80089c2:	f10a 0308 	add.w	r3, sl, #8
 80089c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	4650      	mov	r0, sl
 80089cc:	b017      	add	sp, #92	@ 0x5c
 80089ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	f77f ae3d 	ble.w	8008654 <_dtoa_r+0x7c4>
 80089da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80089de:	2001      	movs	r0, #1
 80089e0:	e65b      	b.n	800869a <_dtoa_r+0x80a>
 80089e2:	9b08      	ldr	r3, [sp, #32]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f77f aed6 	ble.w	8008796 <_dtoa_r+0x906>
 80089ea:	4656      	mov	r6, sl
 80089ec:	4621      	mov	r1, r4
 80089ee:	4648      	mov	r0, r9
 80089f0:	f7ff f9c4 	bl	8007d7c <quorem>
 80089f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089f8:	f806 8b01 	strb.w	r8, [r6], #1
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	eba6 020a 	sub.w	r2, r6, sl
 8008a02:	4293      	cmp	r3, r2
 8008a04:	ddb3      	ble.n	800896e <_dtoa_r+0xade>
 8008a06:	4649      	mov	r1, r9
 8008a08:	2300      	movs	r3, #0
 8008a0a:	220a      	movs	r2, #10
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f000 fb07 	bl	8009020 <__multadd>
 8008a12:	4681      	mov	r9, r0
 8008a14:	e7ea      	b.n	80089ec <_dtoa_r+0xb5c>
 8008a16:	bf00      	nop
 8008a18:	0800bb24 	.word	0x0800bb24
 8008a1c:	0800baa8 	.word	0x0800baa8

08008a20 <__sfputc_r>:
 8008a20:	6893      	ldr	r3, [r2, #8]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	b410      	push	{r4}
 8008a28:	6093      	str	r3, [r2, #8]
 8008a2a:	da07      	bge.n	8008a3c <__sfputc_r+0x1c>
 8008a2c:	6994      	ldr	r4, [r2, #24]
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	db01      	blt.n	8008a36 <__sfputc_r+0x16>
 8008a32:	290a      	cmp	r1, #10
 8008a34:	d102      	bne.n	8008a3c <__sfputc_r+0x1c>
 8008a36:	bc10      	pop	{r4}
 8008a38:	f000 be6f 	b.w	800971a <__swbuf_r>
 8008a3c:	6813      	ldr	r3, [r2, #0]
 8008a3e:	1c58      	adds	r0, r3, #1
 8008a40:	6010      	str	r0, [r2, #0]
 8008a42:	7019      	strb	r1, [r3, #0]
 8008a44:	4608      	mov	r0, r1
 8008a46:	bc10      	pop	{r4}
 8008a48:	4770      	bx	lr

08008a4a <__sfputs_r>:
 8008a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	4614      	mov	r4, r2
 8008a52:	18d5      	adds	r5, r2, r3
 8008a54:	42ac      	cmp	r4, r5
 8008a56:	d101      	bne.n	8008a5c <__sfputs_r+0x12>
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e007      	b.n	8008a6c <__sfputs_r+0x22>
 8008a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a60:	463a      	mov	r2, r7
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7ff ffdc 	bl	8008a20 <__sfputc_r>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d1f3      	bne.n	8008a54 <__sfputs_r+0xa>
 8008a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a70 <_vfiprintf_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	460d      	mov	r5, r1
 8008a76:	b09d      	sub	sp, #116	@ 0x74
 8008a78:	4614      	mov	r4, r2
 8008a7a:	4698      	mov	r8, r3
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	b118      	cbz	r0, 8008a88 <_vfiprintf_r+0x18>
 8008a80:	6a03      	ldr	r3, [r0, #32]
 8008a82:	b90b      	cbnz	r3, 8008a88 <_vfiprintf_r+0x18>
 8008a84:	f7ff f8e6 	bl	8007c54 <__sinit>
 8008a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a8a:	07d9      	lsls	r1, r3, #31
 8008a8c:	d405      	bmi.n	8008a9a <_vfiprintf_r+0x2a>
 8008a8e:	89ab      	ldrh	r3, [r5, #12]
 8008a90:	059a      	lsls	r2, r3, #22
 8008a92:	d402      	bmi.n	8008a9a <_vfiprintf_r+0x2a>
 8008a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a96:	f7ff f94a 	bl	8007d2e <__retarget_lock_acquire_recursive>
 8008a9a:	89ab      	ldrh	r3, [r5, #12]
 8008a9c:	071b      	lsls	r3, r3, #28
 8008a9e:	d501      	bpl.n	8008aa4 <_vfiprintf_r+0x34>
 8008aa0:	692b      	ldr	r3, [r5, #16]
 8008aa2:	b99b      	cbnz	r3, 8008acc <_vfiprintf_r+0x5c>
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f000 fe76 	bl	8009798 <__swsetup_r>
 8008aac:	b170      	cbz	r0, 8008acc <_vfiprintf_r+0x5c>
 8008aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ab0:	07dc      	lsls	r4, r3, #31
 8008ab2:	d504      	bpl.n	8008abe <_vfiprintf_r+0x4e>
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ab8:	b01d      	add	sp, #116	@ 0x74
 8008aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	0598      	lsls	r0, r3, #22
 8008ac2:	d4f7      	bmi.n	8008ab4 <_vfiprintf_r+0x44>
 8008ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ac6:	f7ff f933 	bl	8007d30 <__retarget_lock_release_recursive>
 8008aca:	e7f3      	b.n	8008ab4 <_vfiprintf_r+0x44>
 8008acc:	2300      	movs	r3, #0
 8008ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ada:	2330      	movs	r3, #48	@ 0x30
 8008adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c8c <_vfiprintf_r+0x21c>
 8008ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ae4:	f04f 0901 	mov.w	r9, #1
 8008ae8:	4623      	mov	r3, r4
 8008aea:	469a      	mov	sl, r3
 8008aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af0:	b10a      	cbz	r2, 8008af6 <_vfiprintf_r+0x86>
 8008af2:	2a25      	cmp	r2, #37	@ 0x25
 8008af4:	d1f9      	bne.n	8008aea <_vfiprintf_r+0x7a>
 8008af6:	ebba 0b04 	subs.w	fp, sl, r4
 8008afa:	d00b      	beq.n	8008b14 <_vfiprintf_r+0xa4>
 8008afc:	465b      	mov	r3, fp
 8008afe:	4622      	mov	r2, r4
 8008b00:	4629      	mov	r1, r5
 8008b02:	4630      	mov	r0, r6
 8008b04:	f7ff ffa1 	bl	8008a4a <__sfputs_r>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f000 80a7 	beq.w	8008c5c <_vfiprintf_r+0x1ec>
 8008b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b10:	445a      	add	r2, fp
 8008b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b14:	f89a 3000 	ldrb.w	r3, [sl]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 809f 	beq.w	8008c5c <_vfiprintf_r+0x1ec>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b28:	f10a 0a01 	add.w	sl, sl, #1
 8008b2c:	9304      	str	r3, [sp, #16]
 8008b2e:	9307      	str	r3, [sp, #28]
 8008b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b36:	4654      	mov	r4, sl
 8008b38:	2205      	movs	r2, #5
 8008b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3e:	4853      	ldr	r0, [pc, #332]	@ (8008c8c <_vfiprintf_r+0x21c>)
 8008b40:	f7f7 fb56 	bl	80001f0 <memchr>
 8008b44:	9a04      	ldr	r2, [sp, #16]
 8008b46:	b9d8      	cbnz	r0, 8008b80 <_vfiprintf_r+0x110>
 8008b48:	06d1      	lsls	r1, r2, #27
 8008b4a:	bf44      	itt	mi
 8008b4c:	2320      	movmi	r3, #32
 8008b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b52:	0713      	lsls	r3, r2, #28
 8008b54:	bf44      	itt	mi
 8008b56:	232b      	movmi	r3, #43	@ 0x2b
 8008b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b62:	d015      	beq.n	8008b90 <_vfiprintf_r+0x120>
 8008b64:	9a07      	ldr	r2, [sp, #28]
 8008b66:	4654      	mov	r4, sl
 8008b68:	2000      	movs	r0, #0
 8008b6a:	f04f 0c0a 	mov.w	ip, #10
 8008b6e:	4621      	mov	r1, r4
 8008b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b74:	3b30      	subs	r3, #48	@ 0x30
 8008b76:	2b09      	cmp	r3, #9
 8008b78:	d94b      	bls.n	8008c12 <_vfiprintf_r+0x1a2>
 8008b7a:	b1b0      	cbz	r0, 8008baa <_vfiprintf_r+0x13a>
 8008b7c:	9207      	str	r2, [sp, #28]
 8008b7e:	e014      	b.n	8008baa <_vfiprintf_r+0x13a>
 8008b80:	eba0 0308 	sub.w	r3, r0, r8
 8008b84:	fa09 f303 	lsl.w	r3, r9, r3
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	9304      	str	r3, [sp, #16]
 8008b8c:	46a2      	mov	sl, r4
 8008b8e:	e7d2      	b.n	8008b36 <_vfiprintf_r+0xc6>
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	1d19      	adds	r1, r3, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	9103      	str	r1, [sp, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	bfbb      	ittet	lt
 8008b9c:	425b      	neglt	r3, r3
 8008b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8008ba2:	9307      	strge	r3, [sp, #28]
 8008ba4:	9307      	strlt	r3, [sp, #28]
 8008ba6:	bfb8      	it	lt
 8008ba8:	9204      	strlt	r2, [sp, #16]
 8008baa:	7823      	ldrb	r3, [r4, #0]
 8008bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bae:	d10a      	bne.n	8008bc6 <_vfiprintf_r+0x156>
 8008bb0:	7863      	ldrb	r3, [r4, #1]
 8008bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bb4:	d132      	bne.n	8008c1c <_vfiprintf_r+0x1ac>
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	1d1a      	adds	r2, r3, #4
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	9203      	str	r2, [sp, #12]
 8008bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bc2:	3402      	adds	r4, #2
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008c90 <_vfiprintf_r+0x220>
 8008bca:	7821      	ldrb	r1, [r4, #0]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f7f7 fb0e 	bl	80001f0 <memchr>
 8008bd4:	b138      	cbz	r0, 8008be6 <_vfiprintf_r+0x176>
 8008bd6:	9b04      	ldr	r3, [sp, #16]
 8008bd8:	eba0 000a 	sub.w	r0, r0, sl
 8008bdc:	2240      	movs	r2, #64	@ 0x40
 8008bde:	4082      	lsls	r2, r0
 8008be0:	4313      	orrs	r3, r2
 8008be2:	3401      	adds	r4, #1
 8008be4:	9304      	str	r3, [sp, #16]
 8008be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bea:	482a      	ldr	r0, [pc, #168]	@ (8008c94 <_vfiprintf_r+0x224>)
 8008bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bf0:	2206      	movs	r2, #6
 8008bf2:	f7f7 fafd 	bl	80001f0 <memchr>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d03f      	beq.n	8008c7a <_vfiprintf_r+0x20a>
 8008bfa:	4b27      	ldr	r3, [pc, #156]	@ (8008c98 <_vfiprintf_r+0x228>)
 8008bfc:	bb1b      	cbnz	r3, 8008c46 <_vfiprintf_r+0x1d6>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	3307      	adds	r3, #7
 8008c02:	f023 0307 	bic.w	r3, r3, #7
 8008c06:	3308      	adds	r3, #8
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c0c:	443b      	add	r3, r7
 8008c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c10:	e76a      	b.n	8008ae8 <_vfiprintf_r+0x78>
 8008c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c16:	460c      	mov	r4, r1
 8008c18:	2001      	movs	r0, #1
 8008c1a:	e7a8      	b.n	8008b6e <_vfiprintf_r+0xfe>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	3401      	adds	r4, #1
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	4619      	mov	r1, r3
 8008c24:	f04f 0c0a 	mov.w	ip, #10
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c2e:	3a30      	subs	r2, #48	@ 0x30
 8008c30:	2a09      	cmp	r2, #9
 8008c32:	d903      	bls.n	8008c3c <_vfiprintf_r+0x1cc>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0c6      	beq.n	8008bc6 <_vfiprintf_r+0x156>
 8008c38:	9105      	str	r1, [sp, #20]
 8008c3a:	e7c4      	b.n	8008bc6 <_vfiprintf_r+0x156>
 8008c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c40:	4604      	mov	r4, r0
 8008c42:	2301      	movs	r3, #1
 8008c44:	e7f0      	b.n	8008c28 <_vfiprintf_r+0x1b8>
 8008c46:	ab03      	add	r3, sp, #12
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	462a      	mov	r2, r5
 8008c4c:	4b13      	ldr	r3, [pc, #76]	@ (8008c9c <_vfiprintf_r+0x22c>)
 8008c4e:	a904      	add	r1, sp, #16
 8008c50:	4630      	mov	r0, r6
 8008c52:	f7fe fbb9 	bl	80073c8 <_printf_float>
 8008c56:	4607      	mov	r7, r0
 8008c58:	1c78      	adds	r0, r7, #1
 8008c5a:	d1d6      	bne.n	8008c0a <_vfiprintf_r+0x19a>
 8008c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c5e:	07d9      	lsls	r1, r3, #31
 8008c60:	d405      	bmi.n	8008c6e <_vfiprintf_r+0x1fe>
 8008c62:	89ab      	ldrh	r3, [r5, #12]
 8008c64:	059a      	lsls	r2, r3, #22
 8008c66:	d402      	bmi.n	8008c6e <_vfiprintf_r+0x1fe>
 8008c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c6a:	f7ff f861 	bl	8007d30 <__retarget_lock_release_recursive>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	065b      	lsls	r3, r3, #25
 8008c72:	f53f af1f 	bmi.w	8008ab4 <_vfiprintf_r+0x44>
 8008c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c78:	e71e      	b.n	8008ab8 <_vfiprintf_r+0x48>
 8008c7a:	ab03      	add	r3, sp, #12
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4b06      	ldr	r3, [pc, #24]	@ (8008c9c <_vfiprintf_r+0x22c>)
 8008c82:	a904      	add	r1, sp, #16
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7fe fe39 	bl	80078fc <_printf_i>
 8008c8a:	e7e4      	b.n	8008c56 <_vfiprintf_r+0x1e6>
 8008c8c:	0800bb35 	.word	0x0800bb35
 8008c90:	0800bb3b 	.word	0x0800bb3b
 8008c94:	0800bb3f 	.word	0x0800bb3f
 8008c98:	080073c9 	.word	0x080073c9
 8008c9c:	08008a4b 	.word	0x08008a4b

08008ca0 <malloc>:
 8008ca0:	4b02      	ldr	r3, [pc, #8]	@ (8008cac <malloc+0xc>)
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	f000 b825 	b.w	8008cf4 <_malloc_r>
 8008caa:	bf00      	nop
 8008cac:	20000030 	.word	0x20000030

08008cb0 <sbrk_aligned>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	4e0f      	ldr	r6, [pc, #60]	@ (8008cf0 <sbrk_aligned+0x40>)
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	6831      	ldr	r1, [r6, #0]
 8008cb8:	4605      	mov	r5, r0
 8008cba:	b911      	cbnz	r1, 8008cc2 <sbrk_aligned+0x12>
 8008cbc:	f000 fe7a 	bl	80099b4 <_sbrk_r>
 8008cc0:	6030      	str	r0, [r6, #0]
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f000 fe75 	bl	80099b4 <_sbrk_r>
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	d103      	bne.n	8008cd6 <sbrk_aligned+0x26>
 8008cce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	bd70      	pop	{r4, r5, r6, pc}
 8008cd6:	1cc4      	adds	r4, r0, #3
 8008cd8:	f024 0403 	bic.w	r4, r4, #3
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d0f8      	beq.n	8008cd2 <sbrk_aligned+0x22>
 8008ce0:	1a21      	subs	r1, r4, r0
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 fe66 	bl	80099b4 <_sbrk_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d1f2      	bne.n	8008cd2 <sbrk_aligned+0x22>
 8008cec:	e7ef      	b.n	8008cce <sbrk_aligned+0x1e>
 8008cee:	bf00      	nop
 8008cf0:	20025e2c 	.word	0x20025e2c

08008cf4 <_malloc_r>:
 8008cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf8:	1ccd      	adds	r5, r1, #3
 8008cfa:	f025 0503 	bic.w	r5, r5, #3
 8008cfe:	3508      	adds	r5, #8
 8008d00:	2d0c      	cmp	r5, #12
 8008d02:	bf38      	it	cc
 8008d04:	250c      	movcc	r5, #12
 8008d06:	2d00      	cmp	r5, #0
 8008d08:	4606      	mov	r6, r0
 8008d0a:	db01      	blt.n	8008d10 <_malloc_r+0x1c>
 8008d0c:	42a9      	cmp	r1, r5
 8008d0e:	d904      	bls.n	8008d1a <_malloc_r+0x26>
 8008d10:	230c      	movs	r3, #12
 8008d12:	6033      	str	r3, [r6, #0]
 8008d14:	2000      	movs	r0, #0
 8008d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008df0 <_malloc_r+0xfc>
 8008d1e:	f000 f911 	bl	8008f44 <__malloc_lock>
 8008d22:	f8d8 3000 	ldr.w	r3, [r8]
 8008d26:	461c      	mov	r4, r3
 8008d28:	bb44      	cbnz	r4, 8008d7c <_malloc_r+0x88>
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f7ff ffbf 	bl	8008cb0 <sbrk_aligned>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	4604      	mov	r4, r0
 8008d36:	d158      	bne.n	8008dea <_malloc_r+0xf6>
 8008d38:	f8d8 4000 	ldr.w	r4, [r8]
 8008d3c:	4627      	mov	r7, r4
 8008d3e:	2f00      	cmp	r7, #0
 8008d40:	d143      	bne.n	8008dca <_malloc_r+0xd6>
 8008d42:	2c00      	cmp	r4, #0
 8008d44:	d04b      	beq.n	8008dde <_malloc_r+0xea>
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	4639      	mov	r1, r7
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	eb04 0903 	add.w	r9, r4, r3
 8008d50:	f000 fe30 	bl	80099b4 <_sbrk_r>
 8008d54:	4581      	cmp	r9, r0
 8008d56:	d142      	bne.n	8008dde <_malloc_r+0xea>
 8008d58:	6821      	ldr	r1, [r4, #0]
 8008d5a:	1a6d      	subs	r5, r5, r1
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7ff ffa6 	bl	8008cb0 <sbrk_aligned>
 8008d64:	3001      	adds	r0, #1
 8008d66:	d03a      	beq.n	8008dde <_malloc_r+0xea>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	442b      	add	r3, r5
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	bb62      	cbnz	r2, 8008dd0 <_malloc_r+0xdc>
 8008d76:	f8c8 7000 	str.w	r7, [r8]
 8008d7a:	e00f      	b.n	8008d9c <_malloc_r+0xa8>
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	1b52      	subs	r2, r2, r5
 8008d80:	d420      	bmi.n	8008dc4 <_malloc_r+0xd0>
 8008d82:	2a0b      	cmp	r2, #11
 8008d84:	d917      	bls.n	8008db6 <_malloc_r+0xc2>
 8008d86:	1961      	adds	r1, r4, r5
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	6025      	str	r5, [r4, #0]
 8008d8c:	bf18      	it	ne
 8008d8e:	6059      	strne	r1, [r3, #4]
 8008d90:	6863      	ldr	r3, [r4, #4]
 8008d92:	bf08      	it	eq
 8008d94:	f8c8 1000 	streq.w	r1, [r8]
 8008d98:	5162      	str	r2, [r4, r5]
 8008d9a:	604b      	str	r3, [r1, #4]
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f000 f8d7 	bl	8008f50 <__malloc_unlock>
 8008da2:	f104 000b 	add.w	r0, r4, #11
 8008da6:	1d23      	adds	r3, r4, #4
 8008da8:	f020 0007 	bic.w	r0, r0, #7
 8008dac:	1ac2      	subs	r2, r0, r3
 8008dae:	bf1c      	itt	ne
 8008db0:	1a1b      	subne	r3, r3, r0
 8008db2:	50a3      	strne	r3, [r4, r2]
 8008db4:	e7af      	b.n	8008d16 <_malloc_r+0x22>
 8008db6:	6862      	ldr	r2, [r4, #4]
 8008db8:	42a3      	cmp	r3, r4
 8008dba:	bf0c      	ite	eq
 8008dbc:	f8c8 2000 	streq.w	r2, [r8]
 8008dc0:	605a      	strne	r2, [r3, #4]
 8008dc2:	e7eb      	b.n	8008d9c <_malloc_r+0xa8>
 8008dc4:	4623      	mov	r3, r4
 8008dc6:	6864      	ldr	r4, [r4, #4]
 8008dc8:	e7ae      	b.n	8008d28 <_malloc_r+0x34>
 8008dca:	463c      	mov	r4, r7
 8008dcc:	687f      	ldr	r7, [r7, #4]
 8008dce:	e7b6      	b.n	8008d3e <_malloc_r+0x4a>
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	d1fb      	bne.n	8008dd0 <_malloc_r+0xdc>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	6053      	str	r3, [r2, #4]
 8008ddc:	e7de      	b.n	8008d9c <_malloc_r+0xa8>
 8008dde:	230c      	movs	r3, #12
 8008de0:	6033      	str	r3, [r6, #0]
 8008de2:	4630      	mov	r0, r6
 8008de4:	f000 f8b4 	bl	8008f50 <__malloc_unlock>
 8008de8:	e794      	b.n	8008d14 <_malloc_r+0x20>
 8008dea:	6005      	str	r5, [r0, #0]
 8008dec:	e7d6      	b.n	8008d9c <_malloc_r+0xa8>
 8008dee:	bf00      	nop
 8008df0:	20025e30 	.word	0x20025e30

08008df4 <__sflush_r>:
 8008df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	0716      	lsls	r6, r2, #28
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	d454      	bmi.n	8008eac <__sflush_r+0xb8>
 8008e02:	684b      	ldr	r3, [r1, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	dc02      	bgt.n	8008e0e <__sflush_r+0x1a>
 8008e08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dd48      	ble.n	8008ea0 <__sflush_r+0xac>
 8008e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	d045      	beq.n	8008ea0 <__sflush_r+0xac>
 8008e14:	2300      	movs	r3, #0
 8008e16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e1a:	682f      	ldr	r7, [r5, #0]
 8008e1c:	6a21      	ldr	r1, [r4, #32]
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	d030      	beq.n	8008e84 <__sflush_r+0x90>
 8008e22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	0759      	lsls	r1, r3, #29
 8008e28:	d505      	bpl.n	8008e36 <__sflush_r+0x42>
 8008e2a:	6863      	ldr	r3, [r4, #4]
 8008e2c:	1ad2      	subs	r2, r2, r3
 8008e2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e30:	b10b      	cbz	r3, 8008e36 <__sflush_r+0x42>
 8008e32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e34:	1ad2      	subs	r2, r2, r3
 8008e36:	2300      	movs	r3, #0
 8008e38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e3a:	6a21      	ldr	r1, [r4, #32]
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	47b0      	blx	r6
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	d106      	bne.n	8008e54 <__sflush_r+0x60>
 8008e46:	6829      	ldr	r1, [r5, #0]
 8008e48:	291d      	cmp	r1, #29
 8008e4a:	d82b      	bhi.n	8008ea4 <__sflush_r+0xb0>
 8008e4c:	4a28      	ldr	r2, [pc, #160]	@ (8008ef0 <__sflush_r+0xfc>)
 8008e4e:	410a      	asrs	r2, r1
 8008e50:	07d6      	lsls	r6, r2, #31
 8008e52:	d427      	bmi.n	8008ea4 <__sflush_r+0xb0>
 8008e54:	2200      	movs	r2, #0
 8008e56:	6062      	str	r2, [r4, #4]
 8008e58:	04d9      	lsls	r1, r3, #19
 8008e5a:	6922      	ldr	r2, [r4, #16]
 8008e5c:	6022      	str	r2, [r4, #0]
 8008e5e:	d504      	bpl.n	8008e6a <__sflush_r+0x76>
 8008e60:	1c42      	adds	r2, r0, #1
 8008e62:	d101      	bne.n	8008e68 <__sflush_r+0x74>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b903      	cbnz	r3, 8008e6a <__sflush_r+0x76>
 8008e68:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e6c:	602f      	str	r7, [r5, #0]
 8008e6e:	b1b9      	cbz	r1, 8008ea0 <__sflush_r+0xac>
 8008e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e74:	4299      	cmp	r1, r3
 8008e76:	d002      	beq.n	8008e7e <__sflush_r+0x8a>
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f000 ff41 	bl	8009d00 <_free_r>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e82:	e00d      	b.n	8008ea0 <__sflush_r+0xac>
 8008e84:	2301      	movs	r3, #1
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b0      	blx	r6
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	1c50      	adds	r0, r2, #1
 8008e8e:	d1c9      	bne.n	8008e24 <__sflush_r+0x30>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0c6      	beq.n	8008e24 <__sflush_r+0x30>
 8008e96:	2b1d      	cmp	r3, #29
 8008e98:	d001      	beq.n	8008e9e <__sflush_r+0xaa>
 8008e9a:	2b16      	cmp	r3, #22
 8008e9c:	d11d      	bne.n	8008eda <__sflush_r+0xe6>
 8008e9e:	602f      	str	r7, [r5, #0]
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e021      	b.n	8008ee8 <__sflush_r+0xf4>
 8008ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ea8:	b21b      	sxth	r3, r3
 8008eaa:	e01a      	b.n	8008ee2 <__sflush_r+0xee>
 8008eac:	690f      	ldr	r7, [r1, #16]
 8008eae:	2f00      	cmp	r7, #0
 8008eb0:	d0f6      	beq.n	8008ea0 <__sflush_r+0xac>
 8008eb2:	0793      	lsls	r3, r2, #30
 8008eb4:	680e      	ldr	r6, [r1, #0]
 8008eb6:	bf08      	it	eq
 8008eb8:	694b      	ldreq	r3, [r1, #20]
 8008eba:	600f      	str	r7, [r1, #0]
 8008ebc:	bf18      	it	ne
 8008ebe:	2300      	movne	r3, #0
 8008ec0:	1bf6      	subs	r6, r6, r7
 8008ec2:	608b      	str	r3, [r1, #8]
 8008ec4:	2e00      	cmp	r6, #0
 8008ec6:	ddeb      	ble.n	8008ea0 <__sflush_r+0xac>
 8008ec8:	6a21      	ldr	r1, [r4, #32]
 8008eca:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008ece:	4633      	mov	r3, r6
 8008ed0:	463a      	mov	r2, r7
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47e0      	blx	ip
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	dc07      	bgt.n	8008eea <__sflush_r+0xf6>
 8008eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ee2:	81a3      	strh	r3, [r4, #12]
 8008ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eea:	4407      	add	r7, r0
 8008eec:	1a36      	subs	r6, r6, r0
 8008eee:	e7e9      	b.n	8008ec4 <__sflush_r+0xd0>
 8008ef0:	dfbffffe 	.word	0xdfbffffe

08008ef4 <_fflush_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	690b      	ldr	r3, [r1, #16]
 8008ef8:	4605      	mov	r5, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	b913      	cbnz	r3, 8008f04 <_fflush_r+0x10>
 8008efe:	2500      	movs	r5, #0
 8008f00:	4628      	mov	r0, r5
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	b118      	cbz	r0, 8008f0e <_fflush_r+0x1a>
 8008f06:	6a03      	ldr	r3, [r0, #32]
 8008f08:	b90b      	cbnz	r3, 8008f0e <_fflush_r+0x1a>
 8008f0a:	f7fe fea3 	bl	8007c54 <__sinit>
 8008f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0f3      	beq.n	8008efe <_fflush_r+0xa>
 8008f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f18:	07d0      	lsls	r0, r2, #31
 8008f1a:	d404      	bmi.n	8008f26 <_fflush_r+0x32>
 8008f1c:	0599      	lsls	r1, r3, #22
 8008f1e:	d402      	bmi.n	8008f26 <_fflush_r+0x32>
 8008f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f22:	f7fe ff04 	bl	8007d2e <__retarget_lock_acquire_recursive>
 8008f26:	4628      	mov	r0, r5
 8008f28:	4621      	mov	r1, r4
 8008f2a:	f7ff ff63 	bl	8008df4 <__sflush_r>
 8008f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f30:	07da      	lsls	r2, r3, #31
 8008f32:	4605      	mov	r5, r0
 8008f34:	d4e4      	bmi.n	8008f00 <_fflush_r+0xc>
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	059b      	lsls	r3, r3, #22
 8008f3a:	d4e1      	bmi.n	8008f00 <_fflush_r+0xc>
 8008f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f3e:	f7fe fef7 	bl	8007d30 <__retarget_lock_release_recursive>
 8008f42:	e7dd      	b.n	8008f00 <_fflush_r+0xc>

08008f44 <__malloc_lock>:
 8008f44:	4801      	ldr	r0, [pc, #4]	@ (8008f4c <__malloc_lock+0x8>)
 8008f46:	f7fe bef2 	b.w	8007d2e <__retarget_lock_acquire_recursive>
 8008f4a:	bf00      	nop
 8008f4c:	20025e28 	.word	0x20025e28

08008f50 <__malloc_unlock>:
 8008f50:	4801      	ldr	r0, [pc, #4]	@ (8008f58 <__malloc_unlock+0x8>)
 8008f52:	f7fe beed 	b.w	8007d30 <__retarget_lock_release_recursive>
 8008f56:	bf00      	nop
 8008f58:	20025e28 	.word	0x20025e28

08008f5c <_Balloc>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	69c6      	ldr	r6, [r0, #28]
 8008f60:	4604      	mov	r4, r0
 8008f62:	460d      	mov	r5, r1
 8008f64:	b976      	cbnz	r6, 8008f84 <_Balloc+0x28>
 8008f66:	2010      	movs	r0, #16
 8008f68:	f7ff fe9a 	bl	8008ca0 <malloc>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	61e0      	str	r0, [r4, #28]
 8008f70:	b920      	cbnz	r0, 8008f7c <_Balloc+0x20>
 8008f72:	4b18      	ldr	r3, [pc, #96]	@ (8008fd4 <_Balloc+0x78>)
 8008f74:	4818      	ldr	r0, [pc, #96]	@ (8008fd8 <_Balloc+0x7c>)
 8008f76:	216b      	movs	r1, #107	@ 0x6b
 8008f78:	f000 fe90 	bl	8009c9c <__assert_func>
 8008f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f80:	6006      	str	r6, [r0, #0]
 8008f82:	60c6      	str	r6, [r0, #12]
 8008f84:	69e6      	ldr	r6, [r4, #28]
 8008f86:	68f3      	ldr	r3, [r6, #12]
 8008f88:	b183      	cbz	r3, 8008fac <_Balloc+0x50>
 8008f8a:	69e3      	ldr	r3, [r4, #28]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f92:	b9b8      	cbnz	r0, 8008fc4 <_Balloc+0x68>
 8008f94:	2101      	movs	r1, #1
 8008f96:	fa01 f605 	lsl.w	r6, r1, r5
 8008f9a:	1d72      	adds	r2, r6, #5
 8008f9c:	0092      	lsls	r2, r2, #2
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f000 fe9a 	bl	8009cd8 <_calloc_r>
 8008fa4:	b160      	cbz	r0, 8008fc0 <_Balloc+0x64>
 8008fa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008faa:	e00e      	b.n	8008fca <_Balloc+0x6e>
 8008fac:	2221      	movs	r2, #33	@ 0x21
 8008fae:	2104      	movs	r1, #4
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fe91 	bl	8009cd8 <_calloc_r>
 8008fb6:	69e3      	ldr	r3, [r4, #28]
 8008fb8:	60f0      	str	r0, [r6, #12]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e4      	bne.n	8008f8a <_Balloc+0x2e>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	6802      	ldr	r2, [r0, #0]
 8008fc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fd0:	e7f7      	b.n	8008fc2 <_Balloc+0x66>
 8008fd2:	bf00      	nop
 8008fd4:	0800bab5 	.word	0x0800bab5
 8008fd8:	0800bb46 	.word	0x0800bb46

08008fdc <_Bfree>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	69c6      	ldr	r6, [r0, #28]
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	b976      	cbnz	r6, 8009004 <_Bfree+0x28>
 8008fe6:	2010      	movs	r0, #16
 8008fe8:	f7ff fe5a 	bl	8008ca0 <malloc>
 8008fec:	4602      	mov	r2, r0
 8008fee:	61e8      	str	r0, [r5, #28]
 8008ff0:	b920      	cbnz	r0, 8008ffc <_Bfree+0x20>
 8008ff2:	4b09      	ldr	r3, [pc, #36]	@ (8009018 <_Bfree+0x3c>)
 8008ff4:	4809      	ldr	r0, [pc, #36]	@ (800901c <_Bfree+0x40>)
 8008ff6:	218f      	movs	r1, #143	@ 0x8f
 8008ff8:	f000 fe50 	bl	8009c9c <__assert_func>
 8008ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009000:	6006      	str	r6, [r0, #0]
 8009002:	60c6      	str	r6, [r0, #12]
 8009004:	b13c      	cbz	r4, 8009016 <_Bfree+0x3a>
 8009006:	69eb      	ldr	r3, [r5, #28]
 8009008:	6862      	ldr	r2, [r4, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009010:	6021      	str	r1, [r4, #0]
 8009012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	0800bab5 	.word	0x0800bab5
 800901c:	0800bb46 	.word	0x0800bb46

08009020 <__multadd>:
 8009020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009024:	690d      	ldr	r5, [r1, #16]
 8009026:	4607      	mov	r7, r0
 8009028:	460c      	mov	r4, r1
 800902a:	461e      	mov	r6, r3
 800902c:	f101 0c14 	add.w	ip, r1, #20
 8009030:	2000      	movs	r0, #0
 8009032:	f8dc 3000 	ldr.w	r3, [ip]
 8009036:	b299      	uxth	r1, r3
 8009038:	fb02 6101 	mla	r1, r2, r1, r6
 800903c:	0c1e      	lsrs	r6, r3, #16
 800903e:	0c0b      	lsrs	r3, r1, #16
 8009040:	fb02 3306 	mla	r3, r2, r6, r3
 8009044:	b289      	uxth	r1, r1
 8009046:	3001      	adds	r0, #1
 8009048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800904c:	4285      	cmp	r5, r0
 800904e:	f84c 1b04 	str.w	r1, [ip], #4
 8009052:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009056:	dcec      	bgt.n	8009032 <__multadd+0x12>
 8009058:	b30e      	cbz	r6, 800909e <__multadd+0x7e>
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	42ab      	cmp	r3, r5
 800905e:	dc19      	bgt.n	8009094 <__multadd+0x74>
 8009060:	6861      	ldr	r1, [r4, #4]
 8009062:	4638      	mov	r0, r7
 8009064:	3101      	adds	r1, #1
 8009066:	f7ff ff79 	bl	8008f5c <_Balloc>
 800906a:	4680      	mov	r8, r0
 800906c:	b928      	cbnz	r0, 800907a <__multadd+0x5a>
 800906e:	4602      	mov	r2, r0
 8009070:	4b0c      	ldr	r3, [pc, #48]	@ (80090a4 <__multadd+0x84>)
 8009072:	480d      	ldr	r0, [pc, #52]	@ (80090a8 <__multadd+0x88>)
 8009074:	21ba      	movs	r1, #186	@ 0xba
 8009076:	f000 fe11 	bl	8009c9c <__assert_func>
 800907a:	6922      	ldr	r2, [r4, #16]
 800907c:	3202      	adds	r2, #2
 800907e:	f104 010c 	add.w	r1, r4, #12
 8009082:	0092      	lsls	r2, r2, #2
 8009084:	300c      	adds	r0, #12
 8009086:	f000 fdf3 	bl	8009c70 <memcpy>
 800908a:	4621      	mov	r1, r4
 800908c:	4638      	mov	r0, r7
 800908e:	f7ff ffa5 	bl	8008fdc <_Bfree>
 8009092:	4644      	mov	r4, r8
 8009094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009098:	3501      	adds	r5, #1
 800909a:	615e      	str	r6, [r3, #20]
 800909c:	6125      	str	r5, [r4, #16]
 800909e:	4620      	mov	r0, r4
 80090a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a4:	0800bb24 	.word	0x0800bb24
 80090a8:	0800bb46 	.word	0x0800bb46

080090ac <__hi0bits>:
 80090ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090b0:	4603      	mov	r3, r0
 80090b2:	bf36      	itet	cc
 80090b4:	0403      	lslcc	r3, r0, #16
 80090b6:	2000      	movcs	r0, #0
 80090b8:	2010      	movcc	r0, #16
 80090ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090be:	bf3c      	itt	cc
 80090c0:	021b      	lslcc	r3, r3, #8
 80090c2:	3008      	addcc	r0, #8
 80090c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090c8:	bf3c      	itt	cc
 80090ca:	011b      	lslcc	r3, r3, #4
 80090cc:	3004      	addcc	r0, #4
 80090ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090d2:	bf3c      	itt	cc
 80090d4:	009b      	lslcc	r3, r3, #2
 80090d6:	3002      	addcc	r0, #2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	db05      	blt.n	80090e8 <__hi0bits+0x3c>
 80090dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090e0:	f100 0001 	add.w	r0, r0, #1
 80090e4:	bf08      	it	eq
 80090e6:	2020      	moveq	r0, #32
 80090e8:	4770      	bx	lr

080090ea <__lo0bits>:
 80090ea:	6803      	ldr	r3, [r0, #0]
 80090ec:	4602      	mov	r2, r0
 80090ee:	f013 0007 	ands.w	r0, r3, #7
 80090f2:	d00b      	beq.n	800910c <__lo0bits+0x22>
 80090f4:	07d9      	lsls	r1, r3, #31
 80090f6:	d421      	bmi.n	800913c <__lo0bits+0x52>
 80090f8:	0798      	lsls	r0, r3, #30
 80090fa:	bf49      	itett	mi
 80090fc:	085b      	lsrmi	r3, r3, #1
 80090fe:	089b      	lsrpl	r3, r3, #2
 8009100:	2001      	movmi	r0, #1
 8009102:	6013      	strmi	r3, [r2, #0]
 8009104:	bf5c      	itt	pl
 8009106:	6013      	strpl	r3, [r2, #0]
 8009108:	2002      	movpl	r0, #2
 800910a:	4770      	bx	lr
 800910c:	b299      	uxth	r1, r3
 800910e:	b909      	cbnz	r1, 8009114 <__lo0bits+0x2a>
 8009110:	0c1b      	lsrs	r3, r3, #16
 8009112:	2010      	movs	r0, #16
 8009114:	b2d9      	uxtb	r1, r3
 8009116:	b909      	cbnz	r1, 800911c <__lo0bits+0x32>
 8009118:	3008      	adds	r0, #8
 800911a:	0a1b      	lsrs	r3, r3, #8
 800911c:	0719      	lsls	r1, r3, #28
 800911e:	bf04      	itt	eq
 8009120:	091b      	lsreq	r3, r3, #4
 8009122:	3004      	addeq	r0, #4
 8009124:	0799      	lsls	r1, r3, #30
 8009126:	bf04      	itt	eq
 8009128:	089b      	lsreq	r3, r3, #2
 800912a:	3002      	addeq	r0, #2
 800912c:	07d9      	lsls	r1, r3, #31
 800912e:	d403      	bmi.n	8009138 <__lo0bits+0x4e>
 8009130:	085b      	lsrs	r3, r3, #1
 8009132:	f100 0001 	add.w	r0, r0, #1
 8009136:	d003      	beq.n	8009140 <__lo0bits+0x56>
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	4770      	bx	lr
 800913c:	2000      	movs	r0, #0
 800913e:	4770      	bx	lr
 8009140:	2020      	movs	r0, #32
 8009142:	4770      	bx	lr

08009144 <__i2b>:
 8009144:	b510      	push	{r4, lr}
 8009146:	460c      	mov	r4, r1
 8009148:	2101      	movs	r1, #1
 800914a:	f7ff ff07 	bl	8008f5c <_Balloc>
 800914e:	4602      	mov	r2, r0
 8009150:	b928      	cbnz	r0, 800915e <__i2b+0x1a>
 8009152:	4b05      	ldr	r3, [pc, #20]	@ (8009168 <__i2b+0x24>)
 8009154:	4805      	ldr	r0, [pc, #20]	@ (800916c <__i2b+0x28>)
 8009156:	f240 1145 	movw	r1, #325	@ 0x145
 800915a:	f000 fd9f 	bl	8009c9c <__assert_func>
 800915e:	2301      	movs	r3, #1
 8009160:	6144      	str	r4, [r0, #20]
 8009162:	6103      	str	r3, [r0, #16]
 8009164:	bd10      	pop	{r4, pc}
 8009166:	bf00      	nop
 8009168:	0800bb24 	.word	0x0800bb24
 800916c:	0800bb46 	.word	0x0800bb46

08009170 <__multiply>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	4614      	mov	r4, r2
 8009176:	690a      	ldr	r2, [r1, #16]
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	429a      	cmp	r2, r3
 800917c:	bfa8      	it	ge
 800917e:	4623      	movge	r3, r4
 8009180:	460f      	mov	r7, r1
 8009182:	bfa4      	itt	ge
 8009184:	460c      	movge	r4, r1
 8009186:	461f      	movge	r7, r3
 8009188:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800918c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009190:	68a3      	ldr	r3, [r4, #8]
 8009192:	6861      	ldr	r1, [r4, #4]
 8009194:	eb0a 0609 	add.w	r6, sl, r9
 8009198:	42b3      	cmp	r3, r6
 800919a:	b085      	sub	sp, #20
 800919c:	bfb8      	it	lt
 800919e:	3101      	addlt	r1, #1
 80091a0:	f7ff fedc 	bl	8008f5c <_Balloc>
 80091a4:	b930      	cbnz	r0, 80091b4 <__multiply+0x44>
 80091a6:	4602      	mov	r2, r0
 80091a8:	4b44      	ldr	r3, [pc, #272]	@ (80092bc <__multiply+0x14c>)
 80091aa:	4845      	ldr	r0, [pc, #276]	@ (80092c0 <__multiply+0x150>)
 80091ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091b0:	f000 fd74 	bl	8009c9c <__assert_func>
 80091b4:	f100 0514 	add.w	r5, r0, #20
 80091b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091bc:	462b      	mov	r3, r5
 80091be:	2200      	movs	r2, #0
 80091c0:	4543      	cmp	r3, r8
 80091c2:	d321      	bcc.n	8009208 <__multiply+0x98>
 80091c4:	f107 0114 	add.w	r1, r7, #20
 80091c8:	f104 0214 	add.w	r2, r4, #20
 80091cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80091d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80091d4:	9302      	str	r3, [sp, #8]
 80091d6:	1b13      	subs	r3, r2, r4
 80091d8:	3b15      	subs	r3, #21
 80091da:	f023 0303 	bic.w	r3, r3, #3
 80091de:	3304      	adds	r3, #4
 80091e0:	f104 0715 	add.w	r7, r4, #21
 80091e4:	42ba      	cmp	r2, r7
 80091e6:	bf38      	it	cc
 80091e8:	2304      	movcc	r3, #4
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	9b02      	ldr	r3, [sp, #8]
 80091ee:	9103      	str	r1, [sp, #12]
 80091f0:	428b      	cmp	r3, r1
 80091f2:	d80c      	bhi.n	800920e <__multiply+0x9e>
 80091f4:	2e00      	cmp	r6, #0
 80091f6:	dd03      	ble.n	8009200 <__multiply+0x90>
 80091f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d05a      	beq.n	80092b6 <__multiply+0x146>
 8009200:	6106      	str	r6, [r0, #16]
 8009202:	b005      	add	sp, #20
 8009204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009208:	f843 2b04 	str.w	r2, [r3], #4
 800920c:	e7d8      	b.n	80091c0 <__multiply+0x50>
 800920e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009212:	f1ba 0f00 	cmp.w	sl, #0
 8009216:	d023      	beq.n	8009260 <__multiply+0xf0>
 8009218:	f104 0e14 	add.w	lr, r4, #20
 800921c:	46a9      	mov	r9, r5
 800921e:	f04f 0c00 	mov.w	ip, #0
 8009222:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009226:	f8d9 3000 	ldr.w	r3, [r9]
 800922a:	fa1f fb87 	uxth.w	fp, r7
 800922e:	b29b      	uxth	r3, r3
 8009230:	fb0a 330b 	mla	r3, sl, fp, r3
 8009234:	4463      	add	r3, ip
 8009236:	f8d9 c000 	ldr.w	ip, [r9]
 800923a:	0c3f      	lsrs	r7, r7, #16
 800923c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009240:	fb0a c707 	mla	r7, sl, r7, ip
 8009244:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009248:	b29b      	uxth	r3, r3
 800924a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800924e:	4572      	cmp	r2, lr
 8009250:	f849 3b04 	str.w	r3, [r9], #4
 8009254:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009258:	d8e3      	bhi.n	8009222 <__multiply+0xb2>
 800925a:	9b01      	ldr	r3, [sp, #4]
 800925c:	f845 c003 	str.w	ip, [r5, r3]
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009266:	3104      	adds	r1, #4
 8009268:	f1b9 0f00 	cmp.w	r9, #0
 800926c:	d021      	beq.n	80092b2 <__multiply+0x142>
 800926e:	682b      	ldr	r3, [r5, #0]
 8009270:	f104 0c14 	add.w	ip, r4, #20
 8009274:	46ae      	mov	lr, r5
 8009276:	f04f 0a00 	mov.w	sl, #0
 800927a:	f8bc b000 	ldrh.w	fp, [ip]
 800927e:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009282:	fb09 770b 	mla	r7, r9, fp, r7
 8009286:	4457      	add	r7, sl
 8009288:	b29b      	uxth	r3, r3
 800928a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800928e:	f84e 3b04 	str.w	r3, [lr], #4
 8009292:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800929a:	f8be 3000 	ldrh.w	r3, [lr]
 800929e:	fb09 330a 	mla	r3, r9, sl, r3
 80092a2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80092a6:	4562      	cmp	r2, ip
 80092a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092ac:	d8e5      	bhi.n	800927a <__multiply+0x10a>
 80092ae:	9f01      	ldr	r7, [sp, #4]
 80092b0:	51eb      	str	r3, [r5, r7]
 80092b2:	3504      	adds	r5, #4
 80092b4:	e79a      	b.n	80091ec <__multiply+0x7c>
 80092b6:	3e01      	subs	r6, #1
 80092b8:	e79c      	b.n	80091f4 <__multiply+0x84>
 80092ba:	bf00      	nop
 80092bc:	0800bb24 	.word	0x0800bb24
 80092c0:	0800bb46 	.word	0x0800bb46

080092c4 <__pow5mult>:
 80092c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c8:	4615      	mov	r5, r2
 80092ca:	f012 0203 	ands.w	r2, r2, #3
 80092ce:	4607      	mov	r7, r0
 80092d0:	460e      	mov	r6, r1
 80092d2:	d007      	beq.n	80092e4 <__pow5mult+0x20>
 80092d4:	4c25      	ldr	r4, [pc, #148]	@ (800936c <__pow5mult+0xa8>)
 80092d6:	3a01      	subs	r2, #1
 80092d8:	2300      	movs	r3, #0
 80092da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092de:	f7ff fe9f 	bl	8009020 <__multadd>
 80092e2:	4606      	mov	r6, r0
 80092e4:	10ad      	asrs	r5, r5, #2
 80092e6:	d03d      	beq.n	8009364 <__pow5mult+0xa0>
 80092e8:	69fc      	ldr	r4, [r7, #28]
 80092ea:	b97c      	cbnz	r4, 800930c <__pow5mult+0x48>
 80092ec:	2010      	movs	r0, #16
 80092ee:	f7ff fcd7 	bl	8008ca0 <malloc>
 80092f2:	4602      	mov	r2, r0
 80092f4:	61f8      	str	r0, [r7, #28]
 80092f6:	b928      	cbnz	r0, 8009304 <__pow5mult+0x40>
 80092f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009370 <__pow5mult+0xac>)
 80092fa:	481e      	ldr	r0, [pc, #120]	@ (8009374 <__pow5mult+0xb0>)
 80092fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009300:	f000 fccc 	bl	8009c9c <__assert_func>
 8009304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009308:	6004      	str	r4, [r0, #0]
 800930a:	60c4      	str	r4, [r0, #12]
 800930c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009314:	b94c      	cbnz	r4, 800932a <__pow5mult+0x66>
 8009316:	f240 2171 	movw	r1, #625	@ 0x271
 800931a:	4638      	mov	r0, r7
 800931c:	f7ff ff12 	bl	8009144 <__i2b>
 8009320:	2300      	movs	r3, #0
 8009322:	f8c8 0008 	str.w	r0, [r8, #8]
 8009326:	4604      	mov	r4, r0
 8009328:	6003      	str	r3, [r0, #0]
 800932a:	f04f 0900 	mov.w	r9, #0
 800932e:	07eb      	lsls	r3, r5, #31
 8009330:	d50a      	bpl.n	8009348 <__pow5mult+0x84>
 8009332:	4631      	mov	r1, r6
 8009334:	4622      	mov	r2, r4
 8009336:	4638      	mov	r0, r7
 8009338:	f7ff ff1a 	bl	8009170 <__multiply>
 800933c:	4631      	mov	r1, r6
 800933e:	4680      	mov	r8, r0
 8009340:	4638      	mov	r0, r7
 8009342:	f7ff fe4b 	bl	8008fdc <_Bfree>
 8009346:	4646      	mov	r6, r8
 8009348:	106d      	asrs	r5, r5, #1
 800934a:	d00b      	beq.n	8009364 <__pow5mult+0xa0>
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	b938      	cbnz	r0, 8009360 <__pow5mult+0x9c>
 8009350:	4622      	mov	r2, r4
 8009352:	4621      	mov	r1, r4
 8009354:	4638      	mov	r0, r7
 8009356:	f7ff ff0b 	bl	8009170 <__multiply>
 800935a:	6020      	str	r0, [r4, #0]
 800935c:	f8c0 9000 	str.w	r9, [r0]
 8009360:	4604      	mov	r4, r0
 8009362:	e7e4      	b.n	800932e <__pow5mult+0x6a>
 8009364:	4630      	mov	r0, r6
 8009366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936a:	bf00      	nop
 800936c:	0800bba0 	.word	0x0800bba0
 8009370:	0800bab5 	.word	0x0800bab5
 8009374:	0800bb46 	.word	0x0800bb46

08009378 <__lshift>:
 8009378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800937c:	460c      	mov	r4, r1
 800937e:	6849      	ldr	r1, [r1, #4]
 8009380:	6923      	ldr	r3, [r4, #16]
 8009382:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009386:	68a3      	ldr	r3, [r4, #8]
 8009388:	4607      	mov	r7, r0
 800938a:	4691      	mov	r9, r2
 800938c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009390:	f108 0601 	add.w	r6, r8, #1
 8009394:	42b3      	cmp	r3, r6
 8009396:	db0b      	blt.n	80093b0 <__lshift+0x38>
 8009398:	4638      	mov	r0, r7
 800939a:	f7ff fddf 	bl	8008f5c <_Balloc>
 800939e:	4605      	mov	r5, r0
 80093a0:	b948      	cbnz	r0, 80093b6 <__lshift+0x3e>
 80093a2:	4602      	mov	r2, r0
 80093a4:	4b28      	ldr	r3, [pc, #160]	@ (8009448 <__lshift+0xd0>)
 80093a6:	4829      	ldr	r0, [pc, #164]	@ (800944c <__lshift+0xd4>)
 80093a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093ac:	f000 fc76 	bl	8009c9c <__assert_func>
 80093b0:	3101      	adds	r1, #1
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	e7ee      	b.n	8009394 <__lshift+0x1c>
 80093b6:	2300      	movs	r3, #0
 80093b8:	f100 0114 	add.w	r1, r0, #20
 80093bc:	f100 0210 	add.w	r2, r0, #16
 80093c0:	4618      	mov	r0, r3
 80093c2:	4553      	cmp	r3, sl
 80093c4:	db33      	blt.n	800942e <__lshift+0xb6>
 80093c6:	6920      	ldr	r0, [r4, #16]
 80093c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093cc:	f104 0314 	add.w	r3, r4, #20
 80093d0:	f019 091f 	ands.w	r9, r9, #31
 80093d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093dc:	d02b      	beq.n	8009436 <__lshift+0xbe>
 80093de:	f1c9 0e20 	rsb	lr, r9, #32
 80093e2:	468a      	mov	sl, r1
 80093e4:	2200      	movs	r2, #0
 80093e6:	6818      	ldr	r0, [r3, #0]
 80093e8:	fa00 f009 	lsl.w	r0, r0, r9
 80093ec:	4310      	orrs	r0, r2
 80093ee:	f84a 0b04 	str.w	r0, [sl], #4
 80093f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f6:	459c      	cmp	ip, r3
 80093f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80093fc:	d8f3      	bhi.n	80093e6 <__lshift+0x6e>
 80093fe:	ebac 0304 	sub.w	r3, ip, r4
 8009402:	3b15      	subs	r3, #21
 8009404:	f023 0303 	bic.w	r3, r3, #3
 8009408:	3304      	adds	r3, #4
 800940a:	f104 0015 	add.w	r0, r4, #21
 800940e:	4584      	cmp	ip, r0
 8009410:	bf38      	it	cc
 8009412:	2304      	movcc	r3, #4
 8009414:	50ca      	str	r2, [r1, r3]
 8009416:	b10a      	cbz	r2, 800941c <__lshift+0xa4>
 8009418:	f108 0602 	add.w	r6, r8, #2
 800941c:	3e01      	subs	r6, #1
 800941e:	4638      	mov	r0, r7
 8009420:	612e      	str	r6, [r5, #16]
 8009422:	4621      	mov	r1, r4
 8009424:	f7ff fdda 	bl	8008fdc <_Bfree>
 8009428:	4628      	mov	r0, r5
 800942a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009432:	3301      	adds	r3, #1
 8009434:	e7c5      	b.n	80093c2 <__lshift+0x4a>
 8009436:	3904      	subs	r1, #4
 8009438:	f853 2b04 	ldr.w	r2, [r3], #4
 800943c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009440:	459c      	cmp	ip, r3
 8009442:	d8f9      	bhi.n	8009438 <__lshift+0xc0>
 8009444:	e7ea      	b.n	800941c <__lshift+0xa4>
 8009446:	bf00      	nop
 8009448:	0800bb24 	.word	0x0800bb24
 800944c:	0800bb46 	.word	0x0800bb46

08009450 <__mcmp>:
 8009450:	690a      	ldr	r2, [r1, #16]
 8009452:	4603      	mov	r3, r0
 8009454:	6900      	ldr	r0, [r0, #16]
 8009456:	1a80      	subs	r0, r0, r2
 8009458:	b530      	push	{r4, r5, lr}
 800945a:	d10e      	bne.n	800947a <__mcmp+0x2a>
 800945c:	3314      	adds	r3, #20
 800945e:	3114      	adds	r1, #20
 8009460:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009464:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009468:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800946c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009470:	4295      	cmp	r5, r2
 8009472:	d003      	beq.n	800947c <__mcmp+0x2c>
 8009474:	d205      	bcs.n	8009482 <__mcmp+0x32>
 8009476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800947a:	bd30      	pop	{r4, r5, pc}
 800947c:	42a3      	cmp	r3, r4
 800947e:	d3f3      	bcc.n	8009468 <__mcmp+0x18>
 8009480:	e7fb      	b.n	800947a <__mcmp+0x2a>
 8009482:	2001      	movs	r0, #1
 8009484:	e7f9      	b.n	800947a <__mcmp+0x2a>
	...

08009488 <__mdiff>:
 8009488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	4689      	mov	r9, r1
 800948e:	4606      	mov	r6, r0
 8009490:	4611      	mov	r1, r2
 8009492:	4648      	mov	r0, r9
 8009494:	4614      	mov	r4, r2
 8009496:	f7ff ffdb 	bl	8009450 <__mcmp>
 800949a:	1e05      	subs	r5, r0, #0
 800949c:	d112      	bne.n	80094c4 <__mdiff+0x3c>
 800949e:	4629      	mov	r1, r5
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7ff fd5b 	bl	8008f5c <_Balloc>
 80094a6:	4602      	mov	r2, r0
 80094a8:	b928      	cbnz	r0, 80094b6 <__mdiff+0x2e>
 80094aa:	4b3e      	ldr	r3, [pc, #248]	@ (80095a4 <__mdiff+0x11c>)
 80094ac:	f240 2137 	movw	r1, #567	@ 0x237
 80094b0:	483d      	ldr	r0, [pc, #244]	@ (80095a8 <__mdiff+0x120>)
 80094b2:	f000 fbf3 	bl	8009c9c <__assert_func>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094bc:	4610      	mov	r0, r2
 80094be:	b003      	add	sp, #12
 80094c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c4:	bfbc      	itt	lt
 80094c6:	464b      	movlt	r3, r9
 80094c8:	46a1      	movlt	r9, r4
 80094ca:	4630      	mov	r0, r6
 80094cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094d0:	bfba      	itte	lt
 80094d2:	461c      	movlt	r4, r3
 80094d4:	2501      	movlt	r5, #1
 80094d6:	2500      	movge	r5, #0
 80094d8:	f7ff fd40 	bl	8008f5c <_Balloc>
 80094dc:	4602      	mov	r2, r0
 80094de:	b918      	cbnz	r0, 80094e8 <__mdiff+0x60>
 80094e0:	4b30      	ldr	r3, [pc, #192]	@ (80095a4 <__mdiff+0x11c>)
 80094e2:	f240 2145 	movw	r1, #581	@ 0x245
 80094e6:	e7e3      	b.n	80094b0 <__mdiff+0x28>
 80094e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80094ec:	6926      	ldr	r6, [r4, #16]
 80094ee:	60c5      	str	r5, [r0, #12]
 80094f0:	f109 0310 	add.w	r3, r9, #16
 80094f4:	f109 0514 	add.w	r5, r9, #20
 80094f8:	f104 0e14 	add.w	lr, r4, #20
 80094fc:	f100 0b14 	add.w	fp, r0, #20
 8009500:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009504:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	46d9      	mov	r9, fp
 800950c:	f04f 0c00 	mov.w	ip, #0
 8009510:	9b01      	ldr	r3, [sp, #4]
 8009512:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009516:	f853 af04 	ldr.w	sl, [r3, #4]!
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	b281      	uxth	r1, r0
 800951e:	fa1f f38a 	uxth.w	r3, sl
 8009522:	1a5b      	subs	r3, r3, r1
 8009524:	0c00      	lsrs	r0, r0, #16
 8009526:	4463      	add	r3, ip
 8009528:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800952c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009530:	b29b      	uxth	r3, r3
 8009532:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009536:	4576      	cmp	r6, lr
 8009538:	f849 3b04 	str.w	r3, [r9], #4
 800953c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009540:	d8e6      	bhi.n	8009510 <__mdiff+0x88>
 8009542:	1b33      	subs	r3, r6, r4
 8009544:	3b15      	subs	r3, #21
 8009546:	f023 0303 	bic.w	r3, r3, #3
 800954a:	3415      	adds	r4, #21
 800954c:	3304      	adds	r3, #4
 800954e:	42a6      	cmp	r6, r4
 8009550:	bf38      	it	cc
 8009552:	2304      	movcc	r3, #4
 8009554:	441d      	add	r5, r3
 8009556:	445b      	add	r3, fp
 8009558:	461e      	mov	r6, r3
 800955a:	462c      	mov	r4, r5
 800955c:	4544      	cmp	r4, r8
 800955e:	d30e      	bcc.n	800957e <__mdiff+0xf6>
 8009560:	f108 0103 	add.w	r1, r8, #3
 8009564:	1b49      	subs	r1, r1, r5
 8009566:	f021 0103 	bic.w	r1, r1, #3
 800956a:	3d03      	subs	r5, #3
 800956c:	45a8      	cmp	r8, r5
 800956e:	bf38      	it	cc
 8009570:	2100      	movcc	r1, #0
 8009572:	440b      	add	r3, r1
 8009574:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009578:	b191      	cbz	r1, 80095a0 <__mdiff+0x118>
 800957a:	6117      	str	r7, [r2, #16]
 800957c:	e79e      	b.n	80094bc <__mdiff+0x34>
 800957e:	f854 1b04 	ldr.w	r1, [r4], #4
 8009582:	46e6      	mov	lr, ip
 8009584:	0c08      	lsrs	r0, r1, #16
 8009586:	fa1c fc81 	uxtah	ip, ip, r1
 800958a:	4471      	add	r1, lr
 800958c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009590:	b289      	uxth	r1, r1
 8009592:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009596:	f846 1b04 	str.w	r1, [r6], #4
 800959a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800959e:	e7dd      	b.n	800955c <__mdiff+0xd4>
 80095a0:	3f01      	subs	r7, #1
 80095a2:	e7e7      	b.n	8009574 <__mdiff+0xec>
 80095a4:	0800bb24 	.word	0x0800bb24
 80095a8:	0800bb46 	.word	0x0800bb46

080095ac <__d2b>:
 80095ac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80095b0:	2101      	movs	r1, #1
 80095b2:	9e08      	ldr	r6, [sp, #32]
 80095b4:	4690      	mov	r8, r2
 80095b6:	4699      	mov	r9, r3
 80095b8:	f7ff fcd0 	bl	8008f5c <_Balloc>
 80095bc:	4604      	mov	r4, r0
 80095be:	b930      	cbnz	r0, 80095ce <__d2b+0x22>
 80095c0:	4602      	mov	r2, r0
 80095c2:	4b24      	ldr	r3, [pc, #144]	@ (8009654 <__d2b+0xa8>)
 80095c4:	4824      	ldr	r0, [pc, #144]	@ (8009658 <__d2b+0xac>)
 80095c6:	f240 310f 	movw	r1, #783	@ 0x30f
 80095ca:	f000 fb67 	bl	8009c9c <__assert_func>
 80095ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095d6:	b10d      	cbz	r5, 80095dc <__d2b+0x30>
 80095d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	f1b8 0300 	subs.w	r3, r8, #0
 80095e2:	d024      	beq.n	800962e <__d2b+0x82>
 80095e4:	4668      	mov	r0, sp
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	f7ff fd7f 	bl	80090ea <__lo0bits>
 80095ec:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095f0:	b1d8      	cbz	r0, 800962a <__d2b+0x7e>
 80095f2:	f1c0 0320 	rsb	r3, r0, #32
 80095f6:	fa02 f303 	lsl.w	r3, r2, r3
 80095fa:	430b      	orrs	r3, r1
 80095fc:	40c2      	lsrs	r2, r0
 80095fe:	6163      	str	r3, [r4, #20]
 8009600:	9201      	str	r2, [sp, #4]
 8009602:	9b01      	ldr	r3, [sp, #4]
 8009604:	61a3      	str	r3, [r4, #24]
 8009606:	2b00      	cmp	r3, #0
 8009608:	bf0c      	ite	eq
 800960a:	2201      	moveq	r2, #1
 800960c:	2202      	movne	r2, #2
 800960e:	6122      	str	r2, [r4, #16]
 8009610:	b1ad      	cbz	r5, 800963e <__d2b+0x92>
 8009612:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009616:	4405      	add	r5, r0
 8009618:	6035      	str	r5, [r6, #0]
 800961a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800961e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009620:	6018      	str	r0, [r3, #0]
 8009622:	4620      	mov	r0, r4
 8009624:	b002      	add	sp, #8
 8009626:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800962a:	6161      	str	r1, [r4, #20]
 800962c:	e7e9      	b.n	8009602 <__d2b+0x56>
 800962e:	a801      	add	r0, sp, #4
 8009630:	f7ff fd5b 	bl	80090ea <__lo0bits>
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	3020      	adds	r0, #32
 800963a:	2201      	movs	r2, #1
 800963c:	e7e7      	b.n	800960e <__d2b+0x62>
 800963e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009642:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009646:	6030      	str	r0, [r6, #0]
 8009648:	6918      	ldr	r0, [r3, #16]
 800964a:	f7ff fd2f 	bl	80090ac <__hi0bits>
 800964e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009652:	e7e4      	b.n	800961e <__d2b+0x72>
 8009654:	0800bb24 	.word	0x0800bb24
 8009658:	0800bb46 	.word	0x0800bb46

0800965c <_mprec_log10>:
 800965c:	2817      	cmp	r0, #23
 800965e:	b5d0      	push	{r4, r6, r7, lr}
 8009660:	4604      	mov	r4, r0
 8009662:	dc05      	bgt.n	8009670 <_mprec_log10+0x14>
 8009664:	4b08      	ldr	r3, [pc, #32]	@ (8009688 <_mprec_log10+0x2c>)
 8009666:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800966a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800966e:	bdd0      	pop	{r4, r6, r7, pc}
 8009670:	4906      	ldr	r1, [pc, #24]	@ (800968c <_mprec_log10+0x30>)
 8009672:	4f07      	ldr	r7, [pc, #28]	@ (8009690 <_mprec_log10+0x34>)
 8009674:	2000      	movs	r0, #0
 8009676:	2600      	movs	r6, #0
 8009678:	4632      	mov	r2, r6
 800967a:	463b      	mov	r3, r7
 800967c:	f7f6 ffcc 	bl	8000618 <__aeabi_dmul>
 8009680:	3c01      	subs	r4, #1
 8009682:	d1f9      	bne.n	8009678 <_mprec_log10+0x1c>
 8009684:	e7f3      	b.n	800966e <_mprec_log10+0x12>
 8009686:	bf00      	nop
 8009688:	0800bbd8 	.word	0x0800bbd8
 800968c:	3ff00000 	.word	0x3ff00000
 8009690:	40240000 	.word	0x40240000

08009694 <__sread>:
 8009694:	b510      	push	{r4, lr}
 8009696:	460c      	mov	r4, r1
 8009698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969c:	f000 f978 	bl	8009990 <_read_r>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	bfab      	itete	ge
 80096a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096a6:	89a3      	ldrhlt	r3, [r4, #12]
 80096a8:	181b      	addge	r3, r3, r0
 80096aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096ae:	bfac      	ite	ge
 80096b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096b2:	81a3      	strhlt	r3, [r4, #12]
 80096b4:	bd10      	pop	{r4, pc}

080096b6 <__swrite>:
 80096b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ba:	461f      	mov	r7, r3
 80096bc:	898b      	ldrh	r3, [r1, #12]
 80096be:	05db      	lsls	r3, r3, #23
 80096c0:	4605      	mov	r5, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	4616      	mov	r6, r2
 80096c6:	d505      	bpl.n	80096d4 <__swrite+0x1e>
 80096c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096cc:	2302      	movs	r3, #2
 80096ce:	2200      	movs	r2, #0
 80096d0:	f000 f94c 	bl	800996c <_lseek_r>
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	4632      	mov	r2, r6
 80096e2:	463b      	mov	r3, r7
 80096e4:	4628      	mov	r0, r5
 80096e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ea:	f000 b973 	b.w	80099d4 <_write_r>

080096ee <__sseek>:
 80096ee:	b510      	push	{r4, lr}
 80096f0:	460c      	mov	r4, r1
 80096f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f6:	f000 f939 	bl	800996c <_lseek_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	bf15      	itete	ne
 8009700:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800970a:	81a3      	strheq	r3, [r4, #12]
 800970c:	bf18      	it	ne
 800970e:	81a3      	strhne	r3, [r4, #12]
 8009710:	bd10      	pop	{r4, pc}

08009712 <__sclose>:
 8009712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009716:	f000 b8f7 	b.w	8009908 <_close_r>

0800971a <__swbuf_r>:
 800971a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971c:	460e      	mov	r6, r1
 800971e:	4614      	mov	r4, r2
 8009720:	4605      	mov	r5, r0
 8009722:	b118      	cbz	r0, 800972c <__swbuf_r+0x12>
 8009724:	6a03      	ldr	r3, [r0, #32]
 8009726:	b90b      	cbnz	r3, 800972c <__swbuf_r+0x12>
 8009728:	f7fe fa94 	bl	8007c54 <__sinit>
 800972c:	69a3      	ldr	r3, [r4, #24]
 800972e:	60a3      	str	r3, [r4, #8]
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	071a      	lsls	r2, r3, #28
 8009734:	d501      	bpl.n	800973a <__swbuf_r+0x20>
 8009736:	6923      	ldr	r3, [r4, #16]
 8009738:	b943      	cbnz	r3, 800974c <__swbuf_r+0x32>
 800973a:	4621      	mov	r1, r4
 800973c:	4628      	mov	r0, r5
 800973e:	f000 f82b 	bl	8009798 <__swsetup_r>
 8009742:	b118      	cbz	r0, 800974c <__swbuf_r+0x32>
 8009744:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009748:	4638      	mov	r0, r7
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	6922      	ldr	r2, [r4, #16]
 8009750:	1a98      	subs	r0, r3, r2
 8009752:	6963      	ldr	r3, [r4, #20]
 8009754:	b2f6      	uxtb	r6, r6
 8009756:	4283      	cmp	r3, r0
 8009758:	4637      	mov	r7, r6
 800975a:	dc05      	bgt.n	8009768 <__swbuf_r+0x4e>
 800975c:	4621      	mov	r1, r4
 800975e:	4628      	mov	r0, r5
 8009760:	f7ff fbc8 	bl	8008ef4 <_fflush_r>
 8009764:	2800      	cmp	r0, #0
 8009766:	d1ed      	bne.n	8009744 <__swbuf_r+0x2a>
 8009768:	68a3      	ldr	r3, [r4, #8]
 800976a:	3b01      	subs	r3, #1
 800976c:	60a3      	str	r3, [r4, #8]
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	6022      	str	r2, [r4, #0]
 8009774:	701e      	strb	r6, [r3, #0]
 8009776:	6962      	ldr	r2, [r4, #20]
 8009778:	1c43      	adds	r3, r0, #1
 800977a:	429a      	cmp	r2, r3
 800977c:	d004      	beq.n	8009788 <__swbuf_r+0x6e>
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	07db      	lsls	r3, r3, #31
 8009782:	d5e1      	bpl.n	8009748 <__swbuf_r+0x2e>
 8009784:	2e0a      	cmp	r6, #10
 8009786:	d1df      	bne.n	8009748 <__swbuf_r+0x2e>
 8009788:	4621      	mov	r1, r4
 800978a:	4628      	mov	r0, r5
 800978c:	f7ff fbb2 	bl	8008ef4 <_fflush_r>
 8009790:	2800      	cmp	r0, #0
 8009792:	d0d9      	beq.n	8009748 <__swbuf_r+0x2e>
 8009794:	e7d6      	b.n	8009744 <__swbuf_r+0x2a>
	...

08009798 <__swsetup_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4b29      	ldr	r3, [pc, #164]	@ (8009840 <__swsetup_r+0xa8>)
 800979c:	4605      	mov	r5, r0
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	460c      	mov	r4, r1
 80097a2:	b118      	cbz	r0, 80097ac <__swsetup_r+0x14>
 80097a4:	6a03      	ldr	r3, [r0, #32]
 80097a6:	b90b      	cbnz	r3, 80097ac <__swsetup_r+0x14>
 80097a8:	f7fe fa54 	bl	8007c54 <__sinit>
 80097ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b0:	0719      	lsls	r1, r3, #28
 80097b2:	d422      	bmi.n	80097fa <__swsetup_r+0x62>
 80097b4:	06da      	lsls	r2, r3, #27
 80097b6:	d407      	bmi.n	80097c8 <__swsetup_r+0x30>
 80097b8:	2209      	movs	r2, #9
 80097ba:	602a      	str	r2, [r5, #0]
 80097bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097c0:	81a3      	strh	r3, [r4, #12]
 80097c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097c6:	e033      	b.n	8009830 <__swsetup_r+0x98>
 80097c8:	0758      	lsls	r0, r3, #29
 80097ca:	d512      	bpl.n	80097f2 <__swsetup_r+0x5a>
 80097cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097ce:	b141      	cbz	r1, 80097e2 <__swsetup_r+0x4a>
 80097d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097d4:	4299      	cmp	r1, r3
 80097d6:	d002      	beq.n	80097de <__swsetup_r+0x46>
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 fa91 	bl	8009d00 <_free_r>
 80097de:	2300      	movs	r3, #0
 80097e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	2300      	movs	r3, #0
 80097ec:	6063      	str	r3, [r4, #4]
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f043 0308 	orr.w	r3, r3, #8
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	6923      	ldr	r3, [r4, #16]
 80097fc:	b94b      	cbnz	r3, 8009812 <__swsetup_r+0x7a>
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009808:	d003      	beq.n	8009812 <__swsetup_r+0x7a>
 800980a:	4621      	mov	r1, r4
 800980c:	4628      	mov	r0, r5
 800980e:	f000 f83f 	bl	8009890 <__smakebuf_r>
 8009812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009816:	f013 0201 	ands.w	r2, r3, #1
 800981a:	d00a      	beq.n	8009832 <__swsetup_r+0x9a>
 800981c:	2200      	movs	r2, #0
 800981e:	60a2      	str	r2, [r4, #8]
 8009820:	6962      	ldr	r2, [r4, #20]
 8009822:	4252      	negs	r2, r2
 8009824:	61a2      	str	r2, [r4, #24]
 8009826:	6922      	ldr	r2, [r4, #16]
 8009828:	b942      	cbnz	r2, 800983c <__swsetup_r+0xa4>
 800982a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800982e:	d1c5      	bne.n	80097bc <__swsetup_r+0x24>
 8009830:	bd38      	pop	{r3, r4, r5, pc}
 8009832:	0799      	lsls	r1, r3, #30
 8009834:	bf58      	it	pl
 8009836:	6962      	ldrpl	r2, [r4, #20]
 8009838:	60a2      	str	r2, [r4, #8]
 800983a:	e7f4      	b.n	8009826 <__swsetup_r+0x8e>
 800983c:	2000      	movs	r0, #0
 800983e:	e7f7      	b.n	8009830 <__swsetup_r+0x98>
 8009840:	20000030 	.word	0x20000030

08009844 <__swhatbuf_r>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	460c      	mov	r4, r1
 8009848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984c:	2900      	cmp	r1, #0
 800984e:	b096      	sub	sp, #88	@ 0x58
 8009850:	4615      	mov	r5, r2
 8009852:	461e      	mov	r6, r3
 8009854:	da0d      	bge.n	8009872 <__swhatbuf_r+0x2e>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800985c:	f04f 0100 	mov.w	r1, #0
 8009860:	bf14      	ite	ne
 8009862:	2340      	movne	r3, #64	@ 0x40
 8009864:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009868:	2000      	movs	r0, #0
 800986a:	6031      	str	r1, [r6, #0]
 800986c:	602b      	str	r3, [r5, #0]
 800986e:	b016      	add	sp, #88	@ 0x58
 8009870:	bd70      	pop	{r4, r5, r6, pc}
 8009872:	466a      	mov	r2, sp
 8009874:	f000 f858 	bl	8009928 <_fstat_r>
 8009878:	2800      	cmp	r0, #0
 800987a:	dbec      	blt.n	8009856 <__swhatbuf_r+0x12>
 800987c:	9901      	ldr	r1, [sp, #4]
 800987e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009882:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009886:	4259      	negs	r1, r3
 8009888:	4159      	adcs	r1, r3
 800988a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800988e:	e7eb      	b.n	8009868 <__swhatbuf_r+0x24>

08009890 <__smakebuf_r>:
 8009890:	898b      	ldrh	r3, [r1, #12]
 8009892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009894:	079d      	lsls	r5, r3, #30
 8009896:	4606      	mov	r6, r0
 8009898:	460c      	mov	r4, r1
 800989a:	d507      	bpl.n	80098ac <__smakebuf_r+0x1c>
 800989c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	6123      	str	r3, [r4, #16]
 80098a4:	2301      	movs	r3, #1
 80098a6:	6163      	str	r3, [r4, #20]
 80098a8:	b003      	add	sp, #12
 80098aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ac:	ab01      	add	r3, sp, #4
 80098ae:	466a      	mov	r2, sp
 80098b0:	f7ff ffc8 	bl	8009844 <__swhatbuf_r>
 80098b4:	9f00      	ldr	r7, [sp, #0]
 80098b6:	4605      	mov	r5, r0
 80098b8:	4639      	mov	r1, r7
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7ff fa1a 	bl	8008cf4 <_malloc_r>
 80098c0:	b948      	cbnz	r0, 80098d6 <__smakebuf_r+0x46>
 80098c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c6:	059a      	lsls	r2, r3, #22
 80098c8:	d4ee      	bmi.n	80098a8 <__smakebuf_r+0x18>
 80098ca:	f023 0303 	bic.w	r3, r3, #3
 80098ce:	f043 0302 	orr.w	r3, r3, #2
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	e7e2      	b.n	800989c <__smakebuf_r+0xc>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	6020      	str	r0, [r4, #0]
 80098da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098e6:	b15b      	cbz	r3, 8009900 <__smakebuf_r+0x70>
 80098e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ec:	4630      	mov	r0, r6
 80098ee:	f000 f82d 	bl	800994c <_isatty_r>
 80098f2:	b128      	cbz	r0, 8009900 <__smakebuf_r+0x70>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	f023 0303 	bic.w	r3, r3, #3
 80098fa:	f043 0301 	orr.w	r3, r3, #1
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	431d      	orrs	r5, r3
 8009904:	81a5      	strh	r5, [r4, #12]
 8009906:	e7cf      	b.n	80098a8 <__smakebuf_r+0x18>

08009908 <_close_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d06      	ldr	r5, [pc, #24]	@ (8009924 <_close_r+0x1c>)
 800990c:	2300      	movs	r3, #0
 800990e:	4604      	mov	r4, r0
 8009910:	4608      	mov	r0, r1
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	f7fd fc4a 	bl	80071ac <_close>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d102      	bne.n	8009922 <_close_r+0x1a>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	b103      	cbz	r3, 8009922 <_close_r+0x1a>
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	20025e34 	.word	0x20025e34

08009928 <_fstat_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d07      	ldr	r5, [pc, #28]	@ (8009948 <_fstat_r+0x20>)
 800992c:	2300      	movs	r3, #0
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	f7fd fc7e 	bl	8007236 <_fstat>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d102      	bne.n	8009944 <_fstat_r+0x1c>
 800993e:	682b      	ldr	r3, [r5, #0]
 8009940:	b103      	cbz	r3, 8009944 <_fstat_r+0x1c>
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	bd38      	pop	{r3, r4, r5, pc}
 8009946:	bf00      	nop
 8009948:	20025e34 	.word	0x20025e34

0800994c <_isatty_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d06      	ldr	r5, [pc, #24]	@ (8009968 <_isatty_r+0x1c>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	f7fd fc7b 	bl	8007252 <_isatty>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_isatty_r+0x1a>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_isatty_r+0x1a>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	20025e34 	.word	0x20025e34

0800996c <_lseek_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d07      	ldr	r5, [pc, #28]	@ (800998c <_lseek_r+0x20>)
 8009970:	4604      	mov	r4, r0
 8009972:	4608      	mov	r0, r1
 8009974:	4611      	mov	r1, r2
 8009976:	2200      	movs	r2, #0
 8009978:	602a      	str	r2, [r5, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	f7fd fbd7 	bl	800712e <_lseek>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_lseek_r+0x1e>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_lseek_r+0x1e>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	20025e34 	.word	0x20025e34

08009990 <_read_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	@ (80099b0 <_read_r+0x20>)
 8009994:	4604      	mov	r4, r0
 8009996:	4608      	mov	r0, r1
 8009998:	4611      	mov	r1, r2
 800999a:	2200      	movs	r2, #0
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f7fd fb6f 	bl	8007082 <_read>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_read_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_read_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	20025e34 	.word	0x20025e34

080099b4 <_sbrk_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4d06      	ldr	r5, [pc, #24]	@ (80099d0 <_sbrk_r+0x1c>)
 80099b8:	2300      	movs	r3, #0
 80099ba:	4604      	mov	r4, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	f7f9 fe6c 	bl	800369c <_sbrk>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_sbrk_r+0x1a>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_sbrk_r+0x1a>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20025e34 	.word	0x20025e34

080099d4 <_write_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	@ (80099f4 <_write_r+0x20>)
 80099d8:	4604      	mov	r4, r0
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7fd fbb5 	bl	8007152 <_write>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_write_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_write_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20025e34 	.word	0x20025e34

080099f8 <print_e>:
 80099f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fa:	b08b      	sub	sp, #44	@ 0x2c
 80099fc:	460d      	mov	r5, r1
 80099fe:	a908      	add	r1, sp, #32
 8009a00:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009a02:	9104      	str	r1, [sp, #16]
 8009a04:	a907      	add	r1, sp, #28
 8009a06:	9103      	str	r1, [sp, #12]
 8009a08:	a909      	add	r1, sp, #36	@ 0x24
 8009a0a:	9102      	str	r1, [sp, #8]
 8009a0c:	1c71      	adds	r1, r6, #1
 8009a0e:	9101      	str	r1, [sp, #4]
 8009a10:	2102      	movs	r1, #2
 8009a12:	9100      	str	r1, [sp, #0]
 8009a14:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 8009a18:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8009a1a:	f7fe fa39 	bl	8007e90 <_dtoa_r>
 8009a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a20:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a24:	429a      	cmp	r2, r3
 8009a26:	4601      	mov	r1, r0
 8009a28:	d104      	bne.n	8009a34 <print_e+0x3c>
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f000 f92e 	bl	8009c8c <strcpy>
 8009a30:	b00b      	add	sp, #44	@ 0x2c
 8009a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a34:	462b      	mov	r3, r5
 8009a36:	7800      	ldrb	r0, [r0, #0]
 8009a38:	f803 0b01 	strb.w	r0, [r3], #1
 8009a3c:	2e00      	cmp	r6, #0
 8009a3e:	bfc8      	it	gt
 8009a40:	2401      	movgt	r4, #1
 8009a42:	202e      	movs	r0, #46	@ 0x2e
 8009a44:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009a48:	b10d      	cbz	r5, 8009a4e <print_e+0x56>
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	dc29      	bgt.n	8009aa2 <print_e+0xaa>
 8009a4e:	2f67      	cmp	r7, #103	@ 0x67
 8009a50:	d038      	beq.n	8009ac4 <print_e+0xcc>
 8009a52:	2f47      	cmp	r7, #71	@ 0x47
 8009a54:	d038      	beq.n	8009ac8 <print_e+0xd0>
 8009a56:	212e      	movs	r1, #46	@ 0x2e
 8009a58:	2030      	movs	r0, #48	@ 0x30
 8009a5a:	2e00      	cmp	r6, #0
 8009a5c:	dc2a      	bgt.n	8009ab4 <print_e+0xbc>
 8009a5e:	1e51      	subs	r1, r2, #1
 8009a60:	2900      	cmp	r1, #0
 8009a62:	bfb8      	it	lt
 8009a64:	f1c2 0201 	rsblt	r2, r2, #1
 8009a68:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a6a:	bfaa      	itet	ge
 8009a6c:	222b      	movge	r2, #43	@ 0x2b
 8009a6e:	9209      	strlt	r2, [sp, #36]	@ 0x24
 8009a70:	705a      	strbge	r2, [r3, #1]
 8009a72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a74:	701f      	strb	r7, [r3, #0]
 8009a76:	bfbc      	itt	lt
 8009a78:	212d      	movlt	r1, #45	@ 0x2d
 8009a7a:	7059      	strblt	r1, [r3, #1]
 8009a7c:	2a63      	cmp	r2, #99	@ 0x63
 8009a7e:	dc25      	bgt.n	8009acc <print_e+0xd4>
 8009a80:	1c98      	adds	r0, r3, #2
 8009a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a84:	220a      	movs	r2, #10
 8009a86:	fb93 f2f2 	sdiv	r2, r3, r2
 8009a8a:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 8009a8e:	7001      	strb	r1, [r0, #0]
 8009a90:	f06f 0109 	mvn.w	r1, #9
 8009a94:	fb01 3302 	mla	r3, r1, r2, r3
 8009a98:	3330      	adds	r3, #48	@ 0x30
 8009a9a:	7043      	strb	r3, [r0, #1]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	7083      	strb	r3, [r0, #2]
 8009aa0:	e7c6      	b.n	8009a30 <print_e+0x38>
 8009aa2:	b10c      	cbz	r4, 8009aa8 <print_e+0xb0>
 8009aa4:	f803 0b01 	strb.w	r0, [r3], #1
 8009aa8:	780c      	ldrb	r4, [r1, #0]
 8009aaa:	f803 4b01 	strb.w	r4, [r3], #1
 8009aae:	3e01      	subs	r6, #1
 8009ab0:	2400      	movs	r4, #0
 8009ab2:	e7c7      	b.n	8009a44 <print_e+0x4c>
 8009ab4:	b10c      	cbz	r4, 8009aba <print_e+0xc2>
 8009ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8009aba:	f803 0b01 	strb.w	r0, [r3], #1
 8009abe:	3e01      	subs	r6, #1
 8009ac0:	2400      	movs	r4, #0
 8009ac2:	e7ca      	b.n	8009a5a <print_e+0x62>
 8009ac4:	2765      	movs	r7, #101	@ 0x65
 8009ac6:	e7ca      	b.n	8009a5e <print_e+0x66>
 8009ac8:	2745      	movs	r7, #69	@ 0x45
 8009aca:	e7c8      	b.n	8009a5e <print_e+0x66>
 8009acc:	2164      	movs	r1, #100	@ 0x64
 8009ace:	fb92 f1f1 	sdiv	r1, r2, r1
 8009ad2:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 8009ad6:	1cd8      	adds	r0, r3, #3
 8009ad8:	709c      	strb	r4, [r3, #2]
 8009ada:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8009ade:	fb03 2201 	mla	r2, r3, r1, r2
 8009ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ae4:	e7cd      	b.n	8009a82 <print_e+0x8a>
	...

08009ae8 <_gcvt>:
 8009ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aec:	4690      	mov	r8, r2
 8009aee:	b08b      	sub	sp, #44	@ 0x2c
 8009af0:	4699      	mov	r9, r3
 8009af2:	4607      	mov	r7, r0
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	4640      	mov	r0, r8
 8009afa:	4649      	mov	r1, r9
 8009afc:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	@ 0x48
 8009b00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009b02:	f7f6 fffb 	bl	8000afc <__aeabi_dcmplt>
 8009b06:	b110      	cbz	r0, 8009b0e <_gcvt+0x26>
 8009b08:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009b0c:	4699      	mov	r9, r3
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2300      	movs	r3, #0
 8009b12:	4640      	mov	r0, r8
 8009b14:	4649      	mov	r1, r9
 8009b16:	f7f6 ffe7 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b1a:	b138      	cbz	r0, 8009b2c <_gcvt+0x44>
 8009b1c:	2330      	movs	r3, #48	@ 0x30
 8009b1e:	702b      	strb	r3, [r5, #0]
 8009b20:	2300      	movs	r3, #0
 8009b22:	706b      	strb	r3, [r5, #1]
 8009b24:	4628      	mov	r0, r5
 8009b26:	b00b      	add	sp, #44	@ 0x2c
 8009b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b2c:	a34e      	add	r3, pc, #312	@ (adr r3, 8009c68 <_gcvt+0x180>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f6 ffeb 	bl	8000b10 <__aeabi_dcmple>
 8009b3a:	b160      	cbz	r0, 8009b56 <_gcvt+0x6e>
 8009b3c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	3c01      	subs	r4, #1
 8009b44:	9602      	str	r6, [sp, #8]
 8009b46:	9400      	str	r4, [sp, #0]
 8009b48:	4642      	mov	r2, r8
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f7ff ff52 	bl	80099f8 <print_e>
 8009b54:	e7e6      	b.n	8009b24 <_gcvt+0x3c>
 8009b56:	4620      	mov	r0, r4
 8009b58:	f7ff fd80 	bl	800965c <_mprec_log10>
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	464b      	mov	r3, r9
 8009b60:	f7f6 ffd6 	bl	8000b10 <__aeabi_dcmple>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d1e9      	bne.n	8009b3c <_gcvt+0x54>
 8009b68:	ab09      	add	r3, sp, #36	@ 0x24
 8009b6a:	9304      	str	r3, [sp, #16]
 8009b6c:	ab08      	add	r3, sp, #32
 8009b6e:	9303      	str	r3, [sp, #12]
 8009b70:	ab07      	add	r3, sp, #28
 8009b72:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8009b76:	2302      	movs	r3, #2
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	4642      	mov	r2, r8
 8009b7c:	464b      	mov	r3, r9
 8009b7e:	4638      	mov	r0, r7
 8009b80:	f7fe f986 	bl	8007e90 <_dtoa_r>
 8009b84:	9a07      	ldr	r2, [sp, #28]
 8009b86:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	4601      	mov	r1, r0
 8009b8e:	d00d      	beq.n	8009bac <_gcvt+0xc4>
 8009b90:	462b      	mov	r3, r5
 8009b92:	460f      	mov	r7, r1
 8009b94:	f811 0b01 	ldrb.w	r0, [r1], #1
 8009b98:	9a07      	ldr	r2, [sp, #28]
 8009b9a:	b108      	cbz	r0, 8009ba0 <_gcvt+0xb8>
 8009b9c:	2a00      	cmp	r2, #0
 8009b9e:	dc09      	bgt.n	8009bb4 <_gcvt+0xcc>
 8009ba0:	1928      	adds	r0, r5, r4
 8009ba2:	1ac0      	subs	r0, r0, r3
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8009baa:	e00c      	b.n	8009bc6 <_gcvt+0xde>
 8009bac:	4628      	mov	r0, r5
 8009bae:	f000 f86d 	bl	8009c8c <strcpy>
 8009bb2:	e7b7      	b.n	8009b24 <_gcvt+0x3c>
 8009bb4:	3a01      	subs	r2, #1
 8009bb6:	f803 0b01 	strb.w	r0, [r3], #1
 8009bba:	9207      	str	r2, [sp, #28]
 8009bbc:	e7e9      	b.n	8009b92 <_gcvt+0xaa>
 8009bbe:	f803 cb01 	strb.w	ip, [r3], #1
 8009bc2:	3801      	subs	r0, #1
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	2a00      	cmp	r2, #0
 8009bc8:	4614      	mov	r4, r2
 8009bca:	dc2e      	bgt.n	8009c2a <_gcvt+0x142>
 8009bcc:	b101      	cbz	r1, 8009bd0 <_gcvt+0xe8>
 8009bce:	9207      	str	r2, [sp, #28]
 8009bd0:	b90e      	cbnz	r6, 8009bd6 <_gcvt+0xee>
 8009bd2:	783a      	ldrb	r2, [r7, #0]
 8009bd4:	b332      	cbz	r2, 8009c24 <_gcvt+0x13c>
 8009bd6:	42ab      	cmp	r3, r5
 8009bd8:	bf04      	itt	eq
 8009bda:	2230      	moveq	r2, #48	@ 0x30
 8009bdc:	f803 2b01 	strbeq.w	r2, [r3], #1
 8009be0:	222e      	movs	r2, #46	@ 0x2e
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	9a07      	ldr	r2, [sp, #28]
 8009be6:	4619      	mov	r1, r3
 8009be8:	f04f 0c00 	mov.w	ip, #0
 8009bec:	1ad4      	subs	r4, r2, r3
 8009bee:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 8009bf2:	42cc      	cmn	r4, r1
 8009bf4:	d421      	bmi.n	8009c3a <_gcvt+0x152>
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	f1c2 0100 	rsb	r1, r2, #0
 8009bfc:	bfd4      	ite	le
 8009bfe:	460c      	movle	r4, r1
 8009c00:	2400      	movgt	r4, #0
 8009c02:	3401      	adds	r4, #1
 8009c04:	4423      	add	r3, r4
 8009c06:	f1bc 0f00 	cmp.w	ip, #0
 8009c0a:	d004      	beq.n	8009c16 <_gcvt+0x12e>
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	bfc8      	it	gt
 8009c10:	2100      	movgt	r1, #0
 8009c12:	440a      	add	r2, r1
 8009c14:	9207      	str	r2, [sp, #28]
 8009c16:	1e7a      	subs	r2, r7, #1
 8009c18:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009c1c:	b109      	cbz	r1, 8009c22 <_gcvt+0x13a>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	dc10      	bgt.n	8009c44 <_gcvt+0x15c>
 8009c22:	b9e6      	cbnz	r6, 8009c5e <_gcvt+0x176>
 8009c24:	2200      	movs	r2, #0
 8009c26:	701a      	strb	r2, [r3, #0]
 8009c28:	e77c      	b.n	8009b24 <_gcvt+0x3c>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 8009c30:	dcc5      	bgt.n	8009bbe <_gcvt+0xd6>
 8009c32:	2900      	cmp	r1, #0
 8009c34:	d0cc      	beq.n	8009bd0 <_gcvt+0xe8>
 8009c36:	9407      	str	r4, [sp, #28]
 8009c38:	e7ca      	b.n	8009bd0 <_gcvt+0xe8>
 8009c3a:	f801 ef01 	strb.w	lr, [r1, #1]!
 8009c3e:	f04f 0c01 	mov.w	ip, #1
 8009c42:	e7d6      	b.n	8009bf2 <_gcvt+0x10a>
 8009c44:	f803 1b01 	strb.w	r1, [r3], #1
 8009c48:	3801      	subs	r0, #1
 8009c4a:	e7e5      	b.n	8009c18 <_gcvt+0x130>
 8009c4c:	f802 6b01 	strb.w	r6, [r2], #1
 8009c50:	1aa1      	subs	r1, r4, r2
 8009c52:	2900      	cmp	r1, #0
 8009c54:	dcfa      	bgt.n	8009c4c <_gcvt+0x164>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	bfa8      	it	ge
 8009c5a:	181b      	addge	r3, r3, r0
 8009c5c:	e7e2      	b.n	8009c24 <_gcvt+0x13c>
 8009c5e:	461a      	mov	r2, r3
 8009c60:	181c      	adds	r4, r3, r0
 8009c62:	2630      	movs	r6, #48	@ 0x30
 8009c64:	e7f4      	b.n	8009c50 <_gcvt+0x168>
 8009c66:	bf00      	nop
 8009c68:	eb1c432d 	.word	0xeb1c432d
 8009c6c:	3f1a36e2 	.word	0x3f1a36e2

08009c70 <memcpy>:
 8009c70:	440a      	add	r2, r1
 8009c72:	4291      	cmp	r1, r2
 8009c74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009c78:	d100      	bne.n	8009c7c <memcpy+0xc>
 8009c7a:	4770      	bx	lr
 8009c7c:	b510      	push	{r4, lr}
 8009c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c86:	4291      	cmp	r1, r2
 8009c88:	d1f9      	bne.n	8009c7e <memcpy+0xe>
 8009c8a:	bd10      	pop	{r4, pc}

08009c8c <strcpy>:
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c92:	f803 2b01 	strb.w	r2, [r3], #1
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	d1f9      	bne.n	8009c8e <strcpy+0x2>
 8009c9a:	4770      	bx	lr

08009c9c <__assert_func>:
 8009c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4b09      	ldr	r3, [pc, #36]	@ (8009cc8 <__assert_func+0x2c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	68d8      	ldr	r0, [r3, #12]
 8009caa:	b954      	cbnz	r4, 8009cc2 <__assert_func+0x26>
 8009cac:	4b07      	ldr	r3, [pc, #28]	@ (8009ccc <__assert_func+0x30>)
 8009cae:	461c      	mov	r4, r3
 8009cb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cb4:	9100      	str	r1, [sp, #0]
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	4905      	ldr	r1, [pc, #20]	@ (8009cd0 <__assert_func+0x34>)
 8009cba:	f000 f87d 	bl	8009db8 <fiprintf>
 8009cbe:	f000 f89a 	bl	8009df6 <abort>
 8009cc2:	4b04      	ldr	r3, [pc, #16]	@ (8009cd4 <__assert_func+0x38>)
 8009cc4:	e7f4      	b.n	8009cb0 <__assert_func+0x14>
 8009cc6:	bf00      	nop
 8009cc8:	20000030 	.word	0x20000030
 8009ccc:	0800bde6 	.word	0x0800bde6
 8009cd0:	0800bdb8 	.word	0x0800bdb8
 8009cd4:	0800bdab 	.word	0x0800bdab

08009cd8 <_calloc_r>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	fba1 5402 	umull	r5, r4, r1, r2
 8009cde:	b93c      	cbnz	r4, 8009cf0 <_calloc_r+0x18>
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7ff f807 	bl	8008cf4 <_malloc_r>
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	b928      	cbnz	r0, 8009cf6 <_calloc_r+0x1e>
 8009cea:	2600      	movs	r6, #0
 8009cec:	4630      	mov	r0, r6
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	220c      	movs	r2, #12
 8009cf2:	6002      	str	r2, [r0, #0]
 8009cf4:	e7f9      	b.n	8009cea <_calloc_r+0x12>
 8009cf6:	462a      	mov	r2, r5
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	f7fd ffe1 	bl	8007cc0 <memset>
 8009cfe:	e7f5      	b.n	8009cec <_calloc_r+0x14>

08009d00 <_free_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4605      	mov	r5, r0
 8009d04:	2900      	cmp	r1, #0
 8009d06:	d041      	beq.n	8009d8c <_free_r+0x8c>
 8009d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d0c:	1f0c      	subs	r4, r1, #4
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	bfb8      	it	lt
 8009d12:	18e4      	addlt	r4, r4, r3
 8009d14:	f7ff f916 	bl	8008f44 <__malloc_lock>
 8009d18:	4a1d      	ldr	r2, [pc, #116]	@ (8009d90 <_free_r+0x90>)
 8009d1a:	6813      	ldr	r3, [r2, #0]
 8009d1c:	b933      	cbnz	r3, 8009d2c <_free_r+0x2c>
 8009d1e:	6063      	str	r3, [r4, #4]
 8009d20:	6014      	str	r4, [r2, #0]
 8009d22:	4628      	mov	r0, r5
 8009d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d28:	f7ff b912 	b.w	8008f50 <__malloc_unlock>
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	d908      	bls.n	8009d42 <_free_r+0x42>
 8009d30:	6820      	ldr	r0, [r4, #0]
 8009d32:	1821      	adds	r1, r4, r0
 8009d34:	428b      	cmp	r3, r1
 8009d36:	bf01      	itttt	eq
 8009d38:	6819      	ldreq	r1, [r3, #0]
 8009d3a:	685b      	ldreq	r3, [r3, #4]
 8009d3c:	1809      	addeq	r1, r1, r0
 8009d3e:	6021      	streq	r1, [r4, #0]
 8009d40:	e7ed      	b.n	8009d1e <_free_r+0x1e>
 8009d42:	461a      	mov	r2, r3
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	b10b      	cbz	r3, 8009d4c <_free_r+0x4c>
 8009d48:	42a3      	cmp	r3, r4
 8009d4a:	d9fa      	bls.n	8009d42 <_free_r+0x42>
 8009d4c:	6811      	ldr	r1, [r2, #0]
 8009d4e:	1850      	adds	r0, r2, r1
 8009d50:	42a0      	cmp	r0, r4
 8009d52:	d10b      	bne.n	8009d6c <_free_r+0x6c>
 8009d54:	6820      	ldr	r0, [r4, #0]
 8009d56:	4401      	add	r1, r0
 8009d58:	1850      	adds	r0, r2, r1
 8009d5a:	4283      	cmp	r3, r0
 8009d5c:	6011      	str	r1, [r2, #0]
 8009d5e:	d1e0      	bne.n	8009d22 <_free_r+0x22>
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	6053      	str	r3, [r2, #4]
 8009d66:	4408      	add	r0, r1
 8009d68:	6010      	str	r0, [r2, #0]
 8009d6a:	e7da      	b.n	8009d22 <_free_r+0x22>
 8009d6c:	d902      	bls.n	8009d74 <_free_r+0x74>
 8009d6e:	230c      	movs	r3, #12
 8009d70:	602b      	str	r3, [r5, #0]
 8009d72:	e7d6      	b.n	8009d22 <_free_r+0x22>
 8009d74:	6820      	ldr	r0, [r4, #0]
 8009d76:	1821      	adds	r1, r4, r0
 8009d78:	428b      	cmp	r3, r1
 8009d7a:	bf04      	itt	eq
 8009d7c:	6819      	ldreq	r1, [r3, #0]
 8009d7e:	685b      	ldreq	r3, [r3, #4]
 8009d80:	6063      	str	r3, [r4, #4]
 8009d82:	bf04      	itt	eq
 8009d84:	1809      	addeq	r1, r1, r0
 8009d86:	6021      	streq	r1, [r4, #0]
 8009d88:	6054      	str	r4, [r2, #4]
 8009d8a:	e7ca      	b.n	8009d22 <_free_r+0x22>
 8009d8c:	bd38      	pop	{r3, r4, r5, pc}
 8009d8e:	bf00      	nop
 8009d90:	20025e30 	.word	0x20025e30

08009d94 <__ascii_mbtowc>:
 8009d94:	b082      	sub	sp, #8
 8009d96:	b901      	cbnz	r1, 8009d9a <__ascii_mbtowc+0x6>
 8009d98:	a901      	add	r1, sp, #4
 8009d9a:	b142      	cbz	r2, 8009dae <__ascii_mbtowc+0x1a>
 8009d9c:	b14b      	cbz	r3, 8009db2 <__ascii_mbtowc+0x1e>
 8009d9e:	7813      	ldrb	r3, [r2, #0]
 8009da0:	600b      	str	r3, [r1, #0]
 8009da2:	7812      	ldrb	r2, [r2, #0]
 8009da4:	1e10      	subs	r0, r2, #0
 8009da6:	bf18      	it	ne
 8009da8:	2001      	movne	r0, #1
 8009daa:	b002      	add	sp, #8
 8009dac:	4770      	bx	lr
 8009dae:	4610      	mov	r0, r2
 8009db0:	e7fb      	b.n	8009daa <__ascii_mbtowc+0x16>
 8009db2:	f06f 0001 	mvn.w	r0, #1
 8009db6:	e7f8      	b.n	8009daa <__ascii_mbtowc+0x16>

08009db8 <fiprintf>:
 8009db8:	b40e      	push	{r1, r2, r3}
 8009dba:	b503      	push	{r0, r1, lr}
 8009dbc:	4601      	mov	r1, r0
 8009dbe:	ab03      	add	r3, sp, #12
 8009dc0:	4805      	ldr	r0, [pc, #20]	@ (8009dd8 <fiprintf+0x20>)
 8009dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc6:	6800      	ldr	r0, [r0, #0]
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	f7fe fe51 	bl	8008a70 <_vfiprintf_r>
 8009dce:	b002      	add	sp, #8
 8009dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd4:	b003      	add	sp, #12
 8009dd6:	4770      	bx	lr
 8009dd8:	20000030 	.word	0x20000030

08009ddc <__ascii_wctomb>:
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4608      	mov	r0, r1
 8009de0:	b141      	cbz	r1, 8009df4 <__ascii_wctomb+0x18>
 8009de2:	2aff      	cmp	r2, #255	@ 0xff
 8009de4:	d904      	bls.n	8009df0 <__ascii_wctomb+0x14>
 8009de6:	228a      	movs	r2, #138	@ 0x8a
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dee:	4770      	bx	lr
 8009df0:	700a      	strb	r2, [r1, #0]
 8009df2:	2001      	movs	r0, #1
 8009df4:	4770      	bx	lr

08009df6 <abort>:
 8009df6:	b508      	push	{r3, lr}
 8009df8:	2006      	movs	r0, #6
 8009dfa:	f000 f82b 	bl	8009e54 <raise>
 8009dfe:	2001      	movs	r0, #1
 8009e00:	f000 f84c 	bl	8009e9c <_exit>

08009e04 <_raise_r>:
 8009e04:	291f      	cmp	r1, #31
 8009e06:	b538      	push	{r3, r4, r5, lr}
 8009e08:	4605      	mov	r5, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	d904      	bls.n	8009e18 <_raise_r+0x14>
 8009e0e:	2316      	movs	r3, #22
 8009e10:	6003      	str	r3, [r0, #0]
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e1a:	b112      	cbz	r2, 8009e22 <_raise_r+0x1e>
 8009e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e20:	b94b      	cbnz	r3, 8009e36 <_raise_r+0x32>
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 f830 	bl	8009e88 <_getpid_r>
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e32:	f000 b817 	b.w	8009e64 <_kill_r>
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d00a      	beq.n	8009e50 <_raise_r+0x4c>
 8009e3a:	1c59      	adds	r1, r3, #1
 8009e3c:	d103      	bne.n	8009e46 <_raise_r+0x42>
 8009e3e:	2316      	movs	r3, #22
 8009e40:	6003      	str	r3, [r0, #0]
 8009e42:	2001      	movs	r0, #1
 8009e44:	e7e7      	b.n	8009e16 <_raise_r+0x12>
 8009e46:	2100      	movs	r1, #0
 8009e48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	4798      	blx	r3
 8009e50:	2000      	movs	r0, #0
 8009e52:	e7e0      	b.n	8009e16 <_raise_r+0x12>

08009e54 <raise>:
 8009e54:	4b02      	ldr	r3, [pc, #8]	@ (8009e60 <raise+0xc>)
 8009e56:	4601      	mov	r1, r0
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	f7ff bfd3 	b.w	8009e04 <_raise_r>
 8009e5e:	bf00      	nop
 8009e60:	20000030 	.word	0x20000030

08009e64 <_kill_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d07      	ldr	r5, [pc, #28]	@ (8009e84 <_kill_r+0x20>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	4611      	mov	r1, r2
 8009e70:	602b      	str	r3, [r5, #0]
 8009e72:	f000 f80b 	bl	8009e8c <_kill>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	d102      	bne.n	8009e80 <_kill_r+0x1c>
 8009e7a:	682b      	ldr	r3, [r5, #0]
 8009e7c:	b103      	cbz	r3, 8009e80 <_kill_r+0x1c>
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	bd38      	pop	{r3, r4, r5, pc}
 8009e82:	bf00      	nop
 8009e84:	20025e34 	.word	0x20025e34

08009e88 <_getpid_r>:
 8009e88:	f7fd b9b2 	b.w	80071f0 <_getpid>

08009e8c <_kill>:
 8009e8c:	4b02      	ldr	r3, [pc, #8]	@ (8009e98 <_kill+0xc>)
 8009e8e:	2258      	movs	r2, #88	@ 0x58
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e96:	4770      	bx	lr
 8009e98:	20025e34 	.word	0x20025e34

08009e9c <_exit>:
 8009e9c:	e7fe      	b.n	8009e9c <_exit>
	...

08009ea0 <_init>:
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	bf00      	nop
 8009ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea6:	bc08      	pop	{r3}
 8009ea8:	469e      	mov	lr, r3
 8009eaa:	4770      	bx	lr

08009eac <_fini>:
 8009eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eae:	bf00      	nop
 8009eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb2:	bc08      	pop	{r3}
 8009eb4:	469e      	mov	lr, r3
 8009eb6:	4770      	bx	lr
